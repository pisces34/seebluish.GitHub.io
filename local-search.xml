<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1661. Average Time of Process per Machine</title>
    <link href="/2024/11/18/leetcode/1661/"/>
    <url>/2024/11/18/leetcode/1661/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.cn/problems/average-time-of-process-per-machine/description/?envType=study-plan-v2&amp;envId=sql-free-50">https://leetcode.cn/problems/average-time-of-process-per-machine/description/?envType=study-plan-v2&amp;envId=sql-free-50</a></p><p>Example 1:</p><p>Input:<br>Activity table:<br>+————+————+—————+———–+<br>| machine_id | process_id | activity_type | timestamp |<br>+————+————+—————+———–+<br>| 0          | 0          | start         | 0.712     |<br>| 0          | 0          | end           | 1.520     |<br>| 0          | 1          | start         | 3.140     |<br>| 0          | 1          | end           | 4.120     |<br>| 1          | 0          | start         | 0.550     |<br>| 1          | 0          | end           | 1.550     |<br>| 1          | 1          | start         | 0.430     |<br>| 1          | 1          | end           | 1.420     |<br>| 2          | 0          | start         | 4.100     |<br>| 2          | 0          | end           | 4.512     |<br>| 2          | 1          | start         | 2.500     |<br>| 2          | 1          | end           | 5.000     |<br>+————+————+—————+———–+<br>Output:<br>+————+—————–+<br>| machine_id | processing_time |<br>+————+—————–+<br>| 0          | 0.894           |<br>| 1          | 0.995           |<br>| 2          | 1.456           |<br>+————+—————–+<br>Explanation:<br>There are 3 machines running 2 processes each.<br>“<br>Machine 0’s average time is ((1.520 - 0.712) + (4.120 - 3.140)) / 2 = 0.894<br>Machine 1’s average time is ((1.550 - 0.550) + (1.420 - 0.430)) / 2 = 0.995<br>Machine 2’s average time is ((4.512 - 4.100) + (5.000 - 2.500)) / 2 = 1.456<br>“</p><h1 id="Write-your-MySQL-query-statement-below-1"><a href="#Write-your-MySQL-query-statement-below-1" class="headerlink" title="Write your MySQL query statement below 1"></a>Write your MySQL query statement below 1</h1><p>SELECT machine_id,<br>ROUND(SUM(IF(activity_type=”start”,-timestamp,timestamp)) / COUNT(DISTINCT process_id) , 3) AS processing_time<br>FROM Activity<br>GROUP BY machine_id;</p><p>使用 IF(activity_type=”start”, -timestamp, timestamp) 将 start 时间取负值，而 end 时间保持正值。<br>通过 SUM() 累加所有 timestamp，由于 start 和 end 是成对出现的，最终得到的是每个 process_id 的时间差总和。<br>COUNT(DISTINCT process_id) 计算每台机器中唯一的 process_id 数量。<br>SUM / COUNT 求得每台机器的平均处理时间，最终用 ROUND 保留 3 位小数。<br>优点：<br>简洁清晰，逻辑简单，直接按列运算，不需要表连接。<br>不依赖数据的行数或顺序，具有较好的可读性。<br>缺点：<br>依赖于 IF 判断，将正负时间差叠加在一起，这种方式在数据量非常大时可能会有一定的性能开销。<br>假如存在非成对的 start 和 end 记录（例如，缺少 start 或 end），结果可能会不准确。</p><h1 id="Write-your-MySQL-query-statement-below-2"><a href="#Write-your-MySQL-query-statement-below-2" class="headerlink" title="Write your MySQL query statement below 2"></a>Write your MySQL query statement below 2</h1><p>select machine_id,<br>round(<br>    (sum(case activity_type when ‘end’ then timestamp else 0 end)<br>    + sum(case activity_type when ‘start’ then -timestamp else 0 end))<br>    /(count(*)/2),3) processing_time<br>from Activity<br>group by machine_id</p><p>解释：<br>使用 CASE 条件判断，将 end 的 timestamp 累加，将 start 的 timestamp 取负值。<br>SUM() 计算所有 timestamp 的加和，得到每台机器的所有时间差。<br>COUNT(<em>) / 2 假设每个 process_id 有两条记录（start 和 end），因此通过总行数除以 2 来得到进程数。<br>最后计算平均时间差并用 ROUND 保留 3 位小数。<br>优点：<br>使用 COUNT(</em>) / 2 来推断进程数量，避免了 COUNT(DISTINCT process_id) 的开销。<br>表达式对数据规律性（成对出现）进行了假设，适用于严格成对的情况。<br>缺点：<br>假如数据存在不完整的 start 或 end 记录，COUNT(*) / 2 的假设将导致错误的计算结果。<br>逻辑稍显复杂，尤其在理解 CASE 和 COUNT 的作用时可能不直观。</p><h1 id="Write-your-MySQL-query-statement-below-3"><a href="#Write-your-MySQL-query-statement-below-3" class="headerlink" title="Write your MySQL query statement below 3"></a>Write your MySQL query statement below 3</h1><p>SELECT<br>    a.machine_id,<br>    ROUND(<br>        SUM(b.timestamp - a.timestamp) / COUNT(a.machine_id = b.machine_id) , 3)as  processing_time<br>FROM<br>    Activity a<br>LEFT JOIN<br>    Activity b<br>ON<br>    a.machine_id = b.machine_id<br>AND<br>    a.activity_type = ‘start’<br>AND<br>    b.activity_type = ‘end’<br>AND<br>    a.process_id = b.process_id<br>WHERE<br>    b.machine_id is NOT NULL<br>GROUP BY<br>    a.machine_id</p><p>解释：<br>将表 Activity 自连接，通过 LEFT JOIN 连接 start 和 end 的记录。<br>ON 条件：匹配相同的 machine_id 和 process_id，并且 a 为 start，b 为 end。<br>SUM(b.timestamp - a.timestamp) 累加每个 process_id 的时间差。<br>COUNT(a.machine_id = b.machine_id) 计算有效的匹配对数量（即 start 和 end 配对的数量）。<br>计算每台机器的平均处理时间并用 ROUND 保留 3 位小数。<br>优点：<br>严格基于成对的 start 和 end 记录，不会受不完整记录的影响。<br>数据更精确，适合处理复杂或不完全成对的数据场景。<br>缺点：<br>使用 JOIN 操作，性能开销较大，特别是在数据量很大的情况下。<br>写法相对复杂，可读性较低。</p><table><thead><tr><th>machine_id</th><th>process_id</th><th>activity_type</th><th>timestamp</th><th>machine_id</th><th>process_id</th><th>activity_type</th><th>timestamp</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>start</td><td>0.712</td><td>0</td><td>0</td><td>end</td><td>1.52</td></tr><tr><td>0</td><td>0</td><td>end</td><td>1.52</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>0</td><td>1</td><td>start</td><td>3.14</td><td>0</td><td>1</td><td>end</td><td>4.12</td></tr><tr><td>0</td><td>1</td><td>end</td><td>4.12</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1</td><td>0</td><td>start</td><td>0.55</td><td>1</td><td>0</td><td>end</td><td>1.55</td></tr><tr><td>1</td><td>0</td><td>end</td><td>1.55</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1</td><td>1</td><td>start</td><td>0.43</td><td>1</td><td>1</td><td>end</td><td>1.42</td></tr><tr><td>1</td><td>1</td><td>end</td><td>1.42</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>2</td><td>0</td><td>start</td><td>4.1</td><td>2</td><td>0</td><td>end</td><td>4.512</td></tr><tr><td>2</td><td>0</td><td>end</td><td>4.512</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>2</td><td>1</td><td>start</td><td>2.5</td><td>2</td><td>1</td><td>end</td><td>5</td></tr><tr><td>2</td><td>1</td><td>end</td><td>5</td><td>null</td><td>null</td><td>null</td><td>null</td></tr></tbody></table><table><thead><tr><th>machine_id</th><th>process_id</th><th>activity_type</th><th>timestamp</th><th>machine_id</th><th>process_id</th><th>activity_type</th><th>timestamp</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>start</td><td>0.712</td><td>0</td><td>0</td><td>end</td><td>1.52</td></tr><tr><td>0</td><td>1</td><td>start</td><td>3.14</td><td>0</td><td>1</td><td>end</td><td>4.12</td></tr><tr><td>1</td><td>0</td><td>start</td><td>0.55</td><td>1</td><td>0</td><td>end</td><td>1.55</td></tr><tr><td>1</td><td>1</td><td>start</td><td>0.43</td><td>1</td><td>1</td><td>end</td><td>1.42</td></tr><tr><td>2</td><td>0</td><td>start</td><td>4.1</td><td>2</td><td>0</td><td>end</td><td>4.512</td></tr><tr><td>2</td><td>1</td><td>start</td><td>2.5</td><td>2</td><td>1</td><td>end</td><td>5</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>66. 加一</title>
    <link href="/2024/05/27/leetcode/66/"/>
    <url>/2024/05/27/leetcode/66/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.cn/problems/plus-one/">https://leetcode.cn/problems/plus-one/</a></p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>执行用时分布0ms击败100.00%使用 Java 的用户<br>消耗内存分布40.75MB击败85.65%使用 Java 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] plusOne(<span class="hljs-keyword">int</span>[] digits) &#123;<br>        <span class="hljs-keyword">int</span> last = digits.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = last; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (digits[i] + <span class="hljs-number">1</span> == <span class="hljs-number">10</span>) &#123; <span class="hljs-comment">// 有进位</span><br>                digits[i] = <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                digits[i] += <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">return</span> digits;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 进位到第一位发生溢出，例如[9] 返回 [1,0]</span><br>        <span class="hljs-keyword">int</span>[] overflow = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[digits.length + <span class="hljs-number">1</span>];<br>        overflow[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> overflow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>485. 最大连续 1 的个数</title>
    <link href="/2024/05/25/leetcode/485/"/>
    <url>/2024/05/25/leetcode/485/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.cn/problems/max-consecutive-ones/description/">https://leetcode.cn/problems/max-consecutive-ones/description/</a></p><p>执行用时：1 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：44.3 MB, 在所有 Java 提交中击败了99.40% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findMaxConsecutiveOnes</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num:nums) &#123;<br>            <span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>) &#123;<br>                count ++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                res = Math.max(res, count);<br>                count = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res &gt; count ? res : count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>448. 找到所有数组中消失的数字</title>
    <link href="/2024/02/29/leetcode/448/"/>
    <url>/2024/02/29/leetcode/448/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array/description/">https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array/description/</a></p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">findDisappearedNumbers</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">int</span> index = (num - <span class="hljs-number">1</span>) % n; <span class="hljs-comment">// 将出现的数字当做下标，并赋值</span><br>            nums[index] += n;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &lt;= n) &#123; <span class="hljs-comment">// 因为加上了数组长度n，未出现的数则小于等于n</span><br>                res.add(i+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findDisappearedNumbers</span>(<span class="hljs-params">nums: <span class="hljs-built_in">number</span>[]</span>): <span class="hljs-title">number</span>[] </span>&#123;<br>    <span class="hljs-keyword">let</span> n = nums.length;<br>    nums.forEach(<span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> x = (num - <span class="hljs-number">1</span>) % n;<br>        nums[x] += n;<br>    &#125;)<br>    <span class="hljs-keyword">let</span> res: <span class="hljs-built_in">number</span>[] = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] &lt;= n) &#123;<br>            res.push(i + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>58. 最后一个单词的长度</title>
    <link href="/2024/02/26/leetcode/58/"/>
    <url>/2024/02/26/leetcode/58/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.cn/problems/length-of-last-word/description/">https://leetcode.cn/problems/length-of-last-word/description/</a></p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLastWord</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        String ss = s.trim();<br>        <span class="hljs-keyword">int</span> n = ss.length();<br>        <span class="hljs-keyword">while</span>(n &gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (ss.charAt(n-<span class="hljs-number">1</span>) != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                res++;<br>                n--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3038. 相同分数的最大操作数目 I</title>
    <link href="/2024/02/24/leetcode/3038/"/>
    <url>/2024/02/24/leetcode/3038/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.cn/problems/maximum-number-of-operations-with-the-same-score-i/description/">https://leetcode.cn/problems/maximum-number-of-operations-with-the-same-score-i/description/</a></p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>简单模拟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxOperations</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i + <span class="hljs-number">1</span> &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] + nums[i+<span class="hljs-number">1</span>] == sum) &#123;<br>                count ++;<br>                i++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">maxOperations</span>(<span class="hljs-params">nums: <span class="hljs-built_in">number</span>[]</span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">let</span> sum = nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i + <span class="hljs-number">1</span> &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] + nums[i+<span class="hljs-number">1</span>] == sum) &#123;<br>            count ++;<br>            i++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3042. 统计前后缀下标对 I</title>
    <link href="/2024/02/23/leetcode/3042/"/>
    <url>/2024/02/23/leetcode/3042/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.cn/problems/count-prefix-and-suffix-pairs-i/description/">https://leetcode.cn/problems/count-prefix-and-suffix-pairs-i/description/</a></p><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countPrefixSuffixPairs</span>(<span class="hljs-params">words: <span class="hljs-built_in">string</span>[]</span>): <span class="hljs-title">number</span> </span>&#123;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; words.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; words.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (isPrefixAndSuffix(words[i], words[j])) &#123;<br>                res ++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isPrefixAndSuffix</span>(<span class="hljs-params">str1, str2</span>): <span class="hljs-title">boolean</span> </span>&#123;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt; str1.length) &#123;<br>        <span class="hljs-keyword">if</span> (str1[i] != str2[j]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        i++;<br>        j++;<br>    &#125;<br>    i = <span class="hljs-number">0</span>, j = str2.length - str1.length;<br>    <span class="hljs-keyword">while</span>(i &lt; str1.length) &#123;<br>        <span class="hljs-keyword">if</span> (str1[i] != str2[j]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        i++;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-comment">// function isPrefixAndSuffix (str1: string, str2: string) &#123;</span><br><span class="hljs-comment">//     return str2.startsWith(str1) &amp;&amp; str2.endsWith(str1)</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2811. 判断是否能拆分数组</title>
    <link href="/2023/08/10/leetcode/2811/"/>
    <url>/2023/08/10/leetcode/2811/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.cn/problems/check-if-it-is-possible-to-split-array/description/">https://leetcode.cn/problems/check-if-it-is-possible-to-split-array/description/</a></p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number[]&#125;</span> <span class="hljs-variable">nums</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> <span class="hljs-variable">m</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;boolean&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> canSplitArray = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, m</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> length = nums.length;<br>    <span class="hljs-keyword">if</span> (length &lt;= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] + nums[i + <span class="hljs-number">1</span>] &gt;= m) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2807. 在链表中插入最大公约数</title>
    <link href="/2023/08/08/leetcode/2807/"/>
    <url>/2023/08/08/leetcode/2807/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.cn/problems/insert-greatest-common-divisors-in-linked-list/description/">https://leetcode.cn/problems/insert-greatest-common-divisors-in-linked-list/description/</a></p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> insertGreatestCommonDivisors = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">head</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> cur = head;<br>    <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">let</span> insertNode = <span class="hljs-keyword">new</span> ListNode(gcd(cur.val, cur.next.val));<br>        insertNode.next = cur.next;<br>        cur.next = insertNode;<br>        cur = insertNode.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gcd</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>  <span class="hljs-keyword">if</span>(b === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> a;<br>  <span class="hljs-keyword">return</span> gcd(b,a % b);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2784. 检查数组是否是好的</title>
    <link href="/2023/08/08/leetcode/2784/"/>
    <url>/2023/08/08/leetcode/2784/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode.cn/problems/check-if-array-is-good/description/">https://leetcode.cn/problems/check-if-array-is-good/description/</a></p><p>执行用时：16 ms, 在所有 Swift 提交中击败了100.00% 的用户<br>内存消耗：13.53 MB, 在所有 Swift 提交中击败了100.00% 的用户</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isGood</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> nums.count;<br>        <span class="hljs-keyword">var</span> sortednums <span class="hljs-operator">=</span> nums.sorted()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n <span class="hljs-operator">-</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">if</span> sortednums[i] <span class="hljs-operator">!=</span> i <span class="hljs-operator">+</span> <span class="hljs-number">1</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> sortednums[n <span class="hljs-operator">-</span> <span class="hljs-number">1</span>] <span class="hljs-operator">==</span> n <span class="hljs-operator">-</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>34. 在排序数组中查找元素的第一个和最后一个位置</title>
    <link href="/2023/01/09/leetcode/34/"/>
    <url>/2023/01/09/leetcode/34/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] searchRange(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>                    <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>            <span class="hljs-keyword">int</span> left= <span class="hljs-number">0</span>, right = nums.length;<br>            <span class="hljs-keyword">if</span> (right &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; right; i++) &#123;<br>                    <span class="hljs-keyword">if</span> (nums[i] == target) &#123;<br>                        left = i;<br>                        res[<span class="hljs-number">0</span>] = left;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = right-<span class="hljs-number">1</span>; i &gt;= left; i--) &#123;<br>                    <span class="hljs-keyword">if</span> (nums[i] == target) &#123;<br>                        res[<span class="hljs-number">1</span>] = i;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>79. 单词搜索</title>
    <link href="/2022/04/22/leetcode/79/"/>
    <url>/2022/04/22/leetcode/79/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/word-search/">https://leetcode-cn.com/problems/word-search/</a></p><h3 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">exist</span><span class="hljs-params">(board: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">CharArray</span>&gt;, word: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">val</span> row = board.size<br>        <span class="hljs-keyword">val</span> columns = board[<span class="hljs-number">0</span>].size<br>        <span class="hljs-keyword">var</span> visited = Array(row) &#123; BooleanArray(columns) &#125;<br>        <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> until row) &#123;<br>            <span class="hljs-keyword">for</span> (j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> until columns) &#123;<br>                <span class="hljs-keyword">if</span> (dfs(board, visited, i, j, word, <span class="hljs-number">0</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">dfs</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        board: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">CharArray</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">        visited: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">BooleanArray</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">        i: <span class="hljs-type">Int</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        j: <span class="hljs-type">Int</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        word: <span class="hljs-type">String</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        k: <span class="hljs-type">Int</span></span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">if</span> (board[i][j] != word[k]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == word.length - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        visited[i][j] = <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">val</span> directions = arrayOf(intArrayOf(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), intArrayOf(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>), intArrayOf(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), intArrayOf(-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">var</span> result = <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">for</span> (dir <span class="hljs-keyword">in</span> directions) &#123;<br>            <span class="hljs-keyword">val</span> x = i + dir[<span class="hljs-number">0</span>] <span class="hljs-comment">// 上下行</span><br>            <span class="hljs-keyword">val</span> y = j + dir[<span class="hljs-number">1</span>] <span class="hljs-comment">// 左右列</span><br>            <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; board.size &amp;&amp; y &lt; board[<span class="hljs-number">0</span>].size) &#123;<br>                <span class="hljs-keyword">if</span> (!visited[x][y]) &#123;<br>                    <span class="hljs-keyword">val</span> flag = dfs(board, visited, x, y, word, k + <span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">if</span> (flag) &#123;<br>                        result = <span class="hljs-literal">true</span><br>                        <span class="hljs-keyword">break</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        visited[i][j] = <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">return</span> result<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160. 相交链表</title>
    <link href="/2022/04/19/leetcode/160/"/>
    <url>/2022/04/19/leetcode/160/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p><p>执行用时：156 ms, 在所有 Kotlin 提交中击败了64.44% 的用户<br>内存消耗：37.7 MB, 在所有 Kotlin 提交中击败了34.45% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function">fun <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(headA:ListNode?, headB:ListNode?)</span>:ListNode? </span>&#123;<br>        <span class="hljs-keyword">var</span> p1 = headA<br>        <span class="hljs-keyword">var</span> p2 = <span class="hljs-function">headB</span><br><span class="hljs-function">        <span class="hljs-title">while</span> <span class="hljs-params">(p1 != p2)</span> </span>&#123;<br>            p1 = <span class="hljs-keyword">if</span> (p1 != <span class="hljs-keyword">null</span>) p1.next <span class="hljs-keyword">else</span> headB<br>            p2 = <span class="hljs-keyword">if</span> (p2 != <span class="hljs-keyword">null</span>) p2.next <span class="hljs-keyword">else</span> headA<br>        &#125;<br>        <span class="hljs-keyword">return</span> p1;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6038. 向表达式添加括号后的最小结果</title>
    <link href="/2022/04/10/leetcode/6038/"/>
    <url>/2022/04/10/leetcode/6038/</url>
    
    <content type="html"><![CDATA[<p>执行用时：6 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：40.1 MB, 在所有 Java 提交中击败了100.00% 的用户<br>通过测试用例：124 / 124</p><p>题目链接：<a href="https://leetcode-cn.com/problems/minimize-result-by-adding-parentheses-to-expression/">https://leetcode-cn.com/problems/minimize-result-by-adding-parentheses-to-expression/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">minimizeResult</span><span class="hljs-params">(String expression)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> plus = expression.lastIndexOf(<span class="hljs-string">&quot;+&quot;</span>);<br>        <span class="hljs-keyword">int</span> m = expression.substring(<span class="hljs-number">0</span>, plus)<br>                .toCharArray()<br>                .length;<br>        <span class="hljs-keyword">int</span> n = expression.substring(plus + <span class="hljs-number">1</span>)<br>                .toCharArray()<br>                .length;<br>        <span class="hljs-keyword">int</span> minNum = Integer.MAX_VALUE;<br>        <span class="hljs-keyword">int</span> end = expression.length();<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = end;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = end; j &gt; plus + <span class="hljs-number">1</span>; j--) &#123;<br>                <span class="hljs-keyword">int</span> a = (i &gt; <span class="hljs-number">0</span> ? Integer.parseInt(expression.substring(<span class="hljs-number">0</span>, i)) : <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">int</span> b = Integer.parseInt(expression.substring(i, m));<br>                <span class="hljs-keyword">int</span> c = Integer.parseInt(expression.substring(plus+<span class="hljs-number">1</span>, j));<br>                <span class="hljs-keyword">int</span> d = (j &lt; end ? Integer.parseInt(expression.substring(j, end)) : <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">int</span> sum = a * (b + c) * d;<br>                <span class="hljs-keyword">if</span> (sum &lt; minNum) &#123;<br>                    minNum = sum;<br>                    left = i;<br>                    right = j;<br>                &#125;<br>            &#125;<br>        &#125;<br>        String res = expression.substring(<span class="hljs-number">0</span>,left) + <span class="hljs-string">&quot;(&quot;</span><br>                + expression.substring(left, right) + <span class="hljs-string">&quot;)&quot;</span><br>                + expression.substring(right) ;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6037. 按奇偶性交换后的最大数字</title>
    <link href="/2022/04/10/leetcode/6037/"/>
    <url>/2022/04/10/leetcode/6037/</url>
    
    <content type="html"><![CDATA[<p>执行用时：2 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：38.6 MB, 在所有 Java 提交中击败了100.00% 的用户</p><p>题目链接：<a href="https://leetcode-cn.com/problems/largest-number-after-digit-swaps-by-parity/">https://leetcode-cn.com/problems/largest-number-after-digit-swaps-by-parity/</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>将下标存入list，同时收集整数，排序后依次放回</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">largestInteger</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] arr = String.valueOf(num).toCharArray();<br>        <span class="hljs-keyword">int</span> len = arr.length;<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[len];<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        ArrayList&lt;Integer&gt; oddIdx = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        ArrayList&lt;Integer&gt; odd = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        ArrayList&lt;Integer&gt; evenIdx = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        ArrayList&lt;Integer&gt; even = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">int</span> cur = arr[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (cur % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>                odd.add(cur);<br>                oddIdx.add(i);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                even.add(cur);<br>                evenIdx.add(i);<br>            &#125;<br>        &#125;<br>        odd.sort(Comparator.reverseOrder());<br>        even.sort(Comparator.reverseOrder());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; oddIdx.size(); i++) &#123;<br>            res[oddIdx.get(i)] = odd.get(i);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; evenIdx.size(); i++) &#123;<br>            res[evenIdx.get(i)] = even.get(i);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; res.length; i++) &#123;<br>            ans = ans * <span class="hljs-number">10</span> + res[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 24. 反转链表</title>
    <link href="/2022/04/09/leetcode/offer24/"/>
    <url>/2022/04/09/leetcode/offer24/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/</a>  </p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：40.6 MB, 在所有 Java 提交中击败了65.75% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode pre = <span class="hljs-keyword">null</span>, cur = head;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>            ListNode temp = cur.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = temp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 22. 链表中倒数第k个节点</title>
    <link href="/2022/04/09/leetcode/offer22/"/>
    <url>/2022/04/09/leetcode/offer22/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/</a>    </p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：39.1 MB, 在所有 Java 提交中击败了72.30% 的用户<br>通过测试用例：208 / 208</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getKthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        ListNode slow = head, fast = head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            fast = fast.next;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-keyword">null</span>) &#123;<br>            slow = slow.next;<br>            fast = fast.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 18. 删除链表的节点</title>
    <link href="/2022/04/09/leetcode/offer18/"/>
    <url>/2022/04/09/leetcode/offer18/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/">https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/</a></p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：40.7 MB, 在所有 Java 提交中击败了65.58% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">deleteNode</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        ListNode res = head;<br>        <span class="hljs-keyword">if</span> (head.val == val) &#123;<br>            res = head.next;<br>            head = <span class="hljs-keyword">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (head.next != <span class="hljs-keyword">null</span> &amp;&amp; head.next.val != val) &#123;<br>                head = head.next;<br>            &#125;<br>            head.next = head.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>946. 验证栈序列</title>
    <link href="/2022/03/16/leetcode/946/"/>
    <url>/2022/03/16/leetcode/946/</url>
    
    <content type="html"><![CDATA[<p>执行用时：1 ms, 在所有 Java 提交中击败了92.86% 的用户<br>内存消耗：41 MB, 在所有 Java 提交中击败了36.08%</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">validateStackSequences</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] pushed, <span class="hljs-keyword">int</span>[] popped)</span> </span>&#123;<br>       Deque&lt;Integer&gt; deque = <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;();<br>       <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> val: pushed) &#123;<br>            deque.addLast(val);<br>            <span class="hljs-keyword">while</span> (!deque.isEmpty() &amp;&amp; deque.peekLast() == popped[i]) &#123;<br>                deque.pollLast();<br>                i ++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> deque.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>栈</tag>
      
      <tag>Deque</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8. 字符串转换整数 (atoi)</title>
    <link href="/2022/03/16/leetcode/8/"/>
    <url>/2022/03/16/leetcode/8/</url>
    
    <content type="html"><![CDATA[<p>执行用时：1 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：41.5 MB, 在所有 Java 提交中击败了11.09% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">myAtoi</span><span class="hljs-params">(String s)</span> </span>&#123;<br>                <span class="hljs-keyword">char</span>[] chars = s.trim().toCharArray();<br>        <span class="hljs-keyword">if</span> (chars.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> boundary = Integer.MAX_VALUE / <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> start = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> neg = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (chars[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>            neg = -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (chars[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;+&#x27;</span>) &#123;<br>            start = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start; i &lt; chars.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (chars[i] &lt; <span class="hljs-string">&#x27;0&#x27;</span> || chars[i] &gt; <span class="hljs-string">&#x27;9&#x27;</span>) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span> (sum &gt; boundary || sum == boundary &amp;&amp; chars[i] &gt; <span class="hljs-string">&#x27;7&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> neg == <span class="hljs-number">1</span> ? Integer.MAX_VALUE : Integer.MIN_VALUE;<br>            &#125;<br>            sum = sum * <span class="hljs-number">10</span> + (chars[i] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> neg*sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：1 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：41.2 MB, 在所有 Java 提交中击败了34.40% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strToInt</span><span class="hljs-params">(String str)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (str.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">boolean</span> neg = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (str.charAt(i) != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (str.charAt(i) == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>                    start = i + <span class="hljs-number">1</span>;<br>                    neg = <span class="hljs-keyword">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str.charAt(i) == <span class="hljs-string">&#x27;+&#x27;</span>) &#123;<br>                    start = i + <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; str.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span> &lt;= <span class="hljs-number">9</span>) &#123;<br>                    start = i;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start; i &lt; str.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (str.charAt(i) == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            start = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start; i &lt; str.length(); i++) &#123;<br>            <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (str.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; str.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span> &lt;= <span class="hljs-number">9</span>) &#123;<br>                t = str.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                <span class="hljs-keyword">if</span> (!neg) &#123;<br>                    <span class="hljs-keyword">if</span>(sum &gt; (Integer.MAX_VALUE-t)/<span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> Integer.MAX_VALUE;<br>                    sum = sum * <span class="hljs-number">10</span> + t;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span>(sum &lt; (Integer.MIN_VALUE+t)/<span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> Integer.MIN_VALUE;<br>                    sum = sum * <span class="hljs-number">10</span> - t;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>599. 两个列表的最小索引总和</title>
    <link href="/2022/03/15/leetcode/599/"/>
    <url>/2022/03/15/leetcode/599/</url>
    
    <content type="html"><![CDATA[<p>执行用时：268 ms, 在所有 Kotlin 提交中击败了100.00% 的用户<br>内存消耗：35.8 MB, 在所有 Kotlin 提交中击败了100.00% 的用户<br>通过测试用例：136 / 136</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function">fun <span class="hljs-title">findRestaurant</span><span class="hljs-params">(list1: Array&lt;String&gt;, list2: Array&lt;String&gt;)</span>: Array&lt;String&gt; </span>&#123;<br>        val map1: HashMap&lt;String, Int&gt; = hashMapOf()<br>        val res = mutableListOf&lt;String&gt;()<br>        <span class="hljs-keyword">var</span> minIndex = <span class="hljs-number">10001</span>;<br>        <span class="hljs-keyword">for</span> (i in list1.indices) &#123;<br>            map1[list1[i]] = i<br>        &#125;<br>        <span class="hljs-keyword">for</span> (i in list2.indices) &#123;<br>            <span class="hljs-keyword">if</span> (map1[list2[i]] != <span class="hljs-keyword">null</span> &amp;&amp; i + map1[list2[i]]!! &lt;= minIndex) &#123;<br>                minIndex = i + map1[list2[i]]!!<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (i in list2.indices) &#123;<br>            <span class="hljs-keyword">if</span> (map1[list2[i]] != <span class="hljs-keyword">null</span> &amp;&amp; i + map1[list2[i]]!! &lt;= minIndex) &#123;<br>                res.add(list2[i])<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.toTypedArray()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 66. 构建乘积数组</title>
    <link href="/2022/03/02/leetcode/offer66/"/>
    <url>/2022/03/02/leetcode/offer66/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/gou-jian-cheng-ji-shu-zu-lcof/">https://leetcode-cn.com/problems/gou-jian-cheng-ji-shu-zu-lcof/</a></p><p>算法流程<br>    首先申请结果数组 res<br>    求出左侧三角从上到下的值，依次存入 res[i] 中<br>    求出右侧三角从下到上的值，并且和之前的 res[i] 做乘积存入，即可得到结果</p><p>作者：画手大鹏<br>链接：<a href="https://leetcode-cn.com/leetbook/read/illustrate-lcof/5wpmzm/">https://leetcode-cn.com/leetbook/read/illustrate-lcof/5wpmzm/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] constructArr(<span class="hljs-keyword">int</span>[] a) &#123;<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[a.length];<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">1</span>, right = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            res[i] = left;<br>            left *= a[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = a.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            res[i] *= right;<br>            right *= a[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>917. 仅仅反转字母</title>
    <link href="/2022/02/23/leetcode/917/"/>
    <url>/2022/02/23/leetcode/917/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/reverse-only-letters/">https://leetcode-cn.com/problems/reverse-only-letters/</a></p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：39.4 MB, 在所有 Java 提交中击败了12.78% 的用户<br>通过测试用例：115 / 115</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reverseOnlyLetters</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = s.length() -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">char</span>[] str = s.toCharArray();<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-keyword">char</span> leftCh = s.charAt(left);<br>            <span class="hljs-keyword">char</span> rightCh = s.charAt(right);<br>            <span class="hljs-keyword">if</span> (Character.isLetter(leftCh) &amp;&amp; Character.isLetter(rightCh)) &#123;<br>                <span class="hljs-keyword">char</span> temp = str[left];<br>                str[left] = str[right];<br>                str[right] = temp;<br>                left++;<br>                right--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!Character.isLetter(leftCh)) &#123;<br>                left++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!Character.isLetter(rightCh)) &#123;<br>                right--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 57 - II. 和为s的连续正数序列</title>
    <link href="/2022/02/15/leetcode/offer57-2/"/>
    <url>/2022/02/15/leetcode/offer57-2/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/">https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/</a></p><p>执行用时：4 ms, 在所有 Swift 提交中击败了91.80% 的用户<br>内存消耗：13.6 MB, 在所有 Swift 提交中击败了70.49% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findContinuousSequence</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">target</span>: <span class="hljs-type">Int</span>)</span> -&gt; [[<span class="hljs-type">Int</span>]] &#123;<br>        <span class="hljs-keyword">var</span> left <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, right <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br>        <span class="hljs-keyword">var</span> ans <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]]()<br>        <span class="hljs-keyword">while</span> left <span class="hljs-operator">&lt;</span> right &#123;<br>            <span class="hljs-comment">// 等差数列求和</span><br>            <span class="hljs-keyword">let</span> sum <span class="hljs-operator">=</span> (left <span class="hljs-operator">+</span> right) <span class="hljs-operator">*</span> (right <span class="hljs-operator">-</span> left <span class="hljs-operator">+</span> <span class="hljs-number">1</span>) <span class="hljs-operator">/</span> <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> sum <span class="hljs-operator">==</span> target &#123;<br>                ans.append(<span class="hljs-type">Array</span>.<span class="hljs-keyword">init</span>(left<span class="hljs-operator">...</span>right))<br>                left <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> sum <span class="hljs-operator">&lt;</span> target &#123;<br>                right <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                left <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1380. 矩阵中的幸运数</title>
    <link href="/2022/02/15/leetcode/1380/"/>
    <url>/2022/02/15/leetcode/1380/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix/">https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix/</a></p><p>执行用时：148 ms, 在所有 Swift 提交中击败了100.00% 的用户<br>内存消耗：14.1 MB, 在所有 Swift 提交中击败了14.29% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">luckyNumbers</span> (<span class="hljs-keyword">_</span> <span class="hljs-params">matrix</span>: [[<span class="hljs-type">Int</span>]])</span> -&gt; [<span class="hljs-type">Int</span>] &#123;<br>        <span class="hljs-keyword">let</span> rows <span class="hljs-operator">=</span> matrix.count<br>        <span class="hljs-keyword">let</span> cols <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].count<br>        <span class="hljs-keyword">var</span> row <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, column <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> ans <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> rows &#123;<br>            <span class="hljs-keyword">var</span> maxNum <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, minNum <span class="hljs-operator">=</span> <span class="hljs-number">100001</span><br>            <span class="hljs-keyword">var</span> flag <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>            <span class="hljs-comment">// 横向比较，i为当前所在行</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> cols &#123;<br>                <span class="hljs-keyword">if</span> matrix[i][j] <span class="hljs-operator">&lt;</span> minNum &#123;<br>                    minNum <span class="hljs-operator">=</span> matrix[i][j]<br>                    row <span class="hljs-operator">=</span> i<br>                    column <span class="hljs-operator">=</span> j<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 最小值坐标即当前最大值坐标</span><br>            maxNum <span class="hljs-operator">=</span> matrix[row][column]<br>            <span class="hljs-comment">// 垂直比较，固定列column，不是最大值则修改flag</span><br>            <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> rows &#123;<br>                <span class="hljs-keyword">if</span> maxNum <span class="hljs-operator">&lt;</span> matrix[v][column] &#123;<br>                    flag <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> flag <span class="hljs-operator">==</span> <span class="hljs-literal">true</span> &#123;<br>                ans.append(maxNum)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>540. 有序数组中的单一元素</title>
    <link href="/2022/02/14/leetcode/540/"/>
    <url>/2022/02/14/leetcode/540/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/single-element-in-a-sorted-array/">https://leetcode-cn.com/problems/single-element-in-a-sorted-array/</a></p><p>二分法<br>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：46.9 MB, 在所有 Java 提交中击败了14.20% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">singleNonDuplicate</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>, mid;<br>        <span class="hljs-keyword">while</span>(left &lt; right) &#123;<br>            mid = left + right &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// mid是偶数时 mid+1 = mid^1 </span><br>            <span class="hljs-comment">// mid是奇数时 mid-1 = mid^1</span><br>            <span class="hljs-keyword">if</span>(nums[mid] == nums[mid^<span class="hljs-number">1</span>]) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                right = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[left];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：152 ms, 在所有 Swift 提交中击败了84.62% 的用户<br>内存消耗：17.1 MB, 在所有 Swift 提交中击败了7.69% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">singleNonDuplicate</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">guard</span> nums.count <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> nums[<span class="hljs-number">0</span>] <span class="hljs-operator">!=</span> nums[<span class="hljs-number">1</span>] &#123;<br>            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>]<br>        &#125;<br>        <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, once <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums &#123;<br>            <span class="hljs-keyword">if</span> cur <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                cur <span class="hljs-operator">+=</span> num<br>                once <span class="hljs-operator">=</span> cur<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> cur <span class="hljs-operator">-</span> num <span class="hljs-operator">==</span> <span class="hljs-number">0</span>&#123;<br>                cur <span class="hljs-operator">-=</span> num<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                once <span class="hljs-operator">=</span> cur<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> once<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>for循环 步长2</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">singleNonDuplicate</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> nums.count<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">stride</span>(from: <span class="hljs-number">0</span>, to: n<span class="hljs-operator">-</span><span class="hljs-number">1</span>, by: <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span> nums[i] <span class="hljs-operator">!=</span> nums[i<span class="hljs-operator">+</span><span class="hljs-number">1</span>] &#123;<br>                <span class="hljs-keyword">return</span> nums[i]<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[n<span class="hljs-operator">-</span><span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>551. 学生出勤记录 I</title>
    <link href="/2022/02/13/leetcode/551/"/>
    <url>/2022/02/13/leetcode/551/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/student-attendance-record-i/">https://leetcode-cn.com/problems/student-attendance-record-i/</a></p><p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00% 的用户<br>内存消耗：13.6 MB, 在所有 Swift 提交中击败了100.00% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkRecord</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-type">A</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, <span class="hljs-type">L</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s &#123;<br>            <span class="hljs-keyword">if</span> i <span class="hljs-operator">==</span> <span class="hljs-string">&quot;A&quot;</span> &#123;<br>                <span class="hljs-type">A</span> <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                <span class="hljs-type">L</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> i <span class="hljs-operator">==</span> <span class="hljs-string">&quot;L&quot;</span> &#123;<br>                <span class="hljs-type">L</span> <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">L</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> <span class="hljs-type">A</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-operator">||</span> <span class="hljs-type">L</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1189. “气球” 的最大数量</title>
    <link href="/2022/02/13/leetcode/1189/"/>
    <url>/2022/02/13/leetcode/1189/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/maximum-number-of-balloons/">https://leetcode-cn.com/problems/maximum-number-of-balloons/</a></p><p>执行用时：1 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：39.6 MB, 在所有 Java 提交中击败了10.34% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxNumberOfBalloons</span><span class="hljs-params">(String text)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">26</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> ch: text.toCharArray()) &#123;<br>            chars[ch - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        <span class="hljs-comment">// 字符逐个比较最少数量</span><br>        ans = Math.min(chars[<span class="hljs-number">0</span>], chars[<span class="hljs-number">1</span>]);<br>        ans = Math.min(chars[<span class="hljs-string">&#x27;l&#x27;</span> - <span class="hljs-string">&#x27;a&#x27;</span>]/<span class="hljs-number">2</span>, ans);<br>        ans = Math.min(chars[<span class="hljs-string">&#x27;o&#x27;</span> - <span class="hljs-string">&#x27;a&#x27;</span>]/<span class="hljs-number">2</span>, ans);<br>        ans = Math.min(chars[<span class="hljs-string">&#x27;n&#x27;</span> - <span class="hljs-string">&#x27;a&#x27;</span>], ans);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：8 ms, 在所有 Java 提交中击败了27.19% 的用户<br>内存消耗：40.8 MB, 在所有 Java 提交中击败了5.17% 的用户</p><p>java map 新特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxNumberOfBalloons</span><span class="hljs-params">(String text)</span> </span>&#123;<br>        Map&lt;Character, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.put(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">0</span>);<br>        map.put(<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">0</span>);<br>        map.put(<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-number">0</span>);<br>        map.put(<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-number">0</span>);<br>        map.put(<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> ch: text.toCharArray()) &#123;<br>            map.computeIfPresent(ch, (key, oldValue) -&gt; oldValue+<span class="hljs-number">1</span>);<br>        &#125;<br>        map.compute(<span class="hljs-string">&#x27;l&#x27;</span>,(key, oldValue) -&gt; oldValue / <span class="hljs-number">2</span>);<br>        map.compute(<span class="hljs-string">&#x27;o&#x27;</span>,(key, oldValue) -&gt; oldValue / <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">int</span> ans = Collections.min(map.values());<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 57. 和为s的两个数字</title>
    <link href="/2022/02/12/leetcode/offer57/"/>
    <url>/2022/02/12/leetcode/offer57/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/">https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/</a></p><p>执行用时：1 ms, 在所有 Java 提交中击败了99.43% 的用户<br>内存消耗：60.2 MB, 在所有 Java 提交中击败了5.61% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (nums[right] + nums[left] != target) &#123;<br>            <span class="hljs-keyword">if</span> (nums[right] + nums[left] &lt; target) &#123;<br>                left++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                right--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span>[] ans = &#123;nums[left], nums[right]&#125;;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 53 - II. 0～n-1中缺失的数字</title>
    <link href="/2022/02/12/leetcode/offer53-2/"/>
    <url>/2022/02/12/leetcode/offer53-2/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/">https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/</a></p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：42.3 MB, 在所有 Java 提交中击败了5.02% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">missingNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-keyword">int</span> mid = (left + right) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] == mid) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1447. 最简分数</title>
    <link href="/2022/02/11/leetcode/1447/"/>
    <url>/2022/02/11/leetcode/1447/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/simplified-fractions/">https://leetcode-cn.com/problems/simplified-fractions/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">simplifiedFractions</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (gcd(i,j) == <span class="hljs-number">1</span>) &#123;<br>                    list.add(i+<span class="hljs-string">&quot;/&quot;</span>+j);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> c = a % b;<br>        <span class="hljs-keyword">while</span> (c != <span class="hljs-number">0</span>) &#123;<br>            a = b;<br>            b = c;<br>            c = a % b;<br>        &#125;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
      <tag>gcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2006. 差的绝对值为 K 的数对数目</title>
    <link href="/2022/02/09/leetcode/2006/"/>
    <url>/2022/02/09/leetcode/2006/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/count-number-of-pairs-with-absolute-difference-k/">https://leetcode-cn.com/problems/count-number-of-pairs-with-absolute-difference-k/</a></p><p>执行用时：1 ms, 在所有 Java 提交中击败了84.13% 的用户<br>内存消耗：41.1 MB, 在所有 Java 提交中击败了5.05% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">countKDifference</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] cnts = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">110</span>];<br>        <span class="hljs-keyword">int</span> n = nums.length, ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">int</span> t = nums[i];<br>            <span class="hljs-comment">// 两数之差在cnts中存在则ans+1</span><br>            <span class="hljs-keyword">if</span> (t - k &gt;= <span class="hljs-number">1</span>) &#123;<br>                ans += cnts[t - k];<br>            &#125;<br>            <span class="hljs-comment">// 两数之和在cnts中存在则ans+1</span><br>            <span class="hljs-keyword">if</span> (t + k &lt;= <span class="hljs-number">100</span>) &#123;<br>                ans += cnts[t + k];<br>            &#125;<br>            cnts[t]++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>662. 二叉树最大宽度</title>
    <link href="/2022/02/08/leetcode/662/"/>
    <url>/2022/02/08/leetcode/662/</url>
    
    <content type="html"><![CDATA[<p>参考题解<br>层序遍历，给节点的值编号，给每个节点一个 position 值，如果我们走向左子树，那么 position -&gt; position * 2，如果我们走向右子树，那么 position -&gt; positon * 2 + 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">widthOfBinaryTree</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">int</span> maxWidth = <span class="hljs-number">0</span>;<br>        LinkedList&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        queue.add(root);<br>        root.val = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-keyword">int</span> curWidth = queue.getLast().val - queue.getFirst().val + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = queue.size(); i &gt; <span class="hljs-number">0</span> ; --i) &#123;<br>                TreeNode cur;<br>                cur = queue.poll();<br>                <span class="hljs-keyword">if</span> (cur.left != <span class="hljs-keyword">null</span>) &#123;<br>                    queue.add(cur.left);<br>                    cur.left.val = cur.val*<span class="hljs-number">2</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (cur.right != <span class="hljs-keyword">null</span>) &#123;<br>                    queue.add(cur.right);<br>                    cur.right.val = cur.val*<span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (curWidth &gt; maxWidth) &#123;<br>                maxWidth = curWidth;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxWidth;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>二叉树</tag>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>54. 螺旋矩阵</title>
    <link href="/2022/02/06/leetcode/54/"/>
    <url>/2022/02/06/leetcode/54/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/spiral-matrix/">https://leetcode-cn.com/problems/spiral-matrix/</a></p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：39.3 MB, 在所有 Java 提交中击败了6.47% 的用户</p><p>按层遍历<br>对于每层，从左上方开始以顺时针的顺序遍历所有元素。假设当前层的左上角位于 (top,left)(\textit{top}, \textit{left})(top,left)，右下角位于 (bottom,right)(\textit{bottom}, \textit{right})(bottom,right)，按照如下顺序遍历当前层的元素。</p><pre><code>从左到右遍历上侧元素，依次为 (top,left)(\textit&#123;top&#125;, \textit&#123;left&#125;)(top,left) 到 (top,right)(\textit&#123;top&#125;, \textit&#123;right&#125;)(top,right)。从上到下遍历右侧元素，依次为 (top+1,right)(\textit&#123;top&#125; + 1, \textit&#123;right&#125;)(top+1,right) 到 (bottom,right)(\textit&#123;bottom&#125;, \textit&#123;right&#125;)(bottom,right)。如果 left&lt;right\textit&#123;left&#125; &lt; \textit&#123;right&#125;left&lt;right 且 top&lt;bottom\textit&#123;top&#125; &lt; \textit&#123;bottom&#125;top&lt;bottom，则从右到左遍历下侧元素，依次为 (bottom,right−1)(\textit&#123;bottom&#125;, \textit&#123;right&#125; - 1)(bottom,right−1) 到 (bottom,left+1)(\textit&#123;bottom&#125;, \textit&#123;left&#125; + 1)(bottom,left+1)，以及从下到上遍历左侧元素，依次为 (bottom,left)(\textit&#123;bottom&#125;, \textit&#123;left&#125;)(bottom,left) 到 (top+1,left)(\textit&#123;top&#125; + 1, \textit&#123;left&#125;)(top+1,left)。</code></pre><p>遍历完当前层的元素之后，将 left\textit{left}left 和 top\textit{top}top 分别增加 111，将 right\textit{right}right 和 bottom\textit{bottom}bottom 分别减少 111，进入下一层继续遍历，直到遍历完所有元素为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (matrix.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        &#125;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = matrix[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>, bottom = matrix.length - <span class="hljs-number">1</span>;<br>        List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = left; i &lt;= right; i++) &#123;<br>                ans.add(matrix[top][i]);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (++top &gt; bottom) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = top; i &lt;= bottom; i++) &#123;<br>                ans.add(matrix[i][right]);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (left &gt; --right) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = right; i &gt;= left; i--) &#123;<br>                ans.add(matrix[bottom][i]);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (top &gt; -- bottom) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = bottom; i &gt;= top; i--) &#123;<br>                ans.add(matrix[i][left]);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (++left &gt; right) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1748. 唯一元素的和</title>
    <link href="/2022/02/06/leetcode/1748/"/>
    <url>/2022/02/06/leetcode/1748/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/sum-of-unique-elements/">https://leetcode-cn.com/problems/sum-of-unique-elements/</a></p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：39.3 MB, 在所有 Java 提交中击败了5.13% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sumOfUnique</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">101</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : nums) &#123;<br>            array[i]++;<br>        &#125;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">101</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (array[i] == <span class="hljs-number">1</span>) &#123;<br>                ans += i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5984. 拆分数位后四位数字的最小和</title>
    <link href="/2022/02/06/leetcode/5984/"/>
    <url>/2022/02/06/leetcode/5984/</url>
    
    <content type="html"><![CDATA[<p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：38.5 MB, 在所有 Java 提交中击败了100.00% 的用户<br>通过测试用例：99 / 99</p><p>周赛签到题！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minimumSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            arr[i] = num % <span class="hljs-number">10</span>;<br>            num /= <span class="hljs-number">10</span>;<br>        &#125;<br>        Arrays.sort(arr);<br>        <span class="hljs-keyword">return</span> (arr[<span class="hljs-number">0</span>] + arr[<span class="hljs-number">1</span>]) * <span class="hljs-number">10</span> + arr[<span class="hljs-number">2</span>] + arr[<span class="hljs-number">3</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</title>
    <link href="/2022/02/04/leetcode/offer21/"/>
    <url>/2022/02/04/leetcode/offer21/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/">https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] exchange(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; (nums[l] % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)) &#123;<br>                l++;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; (nums[r] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)) &#123;<br>                r--;<br>            &#125;<br>            <span class="hljs-keyword">int</span> tmp = nums[l];<br>            nums[l] = nums[r];<br>            nums[r] = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1716. 计算力扣银行的钱</title>
    <link href="/2022/02/04/leetcode/1725/"/>
    <url>/2022/02/04/leetcode/1725/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/number-of-rectangles-that-can-form-the-largest-square/">https://leetcode-cn.com/problems/number-of-rectangles-that-can-form-the-largest-square/</a></p><p>执行用时：196 ms, 在所有 Swift 提交中击败了100.00% 的用户<br>内存消耗：13.8 MB, 在所有 Swift 提交中击败了100.00% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countGoodRectangles</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">rectangles</span>: [[<span class="hljs-type">Int</span>]])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> maxLen <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> nums <span class="hljs-keyword">in</span> rectangles &#123;<br>            <span class="hljs-keyword">let</span> l <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>], r <span class="hljs-operator">=</span> nums[<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">let</span> k <span class="hljs-operator">=</span> <span class="hljs-built_in">min</span>(l,r)<br>            <span class="hljs-keyword">if</span> k <span class="hljs-operator">==</span> maxLen &#123;<br>                count <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> k <span class="hljs-operator">&gt;</span> maxLen &#123;<br>                maxLen <span class="hljs-operator">=</span> k<br>                count <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1414. 和为 K 的最少斐波那契数字数目</title>
    <link href="/2022/02/03/leetcode/1414/"/>
    <url>/2022/02/03/leetcode/1414/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/">https://leetcode-cn.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/</a></p><p>执行用时：2 ms, 在所有 Java 提交中击败了61.00% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findMinFibonacciNumbers</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        ArrayList&lt;Integer&gt; array = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">int</span> last = <span class="hljs-number">0</span>, cur = <span class="hljs-number">1</span>, next = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (cur &lt;= k) &#123;<br>            array.add(cur);<br>            next = last + cur;<br>            last = cur;<br>            cur = next;<br>        &#125;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = array.size()-<span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br>            <span class="hljs-keyword">if</span> (k - array.get(i) &gt;= <span class="hljs-number">0</span>) &#123;<br>                k -= array.get(i);<br>                count++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>674. 最长连续递增序列</title>
    <link href="/2022/02/03/leetcode/674/"/>
    <url>/2022/02/03/leetcode/674/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/">https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/</a></p><p>执行用时：52 ms, 在所有 Swift 提交中击败了100.00% 的用户<br>内存消耗：14.1 MB, 在所有 Swift 提交中击败了36.00% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findLengthOfLCIS</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> nums.sorted()<br>        <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> nums.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">if</span> nums[i] <span class="hljs-operator">&lt;</span> nums[i <span class="hljs-operator">+</span> <span class="hljs-number">1</span>] &#123;<br>                count <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                count <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>            &#125;<br>            res <span class="hljs-operator">=</span> <span class="hljs-built_in">max</span>(res, count)<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>796. 旋转字符串</title>
    <link href="/2022/02/03/leetcode/796/"/>
    <url>/2022/02/03/leetcode/796/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/rotate-string/">https://leetcode-cn.com/problems/rotate-string/</a></p><p>枚举每个字符</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：39.2 MB, 在所有 Java 提交中击败了5.08% 的用户<br>通过测试用例：45 / 45</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">rotateString</span><span class="hljs-params">(String s, String goal)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> Len = s.length();<br>        <span class="hljs-keyword">int</span> gLen = goal.length();<br>        <span class="hljs-keyword">if</span> (Len == gLen) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; Len; i++) &#123;<br>                <span class="hljs-comment">// 在目标串中定位当前扫描的字符</span><br>                <span class="hljs-keyword">int</span> aim = goal.indexOf(s.charAt(i));<br>                <span class="hljs-keyword">if</span> (aim == -<span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>                <span class="hljs-keyword">int</span> cursor = i;<br>                <span class="hljs-comment">// 取余判断是否相同， 相同则同时移动游标</span><br>                <span class="hljs-keyword">while</span> (s.charAt(cursor % Len) == goal.charAt(aim % Len)) &#123;<br>                    aim++;<br>                    <span class="hljs-comment">// 位移长度等于自身说明已全部扫描</span><br>                    <span class="hljs-keyword">if</span> (aim - i == Len) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                    &#125;<br>                    cursor++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2000. 反转单词前缀</title>
    <link href="/2022/02/02/leetcode/2000/"/>
    <url>/2022/02/02/leetcode/2000/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-prefix-of-word/">https://leetcode-cn.com/problems/reverse-prefix-of-word/</a></p><p>示例 1：</p><p>输入：word = “abcdefd”, ch = “d”<br>输出：”dcbaefd”<br>解释：”d” 第一次出现在下标 3 。<br>反转从下标 0 到下标 3（含下标 3）的这段字符，结果字符串是 “dcbaefd” 。</p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：39.4 MB, 在所有 Java 提交中击败了8.40% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reversePrefix</span><span class="hljs-params">(String word, <span class="hljs-keyword">char</span> ch)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> right = word.indexOf(ch);<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span>[] chars = word.toCharArray();<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            temp = chars[left];<br>            chars[left] = chars[right];<br>            chars[right] = temp;<br>            right--;<br>            left++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(chars);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 61. 扑克牌中的顺子</title>
    <link href="/2022/02/02/leetcode/offer61/"/>
    <url>/2022/02/02/leetcode/offer61/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/">https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/</a></p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：38.7 MB, 在所有 Java 提交中击败了5.14% 的用户<br>通过测试用例：203 / 203</p><p>桶计数+双指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isStraight</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">14</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x : nums) &#123;<br>            <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">0</span> &amp;&amp; arr[x] &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            arr[x]++;<br>        &#125;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">13</span>;<br>        <span class="hljs-keyword">while</span> (arr[l] == <span class="hljs-number">0</span>) &#123;<br>            l++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (arr[r] == <span class="hljs-number">0</span>) &#123;<br>            r--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> r - l &lt; <span class="hljs-number">5</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>排序+遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isStraight</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">int</span> joker = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] == <span class="hljs-number">0</span>) &#123;<br>                joker++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] == nums[i+<span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">4</span>] - nums[joker] &lt; <span class="hljs-number">5</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1342. 将数字变成 0 的操作次数</title>
    <link href="/2022/01/31/leetcode/1342/"/>
    <url>/2022/01/31/leetcode/1342/</url>
    
    <content type="html"><![CDATA[<p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：38.1 MB, 在所有 Java 提交中击败了5.31% 的用户<br>通过测试用例：204 / 204</p><p>Happy lunar new year！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numberOfSteps</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                num /= <span class="hljs-number">2</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                num--;<br>            &#125;<br>            count++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>884. 两句话中的不常见单词</title>
    <link href="/2022/01/30/leetcode/884/"/>
    <url>/2022/01/30/leetcode/884/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/uncommon-words-from-two-sentences/">https://leetcode-cn.com/problems/uncommon-words-from-two-sentences/</a></p><p>执行用时：2 ms, 在所有 Java 提交中击败了99.60% 的用户<br>内存消耗：39.9 MB, 在所有 Java 提交中击败了5.06% 的用户<br>通过测试用例：55 / 55</p><p>句子 是一串由空格分隔的单词。每个 单词 仅由小写字母组成。</p><p>如果某个单词在其中一个句子中恰好出现一次，在另一个句子中却 没有出现 ，那么这个单词就是 不常见的 。</p><p>给你两个 句子 s1 和 s2 ，返回所有 不常用单词 的列表。返回列表中单词可以按 任意顺序 组织。</p><p>示例 1：</p><p>输入：s1 = “this apple is sweet”, s2 = “this apple is sour”<br>输出：[“sweet”,”sour”]</p><p>示例 2：</p><p>输入：s1 = “apple apple”, s2 = “banana”<br>输出：[“banana”]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String[] uncommonFromSentences(String s1, String s2) &#123;<br>        HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String retval: s1.split(<span class="hljs-string">&quot; &quot;</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (map.containsKey(retval)) &#123;<br>                map.put(retval, map.get(retval)+<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                map.put(retval, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (String retval: s2.split(<span class="hljs-string">&quot; &quot;</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (map.containsKey(retval)) &#123;<br>                map.put(retval, map.get(retval)+<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                map.put(retval, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        ArrayList&lt;String&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String str: map.keySet()) &#123;<br>            <span class="hljs-keyword">if</span> (map.get(str) == <span class="hljs-number">1</span>) &#123;<br>                res.add(str);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.toArray(<span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6. Z 字形变换</title>
    <link href="/2022/01/25/leetcode/6/"/>
    <url>/2022/01/25/leetcode/6/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/zigzag-conversion/">https://leetcode-cn.com/problems/zigzag-conversion/</a></p><p>执行用时：48 ms, 在所有 Swift 提交中击败了91.49% 的用户<br>内存消耗：14.3 MB, 在所有 Swift 提交中击败了21.28% 的用户<br>通过测试用例：1157 / 1157</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">convert</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">numRows</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">guard</span> numRows <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> s &#125;<br>        <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> [<span class="hljs-type">String</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-string">&quot;&quot;</span>, count: numRows)<br>        <span class="hljs-keyword">var</span> str <span class="hljs-operator">=</span> <span class="hljs-type">Array</span>(s)<br>        <span class="hljs-keyword">var</span> cursor <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, move <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> str &#123;<br>            arr[cursor].append(ch)<br>            <span class="hljs-keyword">if</span> cursor <span class="hljs-operator">==</span> <span class="hljs-number">0</span> <span class="hljs-operator">||</span> cursor <span class="hljs-operator">==</span> numRows <span class="hljs-operator">-</span> <span class="hljs-number">1</span> &#123;<br>                move <span class="hljs-operator">=</span> <span class="hljs-operator">-</span>move<br>            &#125;<br>            cursor <span class="hljs-operator">+=</span> move<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr.joined()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：4 ms, 在所有 Java 提交中击败了82.25% 的用户<br>内存消耗：42.1 MB, 在所有 Java 提交中击败了10.85% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">convert</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> numRows)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (numRows == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br>        StringBuilder[] sbs = <span class="hljs-keyword">new</span> StringBuilder[numRows];<br>        <span class="hljs-keyword">int</span> cursor = <span class="hljs-number">0</span>, down = -<span class="hljs-number">1</span>;<br>        StringBuilder res = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numRows; i++) &#123;<br>            sbs[i] = <span class="hljs-keyword">new</span> StringBuilder();<br>        &#125; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> ch: s.toCharArray()) &#123;<br>            sbs[cursor].append(ch);<br>            <span class="hljs-keyword">if</span> (cursor == <span class="hljs-number">0</span> || cursor == numRows -<span class="hljs-number">1</span>) &#123;<br>                down = - down;<br>            &#125;<br>            cursor += down;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (StringBuilder str: sbs) &#123;<br>            res.append(str);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1716. 计算力扣银行的钱</title>
    <link href="/2022/01/25/leetcode/1716/"/>
    <url>/2022/01/25/leetcode/1716/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/</a></p><p>Hercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。</p><p>最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。</p><p>给你 n ，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。</p><p>示例 1：</p><p>输入：n = 4<br>输出：10<br>解释：第 4 天后，总额为 1 + 2 + 3 + 4 = 10 。</p><p>示例 2：</p><p>输入：n = 10<br>输出：37<br>解释：第 10 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37 。注意到第二个星期一，Hercy 存入 2 块钱。</p><p>示例 3：</p><p>输入：n = 20<br>输出：96<br>解释：第 20 天后，总额为 (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96 。</p><p>简单计算题/模拟题<br>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：38.1 MB, 在所有 Java 提交中击败了5.02% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">totalMoney</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> cycle = n / <span class="hljs-number">7</span>; <span class="hljs-comment">// 倍数</span><br>        <span class="hljs-keyword">int</span> days = n % <span class="hljs-number">7</span>;<br>        <span class="hljs-comment">// 7的余数日期时，存钱的起点是倍数+1，终点是倍数+余数， 多项式求和</span><br>        <span class="hljs-comment">// 倍数即连续的周数，计算有多少个7，存钱起点是倍数，终点是倍数+7</span><br>        <span class="hljs-keyword">return</span> (cycle*<span class="hljs-number">2</span> + <span class="hljs-number">1</span> + days) * days / <span class="hljs-number">2</span> + (cycle + <span class="hljs-number">7</span>) *cycle / <span class="hljs-number">2</span> * <span class="hljs-number">7</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3. 无重复字符的最长子串</title>
    <link href="/2022/01/25/leetcode/3/"/>
    <url>/2022/01/25/leetcode/3/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a></p><h3 id="java-代码"><a href="#java-代码" class="headerlink" title="java 代码"></a>java 代码</h3><p>执行用时：2 ms, 在所有 Java 提交中击败了95.98% 的用户<br>内存消耗：41.4 MB, 在所有 Java 提交中击败了5.02% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (s.length() == <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">int</span> cursor, end = <span class="hljs-number">1</span>, length = s.length();<br>        <span class="hljs-keyword">int</span> beginAgain = <span class="hljs-number">0</span>, longest = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (end &lt; length) &#123;<br>            cursor = beginAgain;<br>            <span class="hljs-keyword">while</span> (cursor &lt; end) &#123;<br>                <span class="hljs-keyword">if</span> (s.charAt(cursor) == s.charAt(end)) &#123;<br>                    beginAgain = cursor + <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                cursor++;<br>            &#125;<br>            longest = Math.max(longest, end - beginAgain + <span class="hljs-number">1</span>);<br>            end++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> longest;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="swift-代码"><a href="#swift-代码" class="headerlink" title="swift 代码"></a>swift 代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">lengthOfLongestSubstring</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> s.isEmpty &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>&#125;<br>        <span class="hljs-keyword">let</span> length <span class="hljs-operator">=</span> s.count<br>        <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> str <span class="hljs-operator">=</span> <span class="hljs-type">Array</span>(s)<br>        <span class="hljs-keyword">var</span> cursor <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, end <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, beginAgain <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> end <span class="hljs-operator">&lt;</span> length &#123;<br>            cursor <span class="hljs-operator">=</span> beginAgain<br>            <span class="hljs-keyword">while</span> cursor <span class="hljs-operator">&lt;</span> end &#123;<br>                <span class="hljs-keyword">if</span> str[cursor] <span class="hljs-operator">==</span> str[end] &#123;<br>                    beginAgain <span class="hljs-operator">=</span> cursor <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>                cursor <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>            count <span class="hljs-operator">=</span> <span class="hljs-built_in">max</span>(count, end <span class="hljs-operator">-</span> beginAgain <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)<br>            end <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> count<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2148. 元素计数</title>
    <link href="/2022/01/24/leetcode/2148/"/>
    <url>/2022/01/24/leetcode/2148/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/count-elements-with-strictly-smaller-and-greater-elements/">https://leetcode-cn.com/problems/count-elements-with-strictly-smaller-and-greater-elements/</a></p><p>示例 1：</p><ul><li>输入：nums = [11,7,2,15]</li><li>输出：2<br>解释：元素 7 ：严格较小元素是元素 2 ，严格较大元素是元素 11 。<br>元素 11 ：严格较小元素是元素 7 ，严格较大元素是元素 15 。<br>总计有 2 个元素都满足在 nums 中同时存在一个严格较小元素和一个严格较大元素。</li></ul><p>示例 2：</p><ul><li>输入：nums = [-3,3,3,90]</li><li>输出：2<br>解释：元素 3 ：严格较小元素是元素 -3 ，严格较大元素是元素 90 。<br>由于有两个元素的值为 3 ，总计有 2 个元素都满足在 nums 中同时存在一个严格较小元素和一个严格较大元素。</li></ul><p>执行用时：20 ms, 在所有 Swift 提交中击败了100.00% 的用户<br>内存消耗：13.7 MB, 在所有 Swift 提交中击败了100.00% 的用户</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">countElements</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> sortedNum <span class="hljs-operator">=</span> nums.sorted()<br>        <span class="hljs-keyword">let</span> l <span class="hljs-operator">=</span> sortedNum[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> sortedNum.last<span class="hljs-operator">!</span><br>        <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sortedNum &#123;<br>            <span class="hljs-keyword">if</span> i <span class="hljs-operator">&gt;</span> l <span class="hljs-operator">&amp;&amp;</span> i <span class="hljs-operator">&lt;</span> r &#123;<br>                count<span class="hljs-operator">+=</span><span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>169. 多数元素</title>
    <link href="/2022/01/23/leetcode/169/"/>
    <url>/2022/01/23/leetcode/169/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/majority-element/">https://leetcode-cn.com/problems/majority-element/</a></p><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。<br>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><ul><li>输入：[3,2,3]</li><li>输出：3</li></ul><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><ul><li>输入：[2,2,1,1,1,2,2]</li><li>输出：2</li></ul><p>swift，在数组中计数</p><p>执行用时：104 ms, 在所有 Swift 提交中击败了96.19% 的用户<br>内存消耗：15.1 MB, 在所有 Swift 提交中击败了90.95% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">majorityElement</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> nums.count <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>]<br>        &#125;<br>        <span class="hljs-keyword">let</span> size <span class="hljs-operator">=</span> nums.count<span class="hljs-operator">/</span><span class="hljs-number">2</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span> : <span class="hljs-type">Int</span>]()<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> value <span class="hljs-operator">=</span> arr[i] &#123;<br>                arr[i]<span class="hljs-operator">!</span> <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> arr[i]<span class="hljs-operator">!</span> <span class="hljs-operator">&gt;=</span> size &#123;<br>                    res <span class="hljs-operator">=</span> i<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                arr[i] <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>官方题解有证明过程，非常interesting</p><p>执行用时：1 ms, 在所有 Java 提交中击败了99.92% 的用户<br>内存消耗：44.3 MB, 在所有 Java 提交中击败了47.56% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">majorityElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>, compare = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i : nums) &#123;<br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>                compare = i;<br>            &#125;<br>            <span class="hljs-comment">// 判断当前元素是否和比较中的元素相等，不相等则次数-1</span><br>            count += i == compare ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> compare;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>376. 摆动序列</title>
    <link href="/2022/01/22/leetcode/376/"/>
    <url>/2022/01/22/leetcode/376/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/wiggle-subsequence/">https://leetcode-cn.com/problems/wiggle-subsequence/</a></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>输入：nums = [1,17,5,10,13,15,10,5,16,8]<br>输出：7<br>解释：这个序列包含几个长度为 7 摆动序列。<br>其中一个是 [1, 17, 10, 13, 10, 16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。</p><ul><li><p>差值为{16,-12,5,3,2,-5,11,-8}</p></li><li><p>循环与前一个值比较，遇到相同符号的数一起合并，遇到相反符号数时序列长度增加，修改前一个值。</p></li><li><p>leetcode题解为动态规划和贪心解法</p></li></ul><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：35.8 MB, 在所有 Java 提交中击败了80.28% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">wiggleMaxLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(nums.length == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        <span class="hljs-keyword">boolean</span> zero = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">int</span>[] diff = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            diff[i-<span class="hljs-number">1</span>] = nums[i] - nums[i-<span class="hljs-number">1</span>];<br>            <span class="hljs-comment">// 判断是否都为相同值</span><br>            <span class="hljs-keyword">if</span> (zero &amp;&amp; diff[i-<span class="hljs-number">1</span>] != <span class="hljs-number">0</span>) &#123;<br>                zero = <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (zero) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> last = diff[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n-<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (diff[i] &gt; <span class="hljs-number">0</span> &amp;&amp; last &lt; <span class="hljs-number">0</span>) &#123;<br>                len++;<br>                last = diff[i];<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(diff[i] &lt; <span class="hljs-number">0</span> &amp;&amp; last &gt; <span class="hljs-number">0</span>) &#123;<br>                len++;<br>                last = diff[i];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                last += diff[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> len+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1438. 绝对差不超过限制的最长连续子数组</title>
    <link href="/2022/01/20/leetcode/1438/"/>
    <url>/2022/01/20/leetcode/1438/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/">https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/</a></p><p>执行用时：53 ms, 在所有 Java 提交中击败了47.98% 的用户<br>内存消耗：47 MB, 在所有 Java 提交中击败了92.63% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">longestSubarray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> limit)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> maxV = nums[<span class="hljs-number">0</span>], minV = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>,right = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        <span class="hljs-keyword">while</span> (left &lt;= right &amp;&amp; right &lt; n)&#123;<br>            <span class="hljs-keyword">if</span> (nums[right] &gt; maxV) &#123;<br>                maxV = nums[right];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (nums[right] &lt; minV) &#123;<br>                minV = nums[right];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (maxV - minV &lt;= limit) &#123;<br>                res = Math.max(res, right-left+<span class="hljs-number">1</span>);<br>                right++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                left++;<br>                minV = <span class="hljs-number">1000000001</span>;<br>                maxV = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = left; i &lt;= right ; i++) &#123;<br>                    <span class="hljs-keyword">if</span> (nums[i] &gt; maxV) &#123;<br>                        maxV = nums[i];<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (nums[i] &lt; minV) &#123;<br>                        minV = nums[i];<br>                    &#125;<br>                &#125;<br>                res = Math.max(res, right-left+<span class="hljs-number">1</span>);<br>                right++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 07. 重建二叉树</title>
    <link href="/2022/01/19/leetcode/offer07/"/>
    <url>/2022/01/19/leetcode/offer07/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/">https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/</a></p><p>执行用时：1 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：38.7 MB, 在所有 Java 提交中击败了17.04% 的用户</p><p>前序遍历第一个值为根结点，在哈希表中存入中序遍历数组中的值和索引<br>分别对前序和中序的左子树递归，然后再对右子树递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    HashMap&lt;Integer, Integer&gt; indexMap;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = preorder.length<br>        indexMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            indexMap.put(inorder[i], i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> myBuildTree(preorder, inorder, <span class="hljs-number">0</span>, n-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> TreeNode <span class="hljs-title">myBuildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder, <span class="hljs-keyword">int</span> preorderLeft, <span class="hljs-keyword">int</span> preorderRight, <span class="hljs-keyword">int</span> inorderLeft, <span class="hljs-keyword">int</span> inorderRight)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (preorderLeft &gt; preorderRight) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> preorderRoot = preorderLeft;<br>        <span class="hljs-keyword">int</span> inorderRoot = indexMap.get(preorder[preorderLeft])<br>        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(preorder[preorderLeft]);<br>        <span class="hljs-keyword">int</span> sizeLeftSubTree = inorderRoot - inorderLeft;<br>        root.left = myBuildTree(preorder,inorder, preorderLeft+<span class="hljs-number">1</span>, preorderLeft+sizeLeftSubTree, inorderLeft, inorderRoot-<span class="hljs-number">1</span>);<br>        root.right = myBuildTree(preorder,inorder, preorderLeft+sizeLeftSubTree+<span class="hljs-number">1</span>, preorderRight, inorderRoot+<span class="hljs-number">1</span>, inorderRight);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1437. 是否所有 1 都至少相隔 k 个元素</title>
    <link href="/2022/01/17/leetcode/1437/"/>
    <url>/2022/01/17/leetcode/1437/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/check-if-all-1s-are-at-least-length-k-places-away/">https://leetcode-cn.com/problems/check-if-all-1s-are-at-least-length-k-places-away/</a></p><p>执行用时：1 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：48.3 MB, 在所有 Java 提交中击败了51.53% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">kLengthApart</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">// 设置初始间距</span><br>        <span class="hljs-keyword">int</span> distance = k;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (distance &lt; k) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    distance = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                distance++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>435. 无重叠区间</title>
    <link href="/2022/01/13/leetcode/435erase/"/>
    <url>/2022/01/13/leetcode/435erase/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">eraseOverlapIntervals</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">intervals</span>: [[<span class="hljs-type">Int</span>]])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> intervals.count <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> sortedArr <span class="hljs-operator">=</span> intervals.sorted &#123; <span class="hljs-variable">$0</span>[<span class="hljs-number">0</span>] <span class="hljs-operator">&lt;</span> <span class="hljs-variable">$1</span>[<span class="hljs-number">0</span>] &#125;<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> sortedArr.count<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            <span class="hljs-keyword">if</span> sortedArr[i<span class="hljs-operator">-</span><span class="hljs-number">1</span>][<span class="hljs-number">1</span>] <span class="hljs-operator">-</span> sortedArr[i][<span class="hljs-number">0</span>] <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>                res <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                sortedArr[i][<span class="hljs-number">1</span>] <span class="hljs-operator">=</span> <span class="hljs-built_in">min</span>(sortedArr[i<span class="hljs-operator">-</span><span class="hljs-number">1</span>][<span class="hljs-number">1</span>],sortedArr[i][<span class="hljs-number">1</span>])<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>121. 买卖股票的最佳时机</title>
    <link href="/2022/01/11/leetcode/121/"/>
    <url>/2022/01/11/leetcode/121/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/submissions/">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/submissions/</a></p><p>执行用时：1 ms, 在所有 Java 提交中击败了100.00%的用户<br>内存消耗：51.2 MB, 在所有 Java 提交中击败了79.45%的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] prices)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> minPrice = <span class="hljs-number">100001</span>, profit = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> length = prices.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>           <span class="hljs-keyword">if</span> (minPrice &gt; prices[i]) &#123;<br>               minPrice = prices[i];<br>           &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (prices[i] - minPrice &gt; profit) &#123;<br>               profit = prices[i] - minPrice;<br>           &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> profit;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxProfit</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">prices</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> profit <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-comment">//记录最大利润</span><br>        <span class="hljs-keyword">var</span> minValue: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> prices[<span class="hljs-number">0</span>] <span class="hljs-comment">//记录数组中访问过的最小值</span><br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> prices.count<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            minValue <span class="hljs-operator">=</span> <span class="hljs-built_in">min</span>(minValue, prices[i])<br>            profit <span class="hljs-operator">=</span> <span class="hljs-built_in">max</span>(prices[i] <span class="hljs-operator">-</span> minValue, profit)<br>        &#125;<br>        <span class="hljs-keyword">return</span> profit<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 两数之和</title>
    <link href="/2022/01/11/leetcode/1/"/>
    <url>/2022/01/11/leetcode/1/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/two-sum/">https://leetcode-cn.com/problems/two-sum/</a></p><p>最新提交看到别人的新理解：内循环的时候比较两次，分别是起点i和终点last上的值。</p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户<br>内存消耗：38.7 MB, 在所有 Java 提交中击败了27.42%的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span> len = nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i &lt; len / <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> last = len - i - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; len; j++) &#123;<br>                <span class="hljs-keyword">if</span>(nums[i]+nums[j] == target) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;i, j&#125;;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[j] + nums[last] == target) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;j, last&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 06. 从尾到头打印链表</title>
    <link href="/2022/01/10/leetcode/offer06/"/>
    <url>/2022/01/10/leetcode/offer06/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/</a></p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户<br>内存消耗：38.8 MB, 在所有 Java 提交中击败了78.66%的用户</p><p>在数组中倒序存放元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] reversePrint(ListNode head) &#123;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        ListNode p = head;<br>        <span class="hljs-keyword">while</span> (p != <span class="hljs-keyword">null</span>) &#123;<br>            count++;<br>            p = p.next;<br>        &#125;<br>        <span class="hljs-keyword">int</span> arr[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[count];<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>            arr[--count] = head.val;<br>            head = head.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] reversePrint(ListNode head) &#123;<br>        Stack stack = <span class="hljs-keyword">new</span> Stack();<br>        <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (head != <span class="hljs-keyword">null</span>) &#123;<br>            stack.push(head.val);<br>            head = head.next;<br>            size++;<br>        &#125;<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            arr[i] = (<span class="hljs-keyword">int</span>) stack.pop();<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1576. 替换所有的问号</title>
    <link href="/2022/01/06/leetcode/1576/"/>
    <url>/2022/01/06/leetcode/1576/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters">https://leetcode-cn.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters</a></p><p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.3 MB, 在所有 Swift 提交中击败了100.00%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">modifyString</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> <span class="hljs-type">Array</span>(s)<br>        <span class="hljs-keyword">let</span> len <span class="hljs-operator">=</span> arr.count<br>        <span class="hljs-keyword">var</span> ch:<span class="hljs-type">Character</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> len &#123;<br>            <span class="hljs-keyword">if</span> arr[i] <span class="hljs-operator">==</span> <span class="hljs-string">&quot;?&quot;</span> &#123;<br>                <span class="hljs-keyword">let</span> aValue <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>((<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">UnicodeScalar</span>).value)<br>                <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>                <span class="hljs-comment">// 与两边字符比较是否相等</span><br>                <span class="hljs-keyword">while</span> (i <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> arr[i<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">==</span> ch) <span class="hljs-operator">||</span><br>                        (i <span class="hljs-operator">&lt;</span> len<span class="hljs-operator">-</span><span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> arr[i<span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-operator">==</span> ch) &#123;<br>                            <span class="hljs-comment">// ascii码转换</span><br>                    ch <span class="hljs-operator">=</span> <span class="hljs-type">Character</span>(<span class="hljs-type">UnicodeScalar</span>(count <span class="hljs-operator">+</span> aValue)<span class="hljs-operator">!</span>)<br>                    count <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                &#125;<br>                arr[i] <span class="hljs-operator">=</span> ch<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">String</span>(arr)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>java代码，来自题解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">modifyString</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] ss = s.toCharArray();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (ss[i] == <span class="hljs-string">&#x27;?&#x27;</span>) &#123;<br>                <span class="hljs-keyword">char</span> a = <span class="hljs-string">&#x27;a&#x27;</span>;<br>                <span class="hljs-keyword">while</span>((i&gt;<span class="hljs-number">0</span> &amp;&amp; a == ss[i-<span class="hljs-number">1</span>]) || (i &lt; ss.length-<span class="hljs-number">1</span> &amp;&amp; ss[i+<span class="hljs-number">1</span>] == a)) &#123;<br>                    a++;<br>                &#125;<br>                ss[i] = a;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(ss);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>414. 第三大的数</title>
    <link href="/2022/01/04/leetcode/414/"/>
    <url>/2022/01/04/leetcode/414/</url>
    
    <content type="html"><![CDATA[<p>执行用时：28 ms, 在所有 Swift 提交中击败了86.11%的用户<br>内存消耗：14.1 MB, 在所有 Swift 提交中击败了13.89%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">thirdMax</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> sortnum <span class="hljs-operator">=</span> nums.sorted(by: &#123;<span class="hljs-variable">$0</span> <span class="hljs-operator">&gt;</span> <span class="hljs-variable">$1</span>&#125;)<br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> sortnum.count<br>        <span class="hljs-keyword">var</span> diff <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            <span class="hljs-keyword">if</span> sortnum[i] <span class="hljs-operator">!=</span> sortnum[i<span class="hljs-operator">-</span><span class="hljs-number">1</span>] &#123;<br>                diff <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> diff <span class="hljs-operator">==</span> <span class="hljs-number">3</span> &#123;<br>                <span class="hljs-keyword">return</span> sortnum[i]<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sortnum[<span class="hljs-number">0</span>]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>set去重+排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">thirdMax</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        HashSet&lt;Integer&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>            set.add(num);<br>        &#125;<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(set);<br>        Collections.sort(list);<br>        <span class="hljs-keyword">return</span> list.size() &lt; <span class="hljs-number">3</span> ? list.get(list.size() - <span class="hljs-number">1</span>) : list.get(list.size()-<span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">thirdMax</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">int</span> diff = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> last = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = last; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] != nums[i-<span class="hljs-number">1</span>]) &#123;<br>                diff++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (diff == <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">return</span> nums[i-<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[last];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>703. 数据流中的第 K 大元素</title>
    <link href="/2022/01/03/leetcode/703dataStream/"/>
    <url>/2022/01/03/leetcode/703dataStream/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/">https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KthLargest</span> </span>&#123;<br>    PriorityQueue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;();<br>    <span class="hljs-keyword">int</span> point = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">KthLargest</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        point = k;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num: nums) &#123;<br>            add(num);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        queue.offer(val);<br>        <span class="hljs-keyword">if</span> (queue.size() &gt; point) &#123;<br>            queue.poll();<br>        &#125;<br>        <span class="hljs-keyword">return</span> queue.peek();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>优先队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nongfu Spring is a hit with tipplers and investors alike</title>
    <link href="/2021/12/24/English/economist1/"/>
    <url>/2021/12/24/English/economist1/</url>
    
    <content type="html"><![CDATA[<p>“We  are not manufacturers of water. We are porters of nature.” So goes a famous quip by Zhong Shanshan, the 66-year-old founder and boss of Nongfu Spring, China’s most popular brand of bottled water. On September 8th the Hangzhou-based bottler listed on HongKong’s bourse to spectacular fanfare. Demand for shares from retail investors outstripped supply by 1,148 times. The share price shot up 60% over the first three days of trading. Its market capitalisation reached $53bn. Mr Zhong, who still owns 84% of Nongfu Spring , is now China’s third-richest person, narrowly trailing two tech moguls: Jack Ma of Alibaba and (unrelated) Pony Ma of Tencent.</p><ul><li>quip 俏皮话，骚话</li><li>bottled water 瓶装水</li><li>被同位语1修饰的Zhong Shanshan：the 66-year-old founder and boss of Nongfu Spring.</li><li>被同位语2修饰的Nongfu Spring：China’s most popular brand of bottled water.</li><li>bourse 交易所</li><li>fanfare 喧闹；热议</li><li>outstrip 超过···</li><li>oversubscribe 超额认购</li><li>retail investor 散户 = small/individual investor</li><li>shoot up 迅速升高 = soar/skyrocket</li><li>trail 落后于···</li><li>mogul 大亨= tycoon/magnate</li></ul><p>Rising disposable incomes and public anxiety about the safety of tap  water, which is unfit to drink in most of China, have fuelled demand  among Chinese for the bottled variety. Consumption per person of bottled water rose from 41 litres in 2014 to 59 litresin 2019, according to data from Mintel, a market-research firm. American, by comparison , guzzled average of 141 litres last  year. That suggests Chinese bottlers still have plenty of room for growth, not least because tap water in America is (typically ) potable .</p><ul><li>disposable income 可支配收入</li><li>tap water 自来水</li><li>fuel 刺激；增强</li><li>variety 变种；品种</li><li>guzzle 狂饮；吃油 gas-guzzling 油老虎</li><li>plenty of room for growth/improvement… 有大量增长/提升空间</li><li>not least 尤其</li><li>potable 可饮用的， edible 可食用的</li></ul><p>Nongfu Spring is the runaway industry leader. It accounted for 29% of the volume sold in China in 2019. Foreign brands such as FIJI Water, Evian(owned by Danone) and Aquafina(part of PepsiCo) are easily spotted in many Chinese supermarkets. but none has a market share greater than 6.5%, reckons Mintel.</p><ul><li>account for… 占比…</li><li>make up for…</li><li>amount to…</li></ul><p>One reason for Nongfu’s success is its effort to cater to all market segments. Stingy folk can buy a mass-market 380ml-plastic bottle for as little as 1.5 yuan($0.22). The well-heeled may opt for the glass-bottled version, which comes with “award-winning” designs and retails for 30-45 yuan. In between you can get a lithium-rich liquid which is claimed to benefit the nervous system. Total revenues across Nongfu’s waters increased by 42% between 2017 and 2019, to 14.3bn yuan. Gross margins held steady at an impressive 60%.</p><ul><li>cater to 迎合需求</li><li>catering 承办酒席</li><li>cater industry 餐饮业</li><li>market segment 细分市场</li><li>mass market 面向大众的市场</li><li>mass entertainment 大众娱乐</li><li>well-heeled 富裕的</li><li>opt for 选择</li><li>opt in 选择加入, opt out 选择退出</li><li>retail at/for 以···价格零售</li><li>表示【选择/买】：buy，opt for，get</li><li>描述【瓶装水】：plastic bottle， glass-bottled version， lithium-rich liquid</li><li>关于【售价】：as little as，retail for</li><li>revenue 营业额</li><li>gross margin 毛利； net margin 纯利</li></ul><p>Nongfu sceptics point out that the bottled-water industry, in China and elsewhere, has few technical barriers to entry. The main raw material is polyethylene terephthalate (PTE), a plastic that is cheap and easy to process. No special knowledge is required. Evergrande, a Chinese property developer, boasts its own line of bottled water called Evergrande Spring. The water itself tends to be an afterthought.</p><ul><li>boast 拥有（自豪得拥有）</li><li>afterthought 事后的想法</li></ul><p>Not in Nongfu’s case. As its aggressive marketers never tier of stressing, it possesses water-extraction permits for ten of China’s most famous unspoilt bodies of water — from Thousand Island Lake in the eastern province of Zhejiang to Mount Tianshan in the remote western region of Xinjiang. The permits, granted by local governments for up to 30 years, are a moat against competitors. Loris Li, an independent analyst of China’s beverage industry, observers that “the quality of the original water source” can be a strong point of brand differentiation.</p><ul><li>marketer 营销人员； marketing 市场营销</li><li>never tier of doing sth… 不厌其烦地做</li><li>permit 许可证</li><li>unspoilt 天然的；pristine</li><li>moat 护城河</li><li>observe 评论</li></ul><p>Nongfu Spring has another edge: it is seen as close to Chinese officialdom. At high-level political summits, rows of Nongfu bottles arranged on tables are a common sight. As sources of advantage go, it doesn’t get better than this in China.</p><ul><li>edge 优势</li><li>officialdom 官场；kingdom 王国； queendom女王国</li><li>high-level 高规格的；high-profile</li><li>as..go 与一般的…相比</li><li>As racing cars go, this one is extraordinary. 和一般的赛车比，这辆非同凡响</li></ul>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 27. 二叉树的镜像</title>
    <link href="/2021/11/20/leetcode/offer27/"/>
    <url>/2021/11/20/leetcode/offer27/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/">https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mirrorTree</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">root</span>: <span class="hljs-type">TreeNode</span>?)</span> -&gt; <span class="hljs-type">TreeNode</span>? &#123;<br>        <span class="hljs-keyword">if</span> root <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> root<br>        &#125;<br>        <span class="hljs-keyword">var</span> temp <span class="hljs-operator">=</span> root<span class="hljs-operator">?</span>.left<br>        root<span class="hljs-operator">?</span>.left <span class="hljs-operator">=</span> root<span class="hljs-operator">?</span>.right<br>        root<span class="hljs-operator">?</span>.right <span class="hljs-operator">=</span> temp<br>        mirrorTree(root<span class="hljs-operator">?</span>.left)<br>        mirrorTree(root<span class="hljs-operator">?</span>.right)<br>        <span class="hljs-keyword">return</span> root<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Kotlin:<br>执行用时：132 ms, 在所有 Kotlin 提交中击败了94.87% 的用户<br>内存消耗：32.9 MB, 在所有 Kotlin 提交中击败了12.82% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    fun mirrorTree(root: <span class="hljs-type">TreeNode</span>?): <span class="hljs-type">TreeNode</span>? &#123;<br>        root <span class="hljs-operator">?</span>: <span class="hljs-keyword">return</span> null<br>        <span class="hljs-keyword">var</span> temp <span class="hljs-operator">=</span> root.left<br>        root.left <span class="hljs-operator">=</span> root.right<br>        root.right <span class="hljs-operator">=</span> temp<br>        mirrorTree(root.left)<br>        mirrorTree(root.right)<br>        <span class="hljs-keyword">return</span> root<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>二叉树</tag>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 32 - III. 从上到下打印二叉树 III</title>
    <link href="/2021/11/19/leetcode/offer32-3/"/>
    <url>/2021/11/19/leetcode/offer32-3/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/</a></p><p>执行用时：12 ms, 在所有 Swift 提交中击败了73.68% 的用户<br>内存消耗：13.5 MB, 在所有 Swift 提交中击败了94.74% 的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>奇数行逆序</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">levelOrder</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">root</span>: <span class="hljs-type">TreeNode</span>?)</span> -&gt; [[<span class="hljs-type">Int</span>]] &#123;<br>        <span class="hljs-keyword">if</span> root <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> []<br>        &#125;<br>        <span class="hljs-keyword">var</span> queue <span class="hljs-operator">=</span> [<span class="hljs-type">TreeNode</span>]()<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]]()<br>        <span class="hljs-keyword">var</span> isOdd <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        queue.append(root<span class="hljs-operator">!</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-operator">!</span>queue.isEmpty &#123;<br>            <span class="hljs-keyword">var</span> row <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> queue.count &#123;<br>                <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> queue.removeFirst()<br>                row.append(cur.val)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> node <span class="hljs-operator">=</span> cur.left &#123;<br>                    queue.append(node)<br>                &#125;<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> node <span class="hljs-operator">=</span> cur.right &#123;<br>                    queue.append(node)<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>isOdd &#123;<br>                row.reverse()<br>            &#125;<br>            res.append(row)<br>            isOdd <span class="hljs-operator">=</span> <span class="hljs-operator">!</span>isOdd<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Kotlin:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    fun levelOrder(root: <span class="hljs-type">TreeNode</span>?): <span class="hljs-type">List</span>&lt;<span class="hljs-type">List</span>&lt;<span class="hljs-type">Int</span>&gt;&gt; &#123;<br>        <span class="hljs-keyword">if</span> (root <span class="hljs-operator">==</span> null) &#123;<br>            <span class="hljs-keyword">return</span> emptyList()<br>        &#125;<br>        val queue <span class="hljs-operator">=</span> <span class="hljs-type">ArrayDeque</span>&lt;<span class="hljs-type">TreeNode</span>&gt;()<br>        val list <span class="hljs-operator">=</span> <span class="hljs-type">ArrayList</span>&lt;<span class="hljs-type">ArrayList</span>&lt;<span class="hljs-type">Int</span>&gt;&gt;()<br>        queue.add(root)<br>        <span class="hljs-keyword">while</span> (queue.isNotEmpty()) &#123;<br>            <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> <span class="hljs-type">ArrayDeque</span>&lt;<span class="hljs-type">Int</span>&gt;()<br>            <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> queue.size downTo <span class="hljs-number">1</span> step <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> queue.removeFirst()<br>                <span class="hljs-keyword">if</span> (list.size <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-operator">==</span> <span class="hljs-number">0</span>) &#123;<br>                    arr.addLast(cur.`val`)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    arr.addFirst(cur.`val`)<br>                &#125;<br>                cur.left<span class="hljs-operator">?</span>.let &#123;<br>                    queue.add(cur.left<span class="hljs-operator">!!</span>)<br>                &#125;<br>                cur.right<span class="hljs-operator">?</span>.let &#123;<br>                    queue.add(cur.right<span class="hljs-operator">!!</span>)<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> <span class="hljs-type">ArrayList</span>&lt;<span class="hljs-type">Int</span>&gt;(arr)<br>            list.add(res)<br>        &#125;<br>        <span class="hljs-keyword">return</span> list<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>二叉树</tag>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 53 - I. 在排序数组中查找数字 I</title>
    <link href="/2021/11/08/leetcode/offer53-1/"/>
    <url>/2021/11/08/leetcode/offer53-1/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/</a></p><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：41.4 MB, 在所有 Java 提交中击败了36.74% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>, count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-keyword">int</span> mid = left + (right-left)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>                start = mid;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>                right--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                left++;<br>            &#125;<br>        &#125;<br>        right = start;<br>        left = start-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (right &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span> (nums[right] == target) &#123;<br>                count++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            right++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (left &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (nums[left] == target) &#123;<br>                count++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            left--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>138. 复制带随机指针的链表</title>
    <link href="/2021/11/07/leetcode/138/"/>
    <url>/2021/11/07/leetcode/138/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/">https://leetcode-cn.com/problems/copy-list-with-random-pointer/</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copyRandomList</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">Node</span>?)</span> -&gt; <span class="hljs-type">Node</span>? &#123;<br>        <span class="hljs-keyword">var</span> dict <span class="hljs-operator">=</span> [<span class="hljs-type">Node</span>:<span class="hljs-type">Node</span>]()<br><br>        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copy</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">node</span>: <span class="hljs-type">Node</span>?)</span> -&gt; <span class="hljs-type">Node</span>? &#123;<br>            <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> node <span class="hljs-operator">=</span> node <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> dict[node] <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>                <span class="hljs-keyword">let</span> newHead <span class="hljs-operator">=</span> <span class="hljs-type">Node</span>(node.val)<br>                dict[node] <span class="hljs-operator">=</span> newHead<br>                newHead.next <span class="hljs-operator">=</span> copy(node.next)<br>                newHead.random <span class="hljs-operator">=</span> copy(node.random)<br>            &#125;<br>            <span class="hljs-keyword">return</span> dict[node]<br>        &#125;<br>        <span class="hljs-keyword">return</span> copy(head)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">copyRandomList</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        Node cur = head;<br>        HashMap&lt;Node, Node&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>            map.put(cur, <span class="hljs-keyword">new</span> Node(cur.val));<br>            cur = cur.next;<br>        &#125;<br>        cur = head;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>            map.get(cur).next = map.get(cur.next);<br>            map.get(cur).random = map.get(cur.random);<br>            cur = cur.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> map.get(head);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：176 ms, 在所有 Kotlin 提交中击败了100.00% 的用户<br>内存消耗：34.6 MB, 在所有 Kotlin 提交中击败了100.00% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    fun copyRandomList(node: <span class="hljs-type">Node</span>?): <span class="hljs-type">Node</span>? &#123;<br>        <span class="hljs-keyword">if</span> (node <span class="hljs-operator">==</span> null) &#123;<br>            <span class="hljs-keyword">return</span> null<br>        &#125;<br>        <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> node<br>        <span class="hljs-keyword">var</span> map <span class="hljs-operator">=</span> <span class="hljs-type">HashMap</span> <span class="hljs-operator">&lt;</span><span class="hljs-type">Node</span>?, <span class="hljs-type">Node</span>?<span class="hljs-operator">&gt;</span>()<br>        <span class="hljs-keyword">while</span> (cur <span class="hljs-operator">!=</span> null) &#123;<br>            map[cur] <span class="hljs-operator">=</span> <span class="hljs-type">Node</span>(cur.`val`)<br>            cur <span class="hljs-operator">=</span> cur.next<br>        &#125;<br>        cur <span class="hljs-operator">=</span> node<br>        <span class="hljs-keyword">while</span> (cur <span class="hljs-operator">!=</span> null) &#123;<br>            <span class="hljs-keyword">var</span> temp <span class="hljs-operator">=</span> map[cur]<span class="hljs-operator">!!</span><br>            temp.next <span class="hljs-operator">=</span> map[cur.next]<br>            temp.random <span class="hljs-operator">=</span> map[cur.random]<br>            cur <span class="hljs-operator">=</span> cur.next<br>        &#125;<br>        <span class="hljs-keyword">return</span> map[node]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Swift</tag>
      
      <tag>Kotlin</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 30. 包含min函数的栈</title>
    <link href="/2021/11/06/leetcode/offer30/"/>
    <url>/2021/11/06/leetcode/offer30/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/">https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/</a></p><p>执行用时：17 ms, 在所有 Java 提交中击败了93.54% 的用户<br>内存消耗：40.2 MB, 在所有 Java 提交中击败了59.44% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinStack</span> </span>&#123;<br>    Stack&lt;Integer&gt; s1,s2;<br>    <span class="hljs-comment">/** initialize your data structure here. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MinStack</span><span class="hljs-params">()</span> </span>&#123;<br>        s1 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        s2 = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        s1.push(x);<br>        <span class="hljs-keyword">if</span> (s2.isEmpty() || x &lt;= s2.lastElement()) &#123;<br>            s2.push(x);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (s1.pop().equals(s2.lastElement())) &#123;<br>            s2.pop();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> s1.peek();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> s2.peek();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinStack</span> </span>&#123;<br>    Deque&lt;Integer&gt; data;<br>    Deque&lt;Integer&gt; help ;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MinStack</span><span class="hljs-params">()</span> </span>&#123;<br>        data = <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;();<br>        help = <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        data.addLast(x);<br>        <span class="hljs-keyword">if</span> (help.isEmpty() || help.peekLast() &gt;= x) &#123;<br>            help.addLast(x);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            help.addLast(help.peekLast());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        help.pollLast();<br>        data.pollLast();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> data.peekLast();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> help.peekLast();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 09. 用两个栈实现队列</title>
    <link href="/2021/11/04/leetcode/offer09/"/>
    <url>/2021/11/04/leetcode/offer09/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/</a></p><p>执行用时：928 ms, 在所有 Swift 提交中击败了95.83% 的用户<br>内存消耗：15.9 MB, 在所有 Swift 提交中击败了95.08% 的用户</p><p>Swift:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CQueue</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> s1 <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>    <span class="hljs-keyword">var</span> s2 <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>    <span class="hljs-function"><span class="hljs-keyword">init</span>()</span> &#123; <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">appendTail</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">value</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        s1.append(value)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteHead</span>()</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> s2.isEmpty &#123;<br>            <span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> head <span class="hljs-operator">=</span> s1.popLast() &#123;<br>                s2.append(head)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s2.popLast() <span class="hljs-operator">??</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CQueue</span> </span>&#123;<br>    Deque&lt;Integer&gt; s1;<br>    Deque&lt;Integer&gt; s2;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        s1 = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>        s2 = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">appendTail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        s1.push(value);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteHead</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (s2.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (!s1.isEmpty()) &#123;<br>                s2.push(s1.pop());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s2.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s2.pop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>290. 单词规律</title>
    <link href="/2021/10/21/leetcode/290/"/>
    <url>/2021/10/21/leetcode/290/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/word-pattern/">https://leetcode-cn.com/problems/word-pattern/</a></p><p>执行用时：4 ms, 在所有 Swift 提交中击败了85.71%的用户<br>内存消耗：13.6 MB, 在所有 Swift 提交中击败了95.24%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">wordPattern</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">pattern</span>: <span class="hljs-type">String</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">var</span> strArr <span class="hljs-operator">=</span> s.split(separator: <span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">var</span> dict <span class="hljs-operator">=</span> [<span class="hljs-type">String</span>: <span class="hljs-type">Character</span>]()<br>        <span class="hljs-keyword">var</span> pat <span class="hljs-operator">=</span> <span class="hljs-type">Array</span>(pattern)<br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> strArr.count<br>        <span class="hljs-keyword">if</span> n <span class="hljs-operator">!=</span> pat.count &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> v <span class="hljs-operator">=</span> dict[<span class="hljs-type">String</span>(strArr[i])] &#123;<br>                <span class="hljs-keyword">if</span> v <span class="hljs-operator">==</span> pat[i] &#123;<br>                    <span class="hljs-keyword">continue</span><br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                dict[<span class="hljs-type">String</span>(strArr[i])] <span class="hljs-operator">=</span> pat[i]<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> <span class="hljs-type">Set</span>(dict.values).count <span class="hljs-operator">!=</span> dict.values.count &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5903. 简易银行系统</title>
    <link href="/2021/10/18/leetcode/5903/"/>
    <url>/2021/10/18/leetcode/5903/</url>
    
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bank</span> </span>&#123;<br><br>    <span class="hljs-keyword">var</span> bank:[<span class="hljs-type">Int</span>]<br>    <span class="hljs-keyword">let</span> length:<span class="hljs-type">Int</span><br>    <span class="hljs-function"><span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">balance</span>: [<span class="hljs-type">Int</span>])</span> &#123;<br>        bank <span class="hljs-operator">=</span> balance<br>        length <span class="hljs-operator">=</span> balance.count<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">transfer</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">account1</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">account2</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">money</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> account1 <span class="hljs-operator">&lt;=</span> length <span class="hljs-operator">&amp;&amp;</span> account2 <span class="hljs-operator">&lt;=</span> length <span class="hljs-operator">&amp;&amp;</span> bank[account1<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">&gt;=</span> money &#123;<br>            bank[account1<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">-=</span> money<br>            bank[account2<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">+=</span> money<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deposit</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">account</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">money</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> account <span class="hljs-operator">&lt;=</span> length &#123;<br>            bank[account<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">+=</span> money<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">withdraw</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">account</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">money</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> account <span class="hljs-operator">&lt;=</span> length <span class="hljs-operator">&amp;&amp;</span> bank[account<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">&gt;=</span> money &#123;<br>            bank[account<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">-=</span> money<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5902. 检查句子中的数字是否递增</title>
    <link href="/2021/10/18/leetcode/5902/"/>
    <url>/2021/10/18/leetcode/5902/</url>
    
    <content type="html"><![CDATA[<p>执行用时：4 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：14.1 MB, 在所有 Swift 提交中击败了100.00%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">areNumbersAscending</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">let</span> array <span class="hljs-operator">=</span> s.split(separator: <span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-keyword">var</span> last <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>.min<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> array &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> myInt <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(item) &#123;<br>                <span class="hljs-keyword">if</span> myInt <span class="hljs-operator">&gt;</span> last &#123;<br>                    last <span class="hljs-operator">=</span> myInt<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>409. 最长回文串</title>
    <link href="/2021/10/16/leetcode/409/"/>
    <url>/2021/10/16/leetcode/409/</url>
    
    <content type="html"><![CDATA[<p>执行用时：8 ms, 在所有 Swift 提交中击败了89.47%的用户<br>内存消耗：13.8 MB, 在所有 Swift 提交中击败了89.47%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">longestPalindrome</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> dict <span class="hljs-operator">=</span> [<span class="hljs-type">Character</span> : <span class="hljs-type">Int</span>]()<br>        <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s &#123;<br>            <span class="hljs-keyword">if</span> dict[char] <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>                dict[char]<span class="hljs-operator">!</span> <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dict[char] <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> dict.values &#123;<br>            count <span class="hljs-operator">+=</span> v <span class="hljs-operator">/</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> <span class="hljs-number">2</span><br>            <span class="hljs-comment">//当出现一次奇数个字符值时+1作为回文中心</span><br>            <span class="hljs-keyword">if</span> v <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-operator">==</span> <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> count <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                count <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>415. 字符串相加</title>
    <link href="/2021/10/16/leetcode/415/"/>
    <url>/2021/10/16/leetcode/415/</url>
    
    <content type="html"><![CDATA[<p>执行用时：8 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：14.1 MB, 在所有 Swift 提交中击败了53.17%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addStrings</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">num1</span>: <span class="hljs-type">String</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">num2</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">let</span> zero <span class="hljs-operator">=</span> <span class="hljs-type">String</span>.<span class="hljs-type">Element</span>(<span class="hljs-string">&quot;0&quot;</span>).asciiValue<span class="hljs-operator">!</span><br>        <span class="hljs-keyword">let</span> numA <span class="hljs-operator">=</span> <span class="hljs-type">Array</span>(num1)<br>        <span class="hljs-keyword">let</span> numB <span class="hljs-operator">=</span> <span class="hljs-type">Array</span>(num2)<br>        <span class="hljs-keyword">var</span> add <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">var</span> m <span class="hljs-operator">=</span> num1.count<span class="hljs-operator">-</span><span class="hljs-number">1</span>, n <span class="hljs-operator">=</span> num2.count<span class="hljs-operator">-</span><span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> m <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> <span class="hljs-operator">||</span> n <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> <span class="hljs-operator">||</span> add <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">var</span> x <span class="hljs-operator">=</span> m <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> <span class="hljs-operator">?</span> <span class="hljs-type">Int</span>(numA[m].asciiValue<span class="hljs-operator">!</span> <span class="hljs-operator">-</span> zero) : <span class="hljs-number">0</span><br>            <span class="hljs-keyword">var</span> y <span class="hljs-operator">=</span> n <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> <span class="hljs-operator">?</span> <span class="hljs-type">Int</span>(numB[n].asciiValue<span class="hljs-operator">!</span> <span class="hljs-operator">-</span> zero) : <span class="hljs-number">0</span><br>            <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> x <span class="hljs-operator">+</span> y <span class="hljs-operator">+</span> add<br>            res.append(<span class="hljs-type">String</span>(cur <span class="hljs-operator">%</span> <span class="hljs-number">10</span>))<br>            add <span class="hljs-operator">=</span> cur <span class="hljs-operator">/</span> <span class="hljs-number">10</span><br>            m <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            n <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(res.reversed())<br>        <span class="hljs-keyword">return</span> result<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>238. 除自身以外数组的乘积</title>
    <link href="/2021/10/10/leetcode/238/"/>
    <url>/2021/10/10/leetcode/238/</url>
    
    <content type="html"><![CDATA[<p>执行用时：160 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：19.2 MB, 在所有 Swift 提交中击败了100.00%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">productExceptSelf</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; [<span class="hljs-type">Int</span>] &#123;<br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> nums.count<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>        <span class="hljs-keyword">var</span> <span class="hljs-type">L</span> <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-number">1</span>, count: n)<br>        <span class="hljs-keyword">var</span> <span class="hljs-type">R</span> <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-number">1</span>, count: n)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            <span class="hljs-type">L</span>[i] <span class="hljs-operator">=</span> <span class="hljs-type">L</span>[i<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">*</span> nums[i<span class="hljs-operator">-</span><span class="hljs-number">1</span>]<br>        &#125;<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n<span class="hljs-operator">-</span><span class="hljs-number">1</span>).reversed() &#123;<br>            <span class="hljs-type">R</span>[j] <span class="hljs-operator">=</span> <span class="hljs-type">R</span>[j<span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-operator">*</span> nums[j<span class="hljs-operator">+</span><span class="hljs-number">1</span>]<br>        &#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            res.append(<span class="hljs-type">L</span>[i] <span class="hljs-operator">*</span> <span class="hljs-type">R</span>[i])<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] productExceptSelf(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        <span class="hljs-keyword">int</span>[] L = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-keyword">int</span>[] R = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        L[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            L[i] = L[i-<span class="hljs-number">1</span>] * nums[i-<span class="hljs-number">1</span>];<br>        &#125;<br>        R[n-<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n-<span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            R[i] = R[i+<span class="hljs-number">1</span>] * nums[i+<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            res[i] = L[i] * R[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>48. 旋转图像</title>
    <link href="/2021/10/10/leetcode/48/"/>
    <url>/2021/10/10/leetcode/48/</url>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="https://leetcode-cn.com/problems/rotate-image/">https://leetcode-cn.com/problems/rotate-image/</a></p><p>执行用时：4 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.7 MB, 在所有 Swift 提交中击败了32.10%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rotate</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">matrix</span>: <span class="hljs-keyword">inout</span> [[<span class="hljs-type">Int</span>]])</span> &#123;<br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> matrix.count<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            matrix[i].reverse()<br>        &#125;<br>        <span class="hljs-keyword">var</span> left <span class="hljs-operator">=</span>  <span class="hljs-number">1</span>, bottom <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">stride</span>(from: n<span class="hljs-operator">-</span><span class="hljs-number">1</span>, to: <span class="hljs-number">0</span>, by: <span class="hljs-operator">-</span><span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//向上一层</span><br>            bottom <span class="hljs-operator">=</span> i <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> left <span class="hljs-operator">..&lt;</span> n &#123;<br>                <span class="hljs-keyword">let</span> tmp <span class="hljs-operator">=</span> matrix[i][j]<br>                matrix[i][j] <span class="hljs-operator">=</span> matrix[bottom][left<span class="hljs-operator">-</span><span class="hljs-number">1</span>]<br>                matrix[bottom][left<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">=</span> tmp<br>                bottom <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;<br>            <span class="hljs-comment">//向右一列</span><br>            left <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>59. 螺旋矩阵 II</title>
    <link href="/2021/10/10/leetcode/59/"/>
    <url>/2021/10/10/leetcode/59/</url>
    
    <content type="html"><![CDATA[<p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00% 的用户<br>内存消耗：13.5 MB, 在所有 Swift 提交中击败了69.44% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">generateMatrix</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">n</span>: <span class="hljs-type">Int</span>)</span> -&gt; [[<span class="hljs-type">Int</span>]] &#123;<br>        <span class="hljs-keyword">var</span> matrix <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]].<span class="hljs-keyword">init</span>(repeating: [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-number">0</span>, count: n), count: n)<br>        <span class="hljs-keyword">var</span> left <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right <span class="hljs-operator">=</span> n <span class="hljs-operator">-</span> <span class="hljs-number">1</span>, top <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, bottom <span class="hljs-operator">=</span> n <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> num <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left <span class="hljs-operator">&lt;=</span> right <span class="hljs-operator">&amp;&amp;</span> top <span class="hljs-operator">&lt;=</span> bottom &#123;<br>            <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> left <span class="hljs-operator">...</span> right &#123;<br>                matrix[top][col] <span class="hljs-operator">=</span> num<br>                num <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (top <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">&lt;=</span> bottom) &#123;<br>                <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> (top<span class="hljs-operator">+</span><span class="hljs-number">1</span>) <span class="hljs-operator">...</span> bottom &#123;<br>                    matrix[row][right] <span class="hljs-operator">=</span> num<br>                    num <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                &#125;<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> left <span class="hljs-operator">&lt;</span> right <span class="hljs-operator">&amp;&amp;</span> top <span class="hljs-operator">&lt;</span> bottom &#123;<br>                <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">stride</span>(from: right<span class="hljs-operator">-</span><span class="hljs-number">1</span>, to: left, by: <span class="hljs-operator">-</span><span class="hljs-number">1</span>) &#123;<br>                    matrix[bottom][col] <span class="hljs-operator">=</span> num<br>                    num <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                &#125;<br>                <br>                <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">stride</span>(from: bottom, to: top, by: <span class="hljs-operator">-</span><span class="hljs-number">1</span>) &#123;<br>                    matrix[row][left] <span class="hljs-operator">=</span> num<br>                    num <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                &#125;<br>            &#125;<br>            left <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            right <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            top <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            bottom <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> matrix<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15. 三数之和</title>
    <link href="/2021/10/10/leetcode/15/"/>
    <url>/2021/10/10/leetcode/15/</url>
    
    <content type="html"><![CDATA[<p>单纯三层遍历会超时卡在最后三个测试用例，参考题解解法。</p><p>执行用时：116 ms, 在所有 Swift 提交中击败了99.44%的用户<br>内存消耗：17.1 MB, 在所有 Swift 提交中击败了100.00%的用户</p><p>题目链接：<a href="https://leetcode-cn.com/problems/3sum/">https://leetcode-cn.com/problems/3sum/</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">threeSum</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; [[<span class="hljs-type">Int</span>]] &#123;<br>        <span class="hljs-keyword">var</span> sortnums <span class="hljs-operator">=</span> nums.sorted()<br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> sortnums.count<br>        <span class="hljs-keyword">var</span> first <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, second <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, third <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]]()<br>        <span class="hljs-keyword">for</span> first <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            <span class="hljs-keyword">if</span> first <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> sortnums[first] <span class="hljs-operator">==</span> sortnums[first<span class="hljs-operator">-</span><span class="hljs-number">1</span>] &#123;<br>                <span class="hljs-keyword">continue</span><br>            &#125;<br>            third <span class="hljs-operator">=</span> n <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>            second <span class="hljs-operator">=</span> first <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> second <span class="hljs-keyword">in</span> second <span class="hljs-operator">..&lt;</span> n &#123;<br>                <span class="hljs-keyword">if</span> second <span class="hljs-operator">&gt;</span> first <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">&amp;&amp;</span> sortnums[second] <span class="hljs-operator">==</span> sortnums[second<span class="hljs-operator">-</span><span class="hljs-number">1</span>] &#123;<br>                    <span class="hljs-keyword">continue</span><br>                &#125;<br>                <span class="hljs-keyword">while</span> second <span class="hljs-operator">&lt;</span> third <span class="hljs-operator">&amp;&amp;</span> sortnums[first] <span class="hljs-operator">+</span> sortnums[second] <span class="hljs-operator">+</span> sortnums[third] <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>                    third <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>                &#125;<br>                <span class="hljs-comment">// 指针重合说明下一轮循环找不到更小的c使得a+b+c=0</span><br>                <span class="hljs-keyword">if</span> second <span class="hljs-operator">==</span> third &#123;<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>                <span class="hljs-keyword">if</span> sortnums[first] <span class="hljs-operator">+</span> sortnums[second] <span class="hljs-operator">+</span> sortnums[third] <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                    res.append([sortnums[first], sortnums[second], sortnums[third]])<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>119. 杨辉三角 II</title>
    <link href="/2021/10/08/leetcode/119/"/>
    <url>/2021/10/08/leetcode/119/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/pascals-triangle-ii/">https://leetcode-cn.com/problems/pascals-triangle-ii/</a></p><p>首先想到的是用二维数组保存记录</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getRow</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">rowIndex</span>: <span class="hljs-type">Int</span>)</span> -&gt; [<span class="hljs-type">Int</span>] &#123;<br>        <span class="hljs-keyword">if</span> rowIndex <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>]<br>        &#125;<br>        <span class="hljs-keyword">var</span> dp <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]]()<br>        <span class="hljs-keyword">var</span> row <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>        row.append(<span class="hljs-number">1</span>)<br>        dp.append(row)<br>        row <span class="hljs-operator">=</span> []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span> <span class="hljs-operator">...</span> rowIndex &#123;<br>            row.append(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> dp[i<span class="hljs-operator">-</span><span class="hljs-number">1</span>].count <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>                row.append(dp[i<span class="hljs-operator">-</span><span class="hljs-number">1</span>][j]<span class="hljs-operator">+</span>dp[i<span class="hljs-operator">-</span><span class="hljs-number">1</span>][j<span class="hljs-operator">+</span><span class="hljs-number">1</span>])<br>            &#125;<br>            row.append(<span class="hljs-number">1</span>)<br>            dp.append(row)<br>            row <span class="hljs-operator">=</span> []<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[rowIndex]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>O(rowIndex) 空间复杂度， 用两个一维数组</p><p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.3 MB, 在所有 Swift 提交中击败了98.36%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getRow</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">rowIndex</span>: <span class="hljs-type">Int</span>)</span> -&gt; [<span class="hljs-type">Int</span>] &#123;<br>        <span class="hljs-keyword">if</span> rowIndex <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>]<br>        &#125;<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>        <span class="hljs-keyword">var</span> row <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span> <span class="hljs-operator">...</span> rowIndex &#123;<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">...</span> i &#123;<br>                <span class="hljs-keyword">if</span> j <span class="hljs-operator">==</span> <span class="hljs-number">0</span> <span class="hljs-operator">||</span> j <span class="hljs-operator">==</span> i &#123;<br>                    row.append(<span class="hljs-number">1</span>)<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    row.append(res[j<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">+</span> res[j])<br>                &#125;<br>            &#125;<br>            res <span class="hljs-operator">=</span> row<br>            row <span class="hljs-operator">=</span> []<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>705. 设计哈希集合</title>
    <link href="/2021/10/03/leetcode/705/"/>
    <url>/2021/10/03/leetcode/705/</url>
    
    <content type="html"><![CDATA[<p>空间换时间</p><p>执行用时：292 ms, 在所有 Swift 提交中击败了95.24% 的用户<br>内存消耗：29.1 MB, 在所有 Swift 提交中击败了9.52% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHashSet</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-type">HashTable</span>: [<span class="hljs-type">Int</span>]<br>        <span class="hljs-keyword">let</span> p <span class="hljs-operator">=</span> <span class="hljs-number">1000003</span><br>        <span class="hljs-function"><span class="hljs-keyword">init</span>()</span> &#123;<br>            <span class="hljs-type">HashTable</span> <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-number">1000003</span>, count: <span class="hljs-number">1000003</span>)<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">key</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-type">HashTable</span>[key] <span class="hljs-operator">==</span> p &#123;<br>                <span class="hljs-type">HashTable</span>[key] <span class="hljs-operator">=</span> key<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">remove</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">key</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-type">HashTable</span>[key] <span class="hljs-operator">==</span> key &#123;<br>                <span class="hljs-type">HashTable</span>[key] <span class="hljs-operator">=</span> p<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">contains</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">key</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-type">HashTable</span>[key] <span class="hljs-operator">==</span> key &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>155. 最小栈</title>
    <link href="/2021/10/03/leetcode/155/"/>
    <url>/2021/10/03/leetcode/155/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/min-stack/">https://leetcode-cn.com/problems/min-stack/</a></p><p>执行用时：72 ms, 在所有 Swift 提交中击败了88.82% 的用户<br>内存消耗：14.9 MB, 在所有 Swift 提交中击败了60.25% 的用户</p><p>一个栈实现</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinStack</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> stack <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>    <span class="hljs-keyword">var</span> point: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">var</span> minNum: <span class="hljs-type">Int</span><br>    <span class="hljs-function"><span class="hljs-keyword">init</span>()</span> &#123;<br>        stack <span class="hljs-operator">=</span> []<br>        point <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>        minNum <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>.max<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">push</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        point <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        stack.append(val)<br>        <span class="hljs-keyword">if</span> val <span class="hljs-operator">&lt;=</span> minNum &#123;<br>            minNum <span class="hljs-operator">=</span> val<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pop</span>()</span> &#123;<br>        <span class="hljs-keyword">if</span> point <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">let</span> num <span class="hljs-operator">=</span> stack.removeLast()<br>            point <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> num <span class="hljs-operator">==</span> minNum &#123;<br>                minNum <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>.max<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">stride</span>(from: point, through: <span class="hljs-number">0</span>, by: <span class="hljs-operator">-</span><span class="hljs-number">1</span>) &#123;<br>                    minNum <span class="hljs-operator">=</span> <span class="hljs-built_in">min</span>(stack[i], minNum)<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">top</span>()</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> point <span class="hljs-operator">&gt;</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> stack[point]<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getMin</span>()</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> point <span class="hljs-operator">&gt;</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> minNum<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行用时：76 ms, 在所有 Swift 提交中击败了57.14% 的用户<br>内存消耗：15 MB, 在所有 Swift 提交中击败了41.62% 的用户</p><p>两个栈，参考题解</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinStack</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> data <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>    <span class="hljs-keyword">var</span> help <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>    <span class="hljs-function"><span class="hljs-keyword">init</span>()</span> &#123;<br>        data <span class="hljs-operator">=</span> []<br>        help <span class="hljs-operator">=</span> []<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">push</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        data.append(val)<br>        <span class="hljs-keyword">var</span> tail <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span>  help.last <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            tail <span class="hljs-operator">=</span> help.last<span class="hljs-operator">!</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> help.isEmpty <span class="hljs-operator">||</span> tail <span class="hljs-operator">&gt;=</span> val &#123;<br>            help.append(val)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            help.append(tail)<br>        &#125;<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pop</span>()</span> &#123;<br>        data.removeLast()<br>        help.removeLast()<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">top</span>()</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> lastone <span class="hljs-operator">=</span> data.last &#123;<br>            <span class="hljs-keyword">return</span> lastone<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getMin</span>()</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> minNum <span class="hljs-operator">=</span> help.last &#123;<br>            <span class="hljs-keyword">return</span> minNum<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题 03.01. 三合一</title>
    <link href="/2021/10/02/leetcode/lcci/"/>
    <url>/2021/10/02/leetcode/lcci/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/three-in-one-lcci/">https://leetcode-cn.com/problems/three-in-one-lcci/</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>每个stackNum前后增加一个位置来判断是空还是满。<br>    //[-1 0 -1] [-1 1 -1] [-1 2 -1]<br>    //0          3          6<br>    //[-1 0 1 -1]  [-1 2 3 -1] [-1 4 5 -1]<br>    //0              4           8<br>    //[-1 0 1 2 -3] [-1 3 4 5 -1] [-1 6 7 8 -1]<br>    //0               5           10</p><p>应该是没什么人用swift提交。。<br>执行用时：216 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：15.9 MB, 在所有 Swift 提交中击败了100.00%的用户</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TripleInOne</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> arr: [<span class="hljs-type">Int</span>]<br>    <span class="hljs-keyword">var</span> x: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">var</span> y: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">var</span> z: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">let</span> width:<span class="hljs-type">Int</span><br>    <span class="hljs-function"><span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">stackSize</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        width <span class="hljs-operator">=</span> (stackSize<span class="hljs-operator">+</span><span class="hljs-number">2</span>)<br>        arr <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-operator">-</span><span class="hljs-number">1</span>, count: width<span class="hljs-operator">*</span><span class="hljs-number">3</span>)<br>        x <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        y <span class="hljs-operator">=</span> width<br>        z <span class="hljs-operator">=</span> width<span class="hljs-operator">*</span><span class="hljs-number">2</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">push</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">stackNum</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">value</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> stackNum <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">if</span> x <span class="hljs-operator">&lt;</span> width <span class="hljs-operator">-</span> <span class="hljs-number">2</span> &#123;<br>                x <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                arr[x] <span class="hljs-operator">=</span> value<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> stackNum <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">if</span> y <span class="hljs-operator">&lt;</span> width<span class="hljs-operator">*</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span> <span class="hljs-number">2</span> &#123;<br>                y <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                arr[y] <span class="hljs-operator">=</span> value<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> z <span class="hljs-operator">&lt;</span> width<span class="hljs-operator">*</span><span class="hljs-number">3</span> <span class="hljs-operator">-</span> <span class="hljs-number">2</span> &#123;<br>                z <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                arr[z] <span class="hljs-operator">=</span> value<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pop</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">stackNum</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> stackNum <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">if</span> x <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                res <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                res <span class="hljs-operator">=</span> arr[x]<br>                arr[x] <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>                x <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> stackNum <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">if</span> y <span class="hljs-operator">==</span> width &#123;<br>                res <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                res <span class="hljs-operator">=</span> arr[y]<br>                arr[y] <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>                y <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> z <span class="hljs-operator">==</span> width<span class="hljs-operator">*</span><span class="hljs-number">2</span> &#123;<br>                res <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                res <span class="hljs-operator">=</span> arr[z]<br>                arr[z] <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>                z <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">peek</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">stackNum</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> stackNum <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> arr[x]<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> stackNum <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> arr[y]<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> arr[z]<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isEmpty</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">stackNum</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> stackNum <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">if</span> x <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> stackNum <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">if</span> y <span class="hljs-operator">==</span> width &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> z <span class="hljs-operator">==</span> width<span class="hljs-operator">*</span><span class="hljs-number">2</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>653. 两数之和 IV - 输入 BST</title>
    <link href="/2021/10/02/leetcode/653/"/>
    <url>/2021/10/02/leetcode/653/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/">https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/</a></p><p>执行用时：136 ms, 在所有 Swift 提交中击败了81.48% 的用户<br>内存消耗：15.8 MB, 在所有 Swift 提交中击败了29.63% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findTarget</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">root</span>: <span class="hljs-type">TreeNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">k</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">var</span> nums <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inOrder</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">root</span>: <span class="hljs-type">TreeNode</span>?)</span> &#123;<br>            <span class="hljs-keyword">if</span> root <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            inOrder(root<span class="hljs-operator">?</span>.left)<br>            nums.append(root<span class="hljs-operator">!</span>.val)<br>            inOrder(root<span class="hljs-operator">?</span>.right)<br>        &#125;<br>        inOrder(root)<br>        <span class="hljs-keyword">var</span> l <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r <span class="hljs-operator">=</span> nums.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span>, sum <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> l <span class="hljs-operator">&lt;</span> r &#123;<br>            sum <span class="hljs-operator">=</span> nums[l] <span class="hljs-operator">+</span> nums[r]<br>            <span class="hljs-keyword">if</span> sum <span class="hljs-operator">==</span> k &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> sum <span class="hljs-operator">&gt;</span> k &#123;<br>                r <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                l <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>二叉搜索树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>56. 合并区间</title>
    <link href="/2021/10/02/leetcode/56/"/>
    <url>/2021/10/02/leetcode/56/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/merge-intervals/">https://leetcode-cn.com/problems/merge-intervals/</a></p><p>执行用时：68 ms, 在所有 Swift 提交中击败了98.28%的用户<br>内存消耗：14.4 MB, 在所有 Swift 提交中击败了97.41%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">merge</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">intervals</span>: [[<span class="hljs-type">Int</span>]])</span> -&gt; [[<span class="hljs-type">Int</span>]] &#123;<br>        <span class="hljs-keyword">if</span> intervals.count <span class="hljs-operator">&lt;</span> <span class="hljs-number">2</span> &#123; <span class="hljs-keyword">return</span> intervals &#125;<br>        <span class="hljs-keyword">var</span> l <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">let</span> sortedArr <span class="hljs-operator">=</span> intervals.sorted &#123; <span class="hljs-variable">$0</span>[<span class="hljs-number">0</span>] <span class="hljs-operator">&lt;</span> <span class="hljs-variable">$1</span>[<span class="hljs-number">0</span>] &#125;<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]]()<br>        res.append(sortedArr[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> sortedArr &#123;<br>            <span class="hljs-keyword">if</span> res[j][<span class="hljs-number">1</span>] <span class="hljs-operator">&lt;</span> item[<span class="hljs-number">0</span>] &#123;<br>                res.append(item)<br>                j <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                res[j][<span class="hljs-number">1</span>] <span class="hljs-operator">=</span> <span class="hljs-built_in">max</span>(res[j][<span class="hljs-number">1</span>], item[<span class="hljs-number">1</span>])<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>225. 用队列实现栈</title>
    <link href="/2021/10/01/leetcode/225/"/>
    <url>/2021/10/01/leetcode/225/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">https://leetcode-cn.com/problems/implement-stack-using-queues/</a></p><p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：14 MB, 在所有 Swift 提交中击败了42.62%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs swift"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> inQueue <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>    <span class="hljs-keyword">var</span> outQueue <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>    <span class="hljs-function"><span class="hljs-keyword">init</span>()</span> &#123;<br>        inQueue <span class="hljs-operator">=</span> []<br>        outQueue <span class="hljs-operator">=</span> []<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">push</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">x</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        inQueue.append(x)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swap</span>()</span> &#123;<br>        <span class="hljs-keyword">var</span> temp <span class="hljs-operator">=</span> inQueue<br>        inQueue <span class="hljs-operator">=</span> outQueue<br>        outQueue <span class="hljs-operator">=</span> temp<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pop</span>()</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">while</span> inQueue.count <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> &#123;<br>            outQueue.append(inQueue.removeFirst())<br>        &#125;<br>        <span class="hljs-keyword">var</span> front <span class="hljs-operator">=</span> inQueue.removeFirst()<br>        <span class="hljs-built_in">swap</span>()<br>        <span class="hljs-keyword">return</span> front<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">top</span>()</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">while</span> inQueue.count <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> &#123;<br>            outQueue.append(inQueue.removeFirst())<br>        &#125;<br>        <span class="hljs-keyword">var</span> front <span class="hljs-operator">=</span> inQueue.first<br>        outQueue.append(inQueue.removeFirst())<br>        <span class="hljs-built_in">swap</span>()<br>        <span class="hljs-keyword">return</span> front<span class="hljs-operator">!</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">empty</span>()</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">return</span> inQueue.isEmpty <span class="hljs-operator">&amp;&amp;</span> outQueue.isEmpty<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>队列</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>232. 用栈实现队列</title>
    <link href="/2021/10/01/leetcode/232copy/"/>
    <url>/2021/10/01/leetcode/232copy/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">https://leetcode-cn.com/problems/implement-queue-using-stacks/</a></p><p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.7 MB, 在所有 Swift 提交中击败了92.41%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQueue</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> front <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">var</span> inStack <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>    <span class="hljs-keyword">var</span> outStack <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>    <span class="hljs-function"><span class="hljs-keyword">init</span>()</span> &#123;<br>        front <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        inStack <span class="hljs-operator">=</span> []<br>        outStack <span class="hljs-operator">=</span> []<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">push</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">x</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> inStack.isEmpty &#123;<br>            front <span class="hljs-operator">=</span> x<br>        &#125;<br>        inStack.append(x)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pop</span>()</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> outStack.isEmpty &#123;<br>            <span class="hljs-keyword">while</span> <span class="hljs-operator">!</span>inStack.isEmpty &#123;<br>                outStack.append(inStack.removeLast())<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> outStack.removeLast()<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">peek</span>()</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>outStack.isEmpty &#123;<br>            <span class="hljs-keyword">return</span> outStack.last<span class="hljs-operator">!</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> front<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">empty</span>()</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">return</span> inStack.isEmpty <span class="hljs-operator">&amp;&amp;</span> outStack.isEmpty<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>队列</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>701. 二叉搜索树中的插入操作</title>
    <link href="/2021/10/01/leetcode/701/"/>
    <url>/2021/10/01/leetcode/701/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/">https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/</a></p><p>执行用时：188 ms, 在所有 Swift 提交中击败了95.12%的用户<br>内存消耗：14.8 MB, 在所有 Swift 提交中击败了19.51%的用户</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">insertIntoBST</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">root</span>: <span class="hljs-type">TreeNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">TreeNode</span>? &#123;<br>        <span class="hljs-keyword">if</span> root <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-type">TreeNode</span>.<span class="hljs-keyword">init</span>(val)<br>        &#125;<br>        <span class="hljs-keyword">if</span> val <span class="hljs-operator">&gt;</span> root<span class="hljs-operator">!</span>.val &#123;<br>            root<span class="hljs-operator">?</span>.right <span class="hljs-operator">=</span> insertIntoBST(root<span class="hljs-operator">?</span>.right, val)<br>        &#125;<br>        <span class="hljs-keyword">if</span> val <span class="hljs-operator">&lt;</span> root<span class="hljs-operator">!</span>.val &#123;<br>            root<span class="hljs-operator">?</span>.left <span class="hljs-operator">=</span> insertIntoBST(root<span class="hljs-operator">?</span>.left, val)<br>        &#125;<br>        <span class="hljs-keyword">return</span> root<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>700. 二叉搜索树中的搜索</title>
    <link href="/2021/10/01/leetcode/700/"/>
    <url>/2021/10/01/leetcode/700/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/">https://leetcode-cn.com/problems/search-in-a-binary-search-tree/</a></p><p>执行用时：160 ms, 在所有 Swift 提交中击败了96.36%的用户<br>内存消耗：14.4 MB, 在所有 Swift 提交中击败了14.54%的用户</p><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">searchBST</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">root</span>: <span class="hljs-type">TreeNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">TreeNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> root <span class="hljs-operator">=</span> root<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> node <span class="hljs-operator">=</span> root&#123;<br>            <span class="hljs-keyword">if</span> node.val <span class="hljs-operator">&lt;</span> val &#123;<br>                root <span class="hljs-operator">=</span> node.right<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> node.val <span class="hljs-operator">&gt;</span> val &#123;<br>                root <span class="hljs-operator">=</span> node.left<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> node<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">searchBST</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">root</span>: <span class="hljs-type">TreeNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">TreeNode</span>? &#123;<br>        <span class="hljs-keyword">if</span> root <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> root<br>        &#125;<br>        <span class="hljs-keyword">if</span> root<span class="hljs-operator">?</span>.val <span class="hljs-operator">==</span> val &#123;<br>            <span class="hljs-keyword">return</span> root<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> root<span class="hljs-operator">!</span>.val <span class="hljs-operator">&gt;</span> val &#123;<br>            <span class="hljs-keyword">return</span> searchBST(root<span class="hljs-operator">?</span>.left, val)<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> searchBST(root<span class="hljs-operator">?</span>.right, val)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>101. 对称二叉树</title>
    <link href="/2021/10/01/leetcode/101/"/>
    <url>/2021/10/01/leetcode/101/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/symmetric-tree/">https://leetcode-cn.com/problems/symmetric-tree/</a></p><p>执行用时：12 ms, 在所有 Swift 提交中击败了80.58%的用户<br>内存消耗：13.3 MB, 在所有 Swift 提交中击败了98.35%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isSymmetric</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">root</span>: <span class="hljs-type">TreeNode</span>?)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br><br>        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">check</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">l</span>: <span class="hljs-type">TreeNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">r</span>: <span class="hljs-type">TreeNode</span>?)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>            <span class="hljs-keyword">if</span> l <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">&amp;&amp;</span> r <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> l <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> r <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> l<span class="hljs-operator">?</span>.val <span class="hljs-operator">==</span> r<span class="hljs-operator">?</span>.val <span class="hljs-operator">&amp;&amp;</span> check(l<span class="hljs-operator">?</span>.left, r<span class="hljs-operator">?</span>.right) <span class="hljs-operator">&amp;&amp;</span> check(l<span class="hljs-operator">?</span>.right, r<span class="hljs-operator">?</span>.left) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> check(root, root)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>二叉树</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>102. 二叉树的层序遍历</title>
    <link href="/2021/10/01/leetcode/102/"/>
    <url>/2021/10/01/leetcode/102/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</a></p><p>执行用时：12 ms, 在所有 Swift 提交中击败了75.55%的用户<br>内存消耗：13.7 MB, 在所有 Swift 提交中击败了87.96%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">levelOrder</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">root</span>: <span class="hljs-type">TreeNode</span>?)</span> -&gt; [[<span class="hljs-type">Int</span>]] &#123;<br>        <span class="hljs-keyword">if</span> root <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> []<br>        &#125;<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]]()<br>        <span class="hljs-keyword">var</span> queue <span class="hljs-operator">=</span> [<span class="hljs-type">TreeNode</span>]()<br>        queue.append(root<span class="hljs-operator">!</span>)<br>        <span class="hljs-keyword">while</span> <span class="hljs-operator">!</span>queue.isEmpty &#123;<br>            <span class="hljs-keyword">var</span> row <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> queue.count &#123;<br>                <span class="hljs-keyword">let</span> <span class="hljs-type">T</span> <span class="hljs-operator">=</span> queue.removeFirst()<br>                row.append(<span class="hljs-type">T</span>.val)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> node <span class="hljs-operator">=</span> <span class="hljs-type">T</span>.left &#123;<br>                    queue.append(node)<br>                &#125;<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> node <span class="hljs-operator">=</span> <span class="hljs-type">T</span>.right &#123;<br>                    queue.append(node)<br>                &#125;<br>            &#125;<br>            res.append(row)<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>二叉树</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>144. 二叉树的前序遍历</title>
    <link href="/2021/09/28/leetcode/144/"/>
    <url>/2021/09/28/leetcode/144/</url>
    
    <content type="html"><![CDATA[<p>如果先执行移动根节点指向右子树，再执行pop执行会慢4ms</p><p>题目链接：<a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/</a></p><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户<br>内存消耗：8.2 MB, 在所有 C++ 提交中击败了54.13% 的用户</p><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode *root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        stack&lt;TreeNode*&gt; S;<br>        <span class="hljs-keyword">while</span> (root || !S.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-keyword">while</span> (root)&#123;<br>                S.<span class="hljs-built_in">push</span>(root);<br>                res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>                root = root-&gt;left;<br>            &#125;<br>            root = S.<span class="hljs-built_in">top</span>();<br>            S.<span class="hljs-built_in">pop</span>();<br>            root = root -&gt;right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preorderTraversal</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">root</span>: <span class="hljs-type">TreeNode</span>?)</span> -&gt; [<span class="hljs-type">Int</span>] &#123;<br>        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> root <span class="hljs-operator">=</span> root <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> [] &#125;<br>        <br>        <span class="hljs-keyword">var</span> res: [<span class="hljs-type">Int</span>] <span class="hljs-operator">=</span> []<br>        <span class="hljs-keyword">var</span> stack: [<span class="hljs-type">TreeNode</span>] <span class="hljs-operator">=</span> [root]<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> node <span class="hljs-operator">=</span> stack.popLast() &#123;<br>            res.append(node.val)<br>            <span class="hljs-comment">//先存储右子树再存储左子树，出栈时即访问左子树</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> right <span class="hljs-operator">=</span> node.right &#123; stack.append(right) &#125;<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> left <span class="hljs-operator">=</span> node.left &#123; stack.append(left) &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户<br>内存消耗：8.1 MB, 在所有 C++ 提交中击败了70.94% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(TreeNode *root, vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;res)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>        <span class="hljs-built_in">preorder</span>(root-&gt;left,res);<br>        <span class="hljs-built_in">preorder</span>(root-&gt;right,res);<br>    &#125;<br>    <br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode *root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-built_in">preorder</span>(root,res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>swift 版</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> res: [<span class="hljs-type">Int</span>] <span class="hljs-operator">=</span> []<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">preorderTraversal</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">root</span>: <span class="hljs-type">TreeNode</span>?)</span> -&gt; [<span class="hljs-type">Int</span>] &#123;<br>        <span class="hljs-keyword">if</span> root <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> []<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            res.append(root<span class="hljs-operator">?</span>.val <span class="hljs-operator">??</span> <span class="hljs-operator">-</span><span class="hljs-number">101</span>)<br>            preorderTraversal(root<span class="hljs-operator">?</span>.left)<br>            preorderTraversal(root<span class="hljs-operator">?</span>.right)<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：36.8 MB, 在所有 Java 提交中击败了36.11% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(Main.TreeNode root, List&lt;Integer&gt; res)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        res.add(root.val );<br>        preorder(root.left,res);<br>        preorder(root.right,res);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(Main.TreeNode root)</span> </span>&#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        preorder(root,res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Swift</tag>
      
      <tag>二叉树</tag>
      
      <tag>递归</tag>
      
      <tag>C++</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>94. 二叉树的中序遍历</title>
    <link href="/2021/09/28/leetcode/94/"/>
    <url>/2021/09/28/leetcode/94/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</a></p><p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.6 MB, 在所有 Swift 提交中击败了44.81%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> res: [<span class="hljs-type">Int</span>] <span class="hljs-operator">=</span> []<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inorderTraversal</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">root</span>: <span class="hljs-type">TreeNode</span>?)</span> -&gt; [<span class="hljs-type">Int</span>] &#123;<br>        <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> node <span class="hljs-operator">=</span> root <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> []<br>        &#125;<br>        inorderTraversal(node.left)<br>        res.append(node.val)<br>        inorderTraversal(node.right)<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>二叉树</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20. 有效的括号</title>
    <link href="/2021/09/27/leetcode/20/"/>
    <url>/2021/09/27/leetcode/20/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/valid-parentheses/">https://leetcode-cn.com/problems/valid-parentheses/</a></p><h3 id="Cpp实现"><a href="#Cpp实现" class="headerlink" title="Cpp实现"></a>Cpp实现</h3><p>用栈存入的时候判断ascii码差值，决定是否pop前一个符号。<br>耗时0ms</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">length</span>()%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        stack&lt;<span class="hljs-keyword">char</span>&gt; st;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>            <span class="hljs-comment">//一开始为空，压入一个符号后，要比较的是下一个符号</span><br>            <span class="hljs-keyword">if</span> (st.<span class="hljs-built_in">empty</span>())&#123;<br>                st.<span class="hljs-built_in">push</span>(s[i]);<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">char</span> t = st.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-keyword">if</span> (s[i] - t == <span class="hljs-number">1</span> || s[i] - t == <span class="hljs-number">2</span>)&#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                st.<span class="hljs-built_in">push</span>(s[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> st.<span class="hljs-built_in">empty</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="swift实现1"><a href="#swift实现1" class="headerlink" title="swift实现1"></a>swift实现1</h3><p>执行用时：4 ms, 在所有 Swift 提交中击败了87.89%的用户<br>内存消耗：13.9 MB, 在所有 Swift 提交中击败了81.71%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">var</span> stack: [<span class="hljs-type">Character</span>] <span class="hljs-operator">=</span> []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s &#123;<br>            <span class="hljs-keyword">if</span> stack.isEmpty <span class="hljs-operator">||</span><br>                       i <span class="hljs-operator">==</span> <span class="hljs-string">&quot;(&quot;</span> <span class="hljs-operator">||</span><br>                       i <span class="hljs-operator">==</span> <span class="hljs-string">&quot;[&quot;</span> <span class="hljs-operator">||</span><br>                       i <span class="hljs-operator">==</span> <span class="hljs-string">&quot;&#123;&quot;</span>&#123;<br>                stack.append(i)<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">let</span> tmp <span class="hljs-operator">=</span> stack.last<br>                <span class="hljs-keyword">if</span> tmp <span class="hljs-operator">==</span> <span class="hljs-string">&quot;(&quot;</span> <span class="hljs-operator">&amp;&amp;</span> i <span class="hljs-operator">==</span> <span class="hljs-string">&quot;)&quot;</span> <span class="hljs-operator">||</span><br>                           tmp <span class="hljs-operator">==</span> <span class="hljs-string">&quot;[&quot;</span> <span class="hljs-operator">&amp;&amp;</span> i <span class="hljs-operator">==</span> <span class="hljs-string">&quot;]&quot;</span> <span class="hljs-operator">||</span><br>                           tmp <span class="hljs-operator">==</span> <span class="hljs-string">&quot;&#123;&quot;</span> <span class="hljs-operator">&amp;&amp;</span> i <span class="hljs-operator">==</span> <span class="hljs-string">&quot;&#125;&quot;</span><br>                &#123;<br>                    stack.removeLast()<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> stack.isEmpty &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="swift实现2"><a href="#swift实现2" class="headerlink" title="swift实现2"></a>swift实现2</h3><p>swift 用数组模拟栈，switch 和 if-else实现</p><p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：14 MB, 在所有 Swift 提交中击败了51.07%的用户</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValid</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> s.count <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> stack: [<span class="hljs-type">Character</span>] <span class="hljs-operator">=</span> []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s &#123;<br>            <span class="hljs-keyword">if</span> stack.isEmpty &#123;<br>                stack.append(i)<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">switch</span> i &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;&#123;&quot;</span>:<br>                    stack.append(i)<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;)&quot;</span>:<br>                    <span class="hljs-keyword">if</span> stack.last <span class="hljs-operator">==</span> <span class="hljs-string">&quot;(&quot;</span> &#123;<br>                        stack.removeLast()<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                    &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;]&quot;</span>:<br>                    <span class="hljs-keyword">if</span> stack.last <span class="hljs-operator">==</span> <span class="hljs-string">&quot;[&quot;</span> &#123;<br>                        stack.removeLast()<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                    &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;&#125;&quot;</span>:<br>                    <span class="hljs-keyword">if</span> stack.last <span class="hljs-operator">==</span> <span class="hljs-string">&quot;&#123;&quot;</span> &#123;<br>                        stack.removeLast()<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                    &#125;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> stack.isEmpty &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>“(])”<br>“)”<br>“)(){}”<br>“()”<br>“()[]{}”<br>“(]”<br>“([)]”<br>“{[]}”<br>“[“<br>“((“</p>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>C++</tag>
      
      <tag>Stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>83. 删除排序链表中的重复元素</title>
    <link href="/2021/09/27/leetcode/83/"/>
    <url>/2021/09/27/leetcode/83/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/</a></p><p>执行用时：20 ms, 在所有 Swift 提交中击败了99.44%的用户<br>内存消耗：13.5 MB, 在所有 Swift 提交中击败了75.28%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteDuplicates</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">if</span> head <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> head<span class="hljs-operator">?</span>.next <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span>&#123;<br>            <span class="hljs-keyword">return</span> head<br>        &#125;<br>        <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> cur<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-comment">//当前值与下一个节点值重复</span><br>            <span class="hljs-keyword">if</span> cur<span class="hljs-operator">?</span>.val <span class="hljs-operator">==</span> cur<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.val &#123;<br>                <span class="hljs-comment">//使得当前节点指向下下一个节点</span><br>                cur<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//不相等则移动当前指针</span><br>                cur <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>73. 矩阵置零</title>
    <link href="/2021/09/27/leetcode/73/"/>
    <url>/2021/09/27/leetcode/73/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/set-matrix-zeroes/">https://leetcode-cn.com/problems/set-matrix-zeroes/</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>先遍历找到矩阵中0的位置，放入一维数组。<br>遍历一维数组中变化的值，下标除以矩阵宽度即为所在行号。</p><p>执行用时：88 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：14.4 MB, 在所有 Swift 提交中击败了16.28%的用户</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setZeroes</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">matrix</span>: <span class="hljs-keyword">inout</span> [[<span class="hljs-type">Int</span>]])</span> &#123;<br>        <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">let</span> r <span class="hljs-operator">=</span> matrix.count, c <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].count<br>        <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-operator">-</span><span class="hljs-number">1</span>, count: r<span class="hljs-operator">*</span>c)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> r &#123;<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> c &#123;<br>                <span class="hljs-keyword">if</span> matrix[i][j] <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                    <span class="hljs-comment">//下标为序号，除以宽度即为行号</span><br>                    <span class="hljs-comment">//数组值为列号</span><br>                    arr[count] <span class="hljs-operator">=</span> count <span class="hljs-operator">%</span> c<br>                &#125;<br>                count <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> r<span class="hljs-operator">*</span>c &#123;<br>            <span class="hljs-keyword">if</span> arr[row] <span class="hljs-operator">!=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span> &#123;<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> c &#123;<br>                    matrix[row<span class="hljs-operator">/</span>c][i] <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>                &#125;<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> r &#123;<br>                    matrix[j][arr[row]] <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>36. 有效的数独</title>
    <link href="/2021/09/27/leetcode/36/"/>
    <url>/2021/09/27/leetcode/36/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/valid-sudoku/submissions/">https://leetcode-cn.com/problems/valid-sudoku/submissions/</a></p><p>参考高票题解讲解，很棒。3*3矩阵的序号通过计算存储,恰好能类似运用在73题。<br>swift版代码</p><p>执行用时：80 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.9 MB, 在所有 Swift 提交中击败了76.58%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isValidSudoku</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">board</span>: [[<span class="hljs-type">Character</span>]])</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">var</span> row <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]].<span class="hljs-keyword">init</span>(repeating:<br>        [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-number">0</span>, count: <span class="hljs-number">10</span>), count: <span class="hljs-number">9</span>)<br>        <span class="hljs-keyword">var</span> col <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]].<span class="hljs-keyword">init</span>(repeating:<br>        [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-number">0</span>, count: <span class="hljs-number">10</span>), count: <span class="hljs-number">9</span>)<br>        <span class="hljs-keyword">var</span> block <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]].<span class="hljs-keyword">init</span>(repeating:<br>        [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-number">0</span>, count: <span class="hljs-number">10</span>), count: <span class="hljs-number">9</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> <span class="hljs-number">9</span> &#123;<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> <span class="hljs-number">9</span> &#123;<br>                <span class="hljs-keyword">if</span> board[i][j] <span class="hljs-operator">==</span> <span class="hljs-string">&quot;.&quot;</span> &#123;<br>                    <span class="hljs-keyword">continue</span><br>                &#125;<br>                <span class="hljs-keyword">let</span> num <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(<span class="hljs-type">String</span>(board[i][j]))<span class="hljs-operator">!</span><br>                <span class="hljs-keyword">if</span> row[i][num] <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                &#125;<br>                <span class="hljs-keyword">if</span> col[j][num] <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                &#125;<br>                <span class="hljs-keyword">if</span> block[(i<span class="hljs-operator">/</span><span class="hljs-number">3</span>)<span class="hljs-operator">*</span><span class="hljs-number">3</span> <span class="hljs-operator">+</span> (j<span class="hljs-operator">/</span><span class="hljs-number">3</span>)][num] <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>                &#125;<br>                row[i][num] <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>                col[j][num] <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>                block[(i<span class="hljs-operator">/</span><span class="hljs-number">3</span>)<span class="hljs-operator">*</span><span class="hljs-number">3</span> <span class="hljs-operator">+</span> (j<span class="hljs-operator">/</span><span class="hljs-number">3</span>)][num] <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
      <tag>矩阵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>387. 字符串中的第一个唯一字符</title>
    <link href="/2021/09/26/leetcode/387/"/>
    <url>/2021/09/26/leetcode/387/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/first-unique-character-in-a-string/">https://leetcode-cn.com/problems/first-unique-character-in-a-string/</a></p><p>执行用时：100 ms, 在所有 Swift 提交中击败了90.08%的用户<br>内存消耗：13.9 MB, 在所有 Swift 提交中击败了90.08%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">firstUniqChar</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> table <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-number">0</span>, count: <span class="hljs-number">26</span>)<br>        <span class="hljs-keyword">let</span> chValue <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(<span class="hljs-string">&quot;a&quot;</span>.unicodeScalars.first<span class="hljs-operator">!</span>.value)<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s.unicodeScalars &#123;<br>            table[<span class="hljs-type">Int</span>(c.value) <span class="hljs-operator">-</span> chValue] <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s.unicodeScalars &#123;<br>            <span class="hljs-keyword">if</span> table[<span class="hljs-type">Int</span>(i.value) <span class="hljs-operator">-</span> chValue] <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>                <span class="hljs-keyword">return</span> res<br>            &#125;<br>            res <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>383. 赎金信</title>
    <link href="/2021/09/26/leetcode/383/"/>
    <url>/2021/09/26/leetcode/383/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/ransom-note/">https://leetcode-cn.com/problems/ransom-note/</a><br>执行用时：36 ms, 在所有 Swift 提交中击败了97.22%的用户<br>内存消耗：13.9 MB, 在所有 Swift 提交中击败了86.11%的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>和242一样的解法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">canConstruct</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">ransomNote</span>: <span class="hljs-type">String</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">magazine</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> ransomNote.count <span class="hljs-operator">&gt;</span> magazine.count &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> table <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-number">0</span>, count: <span class="hljs-number">26</span>)<br>        <span class="hljs-keyword">let</span> chValue <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(<span class="hljs-string">&quot;a&quot;</span>.unicodeScalars.first<span class="hljs-operator">!</span>.value)<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> magazine.unicodeScalars &#123;<br>            table[<span class="hljs-type">Int</span>(item.value) <span class="hljs-operator">-</span> chValue] <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ransomNote.unicodeScalars &#123;<br>            table[<span class="hljs-type">Int</span>(i.value) <span class="hljs-operator">-</span> chValue] <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">guard</span> table.first(where: &#123;<span class="hljs-variable">$0</span> <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span>&#125;) <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>566. 重塑矩阵</title>
    <link href="/2021/09/26/leetcode/556/"/>
    <url>/2021/09/26/leetcode/556/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reshape-the-matrix/">https://leetcode-cn.com/problems/reshape-the-matrix/</a></p><p>执行用时：76 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.6 MB, 在所有 Swift 提交中击败了97.37%的用户</p><p>1.每次内循环判断新的矩阵宽度是否符合要求</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">matrixReshape</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">mat</span>: [[<span class="hljs-type">Int</span>]], <span class="hljs-keyword">_</span> <span class="hljs-params">r</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">c</span>: <span class="hljs-type">Int</span>)</span> -&gt; [[<span class="hljs-type">Int</span>]] &#123;<br>        <span class="hljs-keyword">let</span> m <span class="hljs-operator">=</span> mat.count, n <span class="hljs-operator">=</span> mat[<span class="hljs-number">0</span>].count<br>        <span class="hljs-keyword">if</span> m<span class="hljs-operator">*</span>n <span class="hljs-operator">!=</span> r<span class="hljs-operator">*</span>c &#123;<br>            <span class="hljs-keyword">return</span> mat<br>        &#125;<br>        <span class="hljs-keyword">var</span> res : [[<span class="hljs-type">Int</span>]] <span class="hljs-operator">=</span> []<br>        <span class="hljs-keyword">var</span> current : [<span class="hljs-type">Int</span>] <span class="hljs-operator">=</span> []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> m &#123;<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>                current.append(mat[i][j])<br>                <span class="hljs-keyword">if</span> current.count <span class="hljs-operator">==</span> c &#123;<br>                    res.append(current)<br>                    current <span class="hljs-operator">=</span> []<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.取出全部再放回</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">matrixReshape</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">mat</span>: [[<span class="hljs-type">Int</span>]], <span class="hljs-keyword">_</span> <span class="hljs-params">r</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">c</span>: <span class="hljs-type">Int</span>)</span> -&gt; [[<span class="hljs-type">Int</span>]] &#123;<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]].<span class="hljs-keyword">init</span>(repeating: [], count: r)<br>        <span class="hljs-keyword">let</span> m <span class="hljs-operator">=</span> mat.count, n <span class="hljs-operator">=</span> mat[<span class="hljs-number">0</span>].count<br>        <span class="hljs-keyword">if</span> m<span class="hljs-operator">*</span>n <span class="hljs-operator">!=</span> r<span class="hljs-operator">*</span>c &#123;<br>            <span class="hljs-keyword">return</span> mat<br>        &#125;<br>        <span class="hljs-keyword">var</span> warehouse <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> m &#123;<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>                warehouse.append(mat[i][j])<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> index <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> r &#123;<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> c &#123;<br>                res[i].append(warehouse[index])<br>                index <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>88. 合并两个有序数组</title>
    <link href="/2021/09/21/leetcode/88/"/>
    <url>/2021/09/21/leetcode/88/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/merge-sorted-array/">https://leetcode-cn.com/problems/merge-sorted-array/</a></p><p>执行用时：8 ms, 在所有 Swift 提交中击败了82.93%的用户<br>内存消耗：13.8 MB, 在所有 Swift 提交中击败了24.52%的用户</p><p>从尾部开始比较大小，插入较大的数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">merge</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums1</span>: <span class="hljs-keyword">inout</span> [<span class="hljs-type">Int</span>], <span class="hljs-keyword">_</span> <span class="hljs-params">m</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">nums2</span>: [<span class="hljs-type">Int</span>], <span class="hljs-keyword">_</span> <span class="hljs-params">n</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        <span class="hljs-keyword">var</span> i <span class="hljs-operator">=</span> m <span class="hljs-operator">+</span> n <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> long <span class="hljs-operator">=</span> m <span class="hljs-operator">-</span> <span class="hljs-number">1</span>, short <span class="hljs-operator">=</span> n <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> short <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">while</span> long <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> nums1[long] <span class="hljs-operator">&gt;</span> nums2[short] &#123;<br>                nums1[i] <span class="hljs-operator">=</span> nums1[long]<br>                i <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>                long <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;<br>            nums1[i] <span class="hljs-operator">=</span> nums2[short]<br>            i <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            short <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>217. 存在重复元素</title>
    <link href="/2021/09/19/leetcode/217/"/>
    <url>/2021/09/19/leetcode/217/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/contains-duplicate/">https://leetcode-cn.com/problems/contains-duplicate/</a></p><p>执行用时：140 ms, 在所有 Swift 提交中击败了74.12%的用户<br>内存消耗：15.4 MB, 在所有 Swift 提交中击败了67.09%的用户</p><p>将数组排序后两两比较</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">containsDuplicate</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> nums.count<br>        <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> nums.sorted()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n<span class="hljs-operator">-</span><span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">if</span> arr[i] <span class="hljs-operator">==</span> arr[i<span class="hljs-operator">+</span><span class="hljs-number">1</span>] &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将数组转为set后比较长度是否一致</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">containsDuplicate</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">set</span> <span class="hljs-operator">=</span> <span class="hljs-type">Set</span>&lt;<span class="hljs-type">Int</span>&gt;(nums)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">set</span>.count <span class="hljs-operator">&lt;</span> nums.count<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>java， 加入set失败时则表明重复</p><p>执行用时：4 ms, 在所有 Java 提交中击败了77.44%的用户<br>内存消耗：51.4 MB, 在所有 Java 提交中击败了8.63%的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsDuplicate</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        HashSet&lt;Integer&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i:<br>             nums) &#123;<br>            <span class="hljs-keyword">if</span> (!set.add(i)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>61. 旋转链表</title>
    <link href="/2021/09/19/leetcode/61/"/>
    <url>/2021/09/19/leetcode/61/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/rotate-list/">https://leetcode-cn.com/problems/rotate-list/</a><br>解法一和链表倒数第k个节点一样。</p><p>执行用时：12 ms, 在所有 Swift 提交中击败了78.65%的用户<br>内存消耗：13.6 MB, 在所有 Swift 提交中击败了17.98%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rotateRight</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">k</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">if</span> head <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> head, fast <span class="hljs-operator">=</span> head, len <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> p <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> p <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            p <span class="hljs-operator">=</span> p<span class="hljs-operator">?</span>.next<br>            len <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">let</span> step <span class="hljs-operator">=</span> k <span class="hljs-operator">%</span> len<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> step &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<br>        &#125;<br>        <span class="hljs-keyword">while</span> fast<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            slow <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<br>        &#125;<br>        fast<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> head<br>        p <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>        slow<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-keyword">return</span> p<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解法二是将尾指针指向了头节点，形成了环。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     public var val: Int</span><br><span class="hljs-comment"> *     public var next: ListNode?</span><br><span class="hljs-comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span><br><span class="hljs-comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span><br><span class="hljs-comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">rotateRight</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">k</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">if</span> head <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> len <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> p <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> p<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            p <span class="hljs-operator">=</span> p<span class="hljs-operator">?</span>.next<br>            len <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">let</span> step <span class="hljs-operator">=</span> len <span class="hljs-operator">-</span> k <span class="hljs-operator">%</span> len<br>        p<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> newHead <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> step &#123;<br>            p <span class="hljs-operator">=</span> p<span class="hljs-operator">?</span>.next<br>            newHead <span class="hljs-operator">=</span> newHead<span class="hljs-operator">?</span>.next<br>        &#125;<br>        p<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-keyword">return</span> newHead<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>430. 扁平化多级双向链表</title>
    <link href="/2021/09/16/leetcode/430/"/>
    <url>/2021/09/16/leetcode/430/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/">https://leetcode-cn.com/problems/flatten-a-multilevel-doubly-linked-list/</a></p><p>把链表旋转过来看做一棵树，前序遍历<br>参考了通过的代码<br>//迭代深搜</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">flatten</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">Node</span>?)</span> -&gt; <span class="hljs-type">Node</span>? &#123;<br>        <span class="hljs-keyword">if</span> head <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> nodeStack <span class="hljs-operator">=</span> [<span class="hljs-type">Node</span>?]()<br>        <span class="hljs-keyword">let</span> root: <span class="hljs-type">Node</span>? <span class="hljs-operator">=</span> <span class="hljs-type">Node</span>.<span class="hljs-keyword">init</span>(<span class="hljs-operator">-</span><span class="hljs-number">1</span>)<br>        root<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> head<br>        nodeStack.append(head)<br>        <span class="hljs-keyword">var</span> prev <span class="hljs-operator">=</span> root, cur:<span class="hljs-type">Node</span>? <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-operator">!</span>nodeStack.isEmpty &#123;<br>            cur <span class="hljs-operator">=</span> nodeStack.removeLast()<br>            prev<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> cur<br>            cur<span class="hljs-operator">?</span>.prev <span class="hljs-operator">=</span> prev<br>            <span class="hljs-keyword">if</span> cur<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>                nodeStack.append(cur<span class="hljs-operator">?</span>.next)<br>            &#125;<br>            <span class="hljs-keyword">if</span> cur<span class="hljs-operator">?</span>.child <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>                nodeStack.append(cur<span class="hljs-operator">?</span>.child)<br>                cur<span class="hljs-operator">?</span>.child <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>            &#125;<br>            prev <span class="hljs-operator">=</span> cur<br>        &#125;<br>        root<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.prev <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-keyword">return</span> head<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>//递归调用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">flatten</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">Node</span>?)</span> -&gt; <span class="hljs-type">Node</span>? &#123;<br>        <span class="hljs-keyword">var</span> ptr <span class="hljs-operator">=</span> head ,nextPtr <span class="hljs-operator">=</span> head, <span class="hljs-type">Child</span> <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> ptr <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">if</span> ptr<span class="hljs-operator">?</span>.child <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>                <span class="hljs-comment">// 记住上一级链表的下一个位置</span><br>                nextPtr <span class="hljs-operator">=</span> ptr<span class="hljs-operator">?</span>.next<br>                <span class="hljs-comment">// 移动指针到子链表头部</span><br>                <span class="hljs-type">Child</span> <span class="hljs-operator">=</span> ptr<span class="hljs-operator">?</span>.child<br>                <span class="hljs-comment">// 子链表头初始化，设置前一个指针位置</span><br>                <span class="hljs-type">Child</span>?.prev <span class="hljs-operator">=</span> ptr<br>                <span class="hljs-comment">//位于上一级链表的ptr开始指向子链表头部</span><br>                ptr<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> <span class="hljs-type">Child</span><br>                <span class="hljs-comment">//递归扁平化链表</span><br>                <span class="hljs-type">Child</span> <span class="hljs-operator">=</span> flatten(<span class="hljs-type">Child</span>)<br>                <span class="hljs-comment">//遍历子链表</span><br>                <span class="hljs-keyword">while</span> <span class="hljs-type">Child</span>?.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>                    <span class="hljs-type">Child</span> <span class="hljs-operator">=</span> <span class="hljs-type">Child</span>?.next<br>                &#125;<br>                <span class="hljs-comment">//子链表走到末尾后指向上一级链表的下一处</span><br>                <span class="hljs-type">Child</span>?.next <span class="hljs-operator">=</span> nextPtr<br>                <span class="hljs-comment">//上一级链表的下一位置不为空</span><br>                <span class="hljs-comment">//则设置它的前一个指针为当前子链表的头节点</span><br>                <span class="hljs-keyword">if</span> nextPtr <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>                    nextPtr<span class="hljs-operator">?</span>.prev <span class="hljs-operator">=</span> <span class="hljs-type">Child</span><br>                &#125;<br>                <span class="hljs-comment">//此时位于上一级链表的ptr它的左侧单链表已访问</span><br>                ptr<span class="hljs-operator">?</span>.child <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>                <span class="hljs-comment">//移动ptr到上一级链表的下一个位置</span><br>                ptr <span class="hljs-operator">=</span> nextPtr<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                ptr <span class="hljs-operator">=</span> ptr<span class="hljs-operator">?</span>.next<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>447. 回旋镖的数量</title>
    <link href="/2021/09/14/leetcode/447/"/>
    <url>/2021/09/14/leetcode/447/</url>
    
    <content type="html"><![CDATA[<p>执行用时：600 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.5 MB, 在所有 Swift 提交中击败了100.00%的用户</p><p>题目链接：<a href="https://leetcode-cn.com/problems/number-of-boomerangs/">https://leetcode-cn.com/problems/number-of-boomerangs/</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">numberOfBoomerangs</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">points</span>: [[<span class="hljs-type">Int</span>]])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> ans <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> points.count<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            <span class="hljs-keyword">var</span> hash: [<span class="hljs-type">Int</span>: <span class="hljs-type">Int</span>]<span class="hljs-operator">=</span>[:]<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>                <span class="hljs-keyword">let</span> x <span class="hljs-operator">=</span> points[i][<span class="hljs-number">0</span>] <span class="hljs-operator">-</span> points[j][<span class="hljs-number">0</span>]<br>                <span class="hljs-keyword">let</span> y <span class="hljs-operator">=</span> points[i][<span class="hljs-number">1</span>] <span class="hljs-operator">-</span> points[j][<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">let</span> dist <span class="hljs-operator">=</span> x<span class="hljs-operator">*</span>x <span class="hljs-operator">+</span> y<span class="hljs-operator">*</span>y<br>                <span class="hljs-keyword">if</span> hash[dist] <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>                    hash[dist]<span class="hljs-operator">!</span> <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    hash[dist] <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> hash.values &#123;<br>                ans <span class="hljs-operator">=</span> ans <span class="hljs-operator">+</span> m<span class="hljs-operator">*</span>(m<span class="hljs-operator">-</span><span class="hljs-number">1</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1894. 找到需要补充粉笔的学生编号</title>
    <link href="/2021/09/10/leetcode/1894/"/>
    <url>/2021/09/10/leetcode/1894/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/">https://leetcode-cn.com/problems/find-the-student-that-will-replace-the-chalk/</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">chalkReplacer</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">chalk</span>: [<span class="hljs-type">Int</span>], <span class="hljs-keyword">_</span> <span class="hljs-params">k</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> who <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, rest <span class="hljs-operator">=</span> k, n <span class="hljs-operator">=</span> chalk.count<br>        <span class="hljs-keyword">if</span> n <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> sum <span class="hljs-operator">=</span> chalk.reduce(<span class="hljs-number">0</span>, <span class="hljs-operator">+</span>)<br>        <span class="hljs-keyword">var</span> k <span class="hljs-operator">=</span> k <span class="hljs-operator">%</span> sum<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            <span class="hljs-keyword">if</span> chalk[i] <span class="hljs-operator">&gt;</span> k &#123;<br>                who <span class="hljs-operator">=</span> i<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>            k <span class="hljs-operator">-=</span> chalk[i]<br>        &#125;<br>        <span class="hljs-keyword">return</span> who<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1002 A+B for Polynomials (25 point(s))</title>
    <link href="/2021/09/07/patA/1002/"/>
    <url>/2021/09/07/patA/1002/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000">https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;cstdio&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;map&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> k;<br>    map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">float</span>, greater&lt;<span class="hljs-keyword">int</span>&gt;&gt; nums;<br>    cin&gt;&gt;k;<br>    <span class="hljs-keyword">int</span> exp, count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">float</span> coef;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) &#123;<br>        cin&gt;&gt;exp&gt;&gt;coef;<br>        nums.<span class="hljs-built_in">insert</span>(&#123;exp,coef&#125;);<br>    &#125;<br>    cin&gt;&gt;k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) &#123;<br>        cin&gt;&gt;exp&gt;&gt;coef;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">find</span>(exp) != nums.<span class="hljs-built_in">end</span>()) &#123;<br>            nums.<span class="hljs-built_in">find</span>(exp)-&gt;second += coef;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            nums.<span class="hljs-built_in">insert</span>(&#123;exp,coef&#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;t: nums)&#123;<br>        <span class="hljs-keyword">if</span> (t.second != <span class="hljs-number">0</span>)&#123;<br>            count++;<br>        &#125;<br><br>    &#125;<br>    cout&lt;&lt;count;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;t: nums)&#123;<br>        <span class="hljs-keyword">if</span> (t.second != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d %.1lf&quot;</span>, t.first, t.second);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat甲级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1001 A+B Format (20 point(s))</title>
    <link href="/2021/09/07/patA/1001/"/>
    <url>/2021/09/07/patA/1001/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400">https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a,b, sum = <span class="hljs-number">0</span>;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    sum = a+b;<br>    string s = <span class="hljs-built_in">to_string</span>(sum);<br>    <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>()&lt;<span class="hljs-number">4</span>)&#123;<br>        cout&lt;&lt;sum;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        string res = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; --i) &#123;<br>            res += s[i];<br>            count++;<br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">if</span> (s[i<span class="hljs-number">-1</span>] != <span class="hljs-string">&#x27;-&#x27;</span> || (s[i<span class="hljs-number">-1</span>]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>)) res += <span class="hljs-string">&#x27;,&#x27;</span>;<br>                count = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        res += s[<span class="hljs-number">0</span>];<br>        std::<span class="hljs-built_in">reverse</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>        cout &lt;&lt; res;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat甲级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1221. 分割平衡字符串</title>
    <link href="/2021/09/07/leetcode/1221/"/>
    <url>/2021/09/07/leetcode/1221/</url>
    
    <content type="html"><![CDATA[<p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.7 MB, 在所有 Swift 提交中击败了45.13%的用户</p><p>题目链接：<a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/">https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">balancedStringSplit</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> [<span class="hljs-type">Character</span>](s)<br>        <span class="hljs-keyword">var</span> r <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, res <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> s.count<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            <span class="hljs-keyword">if</span> arr[i] <span class="hljs-operator">==</span> <span class="hljs-string">&quot;R&quot;</span> &#123;<br>                r <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                r <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> r <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                res <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>70. 爬楼梯</title>
    <link href="/2021/09/04/leetcode/70/"/>
    <url>/2021/09/04/leetcode/70/</url>
    
    <content type="html"><![CDATA[<p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.5 MB, 在所有 Swift 提交中击败了45.13%的用户</p><p>题目链接：<a href="https://leetcode-cn.com/problems/climbing-stairs/">https://leetcode-cn.com/problems/climbing-stairs/</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">climbStairs</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">n</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> dp <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-number">0</span>, count: n<span class="hljs-operator">+</span><span class="hljs-number">1</span>)<br>        dp[<span class="hljs-number">0</span>] <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        dp[<span class="hljs-number">1</span>] <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> n <span class="hljs-operator">&gt;=</span> <span class="hljs-number">2</span>&#123;<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">2</span> <span class="hljs-operator">...</span> n &#123;<br>                dp[i] <span class="hljs-operator">=</span> dp[i<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">+</span> dp[i<span class="hljs-operator">-</span><span class="hljs-number">2</span>]<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 10- I. 斐波那契数列</title>
    <link href="/2021/09/04/leetcode/offer10-1/"/>
    <url>/2021/09/04/leetcode/offer10-1/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/submissions/">https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/submissions/</a></p><p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.5 MB, 在所有 Swift 提交中击败了37.95%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fib</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">n</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> n <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> n <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-number">0</span>, count: n<span class="hljs-operator">+</span><span class="hljs-number">1</span>)<br>        arr[<span class="hljs-number">0</span>] <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        arr[<span class="hljs-number">1</span>] <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">2</span> <span class="hljs-operator">...</span> n &#123;<br>            arr[i] <span class="hljs-operator">=</span> (arr[i<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">+</span> arr[i<span class="hljs-operator">-</span><span class="hljs-number">2</span>]) <span class="hljs-operator">%</span> (<span class="hljs-type">Int</span>(<span class="hljs-number">1e9</span>)<span class="hljs-operator">+</span><span class="hljs-number">7</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr[n]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>165. 比较版本号</title>
    <link href="/2021/09/01/leetcode/165/"/>
    <url>/2021/09/01/leetcode/165/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/compare-version-numbers/">https://leetcode-cn.com/problems/compare-version-numbers/</a></p><p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：14 MB, 在所有 Swift 提交中击败了58.06%的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>转换为数组后先判断一样长的部分，如果都相等，再比较多出来的那一部分是否含有不为0的数。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">compareVersion</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">version1</span>: <span class="hljs-type">String</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">version2</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> v1 <span class="hljs-operator">=</span> version1.split(separator: <span class="hljs-string">&quot;.&quot;</span>)<br>        <span class="hljs-keyword">var</span> v2 <span class="hljs-operator">=</span> version2.split(separator: <span class="hljs-string">&quot;.&quot;</span>)<br>        <span class="hljs-keyword">var</span> index1 <span class="hljs-operator">=</span> v1.count, index2 <span class="hljs-operator">=</span> v2.count<br>        <span class="hljs-keyword">let</span> len <span class="hljs-operator">=</span> <span class="hljs-built_in">min</span>(index1, index2)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> len &#123;<br>            <span class="hljs-keyword">let</span> a <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(v1[i])<span class="hljs-operator">!</span><br>            <span class="hljs-keyword">let</span> b <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(v2[i])<span class="hljs-operator">!</span><br>            <span class="hljs-keyword">if</span> a <span class="hljs-operator">&gt;</span> b &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> a <span class="hljs-operator">&lt;</span> b &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> index1 <span class="hljs-operator">&lt;</span> index2 &#123;<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> index1 <span class="hljs-operator">..&lt;</span> index2 &#123;<br>                <span class="hljs-keyword">let</span> b <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(v2[i])<span class="hljs-operator">!</span><br>                <span class="hljs-keyword">if</span> b <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> index2 <span class="hljs-operator">..&lt;</span> index1 &#123;<br>                <span class="hljs-keyword">let</span> a <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(v1[i])<span class="hljs-operator">!</span><br>                <span class="hljs-keyword">if</span> a <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>226. 翻转二叉树</title>
    <link href="/2021/08/27/leetcode/226/"/>
    <url>/2021/08/27/leetcode/226/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/invert-binary-tree/">https://leetcode-cn.com/problems/invert-binary-tree/</a></p><p>执行用时：4 ms, 在所有 C++ 提交中击败了57.66%的用户<br>内存消耗：9.3 MB, 在所有 C++ 提交中击败了94.12%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> root;<br>            TreeNode *tmp;<br>            tmp = root-&gt;left;<br>            root-&gt;left = root-&gt;right;<br>            root-&gt;right = tmp;<br>            <span class="hljs-built_in">invertTree</span>(root-&gt;left);<br>            <span class="hljs-built_in">invertTree</span>(root-&gt;right);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>二叉树</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>53. 最大子序和</title>
    <link href="/2021/08/27/leetcode/53/"/>
    <url>/2021/08/27/leetcode/53/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/maximum-subarray/">https://leetcode-cn.com/problems/maximum-subarray/</a></p><p>执行用时：4 ms, 在所有 C++ 提交中击败了93.72%的用户<br>内存消耗：12.9 MB, 在所有 C++ 提交中击败了36.39%的用户</p><p>贪心算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = INT_MIN;<br>        <span class="hljs-keyword">int</span> thisSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (thisSum &lt; <span class="hljs-number">0</span>)&#123;<br>                thisSum = <span class="hljs-number">0</span>;<br>            &#125;<br>            thisSum += nums[i];<br>            sum = <span class="hljs-built_in">max</span>(sum,thisSum);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>JavaScript: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">var</span> maxSubArray = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> sum = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">let</span> thisSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> nums) &#123;<br>        <span class="hljs-keyword">if</span> (thisSum &lt; <span class="hljs-number">0</span>) &#123;<br>            thisSum = <span class="hljs-number">0</span>;<br>        &#125;<br>        thisSum += item;<br>        sum = <span class="hljs-built_in">Math</span>.max(sum, thisSum);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br>========<span class="hljs-number">2</span>==========<br><span class="hljs-keyword">var</span> maxSubArray = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> pre = <span class="hljs-number">0</span>, maxAns = nums[<span class="hljs-number">0</span>];<br>    nums.forEach(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> &#123;<br>        pre = <span class="hljs-built_in">Math</span>.max(pre + x, x);<br>        maxAns = <span class="hljs-built_in">Math</span>.max(maxAns, pre);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> maxAns;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>动态规划</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-comment">//res的初值也可设置为最小值</span><br>        <span class="hljs-comment">//nums[0]可能是最小值且为负数</span><br>        <span class="hljs-keyword">int</span> pre = <span class="hljs-number">0</span>, res = nums[<span class="hljs-number">0</span>]; <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> num: nums) &#123;<br>            pre = <span class="hljs-built_in">max</span>(pre + num, num);<br>            res = <span class="hljs-built_in">max</span>(pre, res);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时：1 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：48.7 MB, 在所有 Java 提交中击败了21.41% 的用户</p><p>java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = nums[<span class="hljs-number">0</span>], curSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i: nums) &#123;<br>            <span class="hljs-keyword">if</span>(curSum &lt; <span class="hljs-number">0</span>) &#123;<br>                curSum = <span class="hljs-number">0</span>;<br>            &#125; <br>            curSum += i;<br>            sum = Math.max(sum, curSum);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
      <tag>贪心算法</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14.最长公共前缀</title>
    <link href="/2021/08/27/leetcode/14LongestCommonPrefix/"/>
    <url>/2021/08/27/leetcode/14LongestCommonPrefix/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/longest-common-prefix/">https://leetcode-cn.com/problems/longest-common-prefix/</a></p><p>执行用时：4 ms, 在所有 C++ 提交中击败了85.15%的用户<br>内存消耗：8.9 MB, 在所有 C++ 提交中击败了60.86%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (strs[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>; &#125;<br>        <span class="hljs-keyword">if</span>(strs.<span class="hljs-built_in">size</span>()==<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>];&#125;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>        string res = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//纵向扫描</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; strs[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">char</span> common = strs[<span class="hljs-number">0</span>][j];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt; strs.<span class="hljs-built_in">size</span>(); ++k) &#123;<br>                <span class="hljs-keyword">if</span> (common == strs[k][j]) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">return</span> res;<br>                &#125;<br>            &#125;<br>            j++;<br>            res += common;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时：4 ms, 在所有 C++ 提交中击败了89.08% 的用户<br>内存消耗：8.7 MB, 在所有 C++ 提交中击败了96.19% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt; &amp;strs)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n=strs.<span class="hljs-built_in">size</span>();<br>        string sub = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (strs[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span> sub; &#125;<br>        <span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">while</span> (strs[<span class="hljs-number">0</span>][j] == strs[i][j] &amp;&amp; (strs[i][j] != <span class="hljs-string">&#x27;\0&#x27;</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (i == n- <span class="hljs-number">1</span>) &#123;<br>                    sub += strs[<span class="hljs-number">0</span>][j];<br>                    j++;<br>                    i = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> sub;<br>        &#125;<br>        <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>695. 岛屿的最大面积</title>
    <link href="/2021/08/26/leetcode/695/"/>
    <url>/2021/08/26/leetcode/695/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/max-area-of-island/">https://leetcode-cn.com/problems/max-area-of-island/</a></p><p>执行用时：68 ms, 在所有 Swift 提交中击败了100.00% 的用户<br>内存消耗：14.8 MB, 在所有 Swift 提交中击败了36.00% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">maxAreaOfIsland</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">grid</span>: [[<span class="hljs-type">Int</span>]])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> grid <span class="hljs-operator">=</span> grid<br>        <span class="hljs-keyword">var</span> row <span class="hljs-operator">=</span> grid.count<br>        <span class="hljs-keyword">var</span> column <span class="hljs-operator">=</span> grid[<span class="hljs-number">0</span>].count<br>        <span class="hljs-keyword">var</span> ans <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dfs</span>( <span class="hljs-keyword">_</span> <span class="hljs-params">i</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">j</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>            <span class="hljs-comment">//越界判断</span><br>            <span class="hljs-keyword">if</span> i <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span> <span class="hljs-operator">||</span> j <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span> <span class="hljs-operator">||</span> i <span class="hljs-operator">&gt;=</span> row <span class="hljs-operator">||</span> j <span class="hljs-operator">&gt;=</span> column &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> grid[i][j] <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            &#125;<br>            <span class="hljs-comment">//找到1就置为0，沉没岛屿</span><br>            grid[i][j] <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">var</span> num <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>            <span class="hljs-comment">//四个方向深搜</span><br>            num <span class="hljs-operator">+=</span> dfs(i<span class="hljs-operator">-</span><span class="hljs-number">1</span>, j)<br>            num <span class="hljs-operator">+=</span> dfs(i<span class="hljs-operator">+</span><span class="hljs-number">1</span>, j)<br>            num <span class="hljs-operator">+=</span> dfs(i, j<span class="hljs-operator">-</span><span class="hljs-number">1</span>)<br>            num <span class="hljs-operator">+=</span> dfs(i, j<span class="hljs-operator">+</span><span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> num<br>        &#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> row &#123;<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> column &#123;<br>                ans <span class="hljs-operator">=</span> <span class="hljs-built_in">max</span>(ans, dfs(i,j))<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>567. 字符串的排列</title>
    <link href="/2021/08/26/leetcode/567/"/>
    <url>/2021/08/26/leetcode/567/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/permutation-in-string/">https://leetcode-cn.com/problems/permutation-in-string/</a><br>执行用时：44 ms, 在所有 Swift 提交中击败了84.00%的用户<br>内存消耗：14.2 MB, 在所有 Swift 提交中击败了38.00%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkInclusion</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s1</span>: <span class="hljs-type">String</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">s2</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> s1.count <span class="hljs-operator">&gt;</span> s2.count &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">let</span> a <span class="hljs-operator">=</span> <span class="hljs-type">Array</span>(s1), b <span class="hljs-operator">=</span> <span class="hljs-type">Array</span>(s2), m <span class="hljs-operator">=</span> s1.count, n <span class="hljs-operator">=</span> s2.count<br>        <span class="hljs-keyword">var</span> count1 <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>](repeating: <span class="hljs-number">0</span>, count: <span class="hljs-number">26</span>)<br>        <span class="hljs-keyword">var</span> count2 <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>](repeating: <span class="hljs-number">0</span>, count: <span class="hljs-number">26</span>)<br>        <span class="hljs-comment">//比较短字符串长度下是否是对应排列的子串，检查元素</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> m &#123;<br>            count1[<span class="hljs-type">Int</span>(a[i].asciiValue<span class="hljs-operator">!</span>) <span class="hljs-operator">-</span> <span class="hljs-number">97</span>] <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            count2[<span class="hljs-type">Int</span>(b[i].asciiValue<span class="hljs-operator">!</span>) <span class="hljs-operator">-</span> <span class="hljs-number">97</span>] <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> count1.elementsEqual(count2) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m <span class="hljs-operator">..&lt;</span> n &#123;<br>            <span class="hljs-comment">//滑动窗口向后移动，去掉滑动窗口前一个元素</span><br>            count2[<span class="hljs-type">Int</span>(b[i].asciiValue<span class="hljs-operator">!</span>) <span class="hljs-operator">-</span> <span class="hljs-number">97</span>] <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            count2[<span class="hljs-type">Int</span>(b[i<span class="hljs-operator">-</span>m].asciiValue<span class="hljs-operator">!</span>) <span class="hljs-operator">-</span> <span class="hljs-number">97</span>] <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> count1.elementsEqual(count2) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>787. K 站中转内最便宜的航班</title>
    <link href="/2021/08/24/leetcode/787/"/>
    <url>/2021/08/24/leetcode/787/</url>
    
    <content type="html"><![CDATA[<p>的用户<br>题目链接：<a href="https://leetcode-cn.com/problems/cheapest-flights-within-k-stops/">https://leetcode-cn.com/problems/cheapest-flights-within-k-stops/</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findCheapestPrice</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">n</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">flights</span>: [[<span class="hljs-type">Int</span>]], <span class="hljs-keyword">_</span> <span class="hljs-params">src</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">dst</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">k</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">let</span> maxDist <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>.max<span class="hljs-operator">/</span><span class="hljs-number">2</span><br>        <span class="hljs-keyword">var</span> dist <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>](repeating: maxDist, count: n)<br>        dist[src] <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> limit <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">...</span> k &#123;<br>            <span class="hljs-keyword">var</span> clone <span class="hljs-operator">=</span> dist<br>            <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> flights &#123;<br>                <span class="hljs-keyword">var</span> x <span class="hljs-operator">=</span> f[<span class="hljs-number">0</span>], y <span class="hljs-operator">=</span> f[<span class="hljs-number">1</span>], w <span class="hljs-operator">=</span> f[<span class="hljs-number">2</span>]<br>                dist[y] <span class="hljs-operator">=</span> <span class="hljs-built_in">min</span>(dist[y], clone[x]<span class="hljs-operator">+</span>w)<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">let</span> ans <span class="hljs-operator">=</span> dist[dst]<br>        <span class="hljs-keyword">return</span> ans <span class="hljs-operator">&gt;</span> maxDist<span class="hljs-operator">/</span><span class="hljs-number">2</span> <span class="hljs-operator">?</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span> : ans<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>图论</tag>
      
      <tag>邻接矩阵</tag>
      
      <tag>Bellman Ford</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1646. 获取生成数组中的最大值</title>
    <link href="/2021/08/23/leetcode/1646/"/>
    <url>/2021/08/23/leetcode/1646/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/get-maximum-in-generated-array/">https://leetcode-cn.com/problems/get-maximum-in-generated-array/</a></p><p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00% 的用户<br>内存消耗：13.5 MB, 在所有 Swift 提交中击败了33.00% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getMaximumGenerated</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">n</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> nums <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>].<span class="hljs-keyword">init</span>(repeating: <span class="hljs-number">0</span>, count: n<span class="hljs-operator">+</span><span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">var</span> odd <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, flag <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">if</span> n <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> n <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        &#125;<br>        nums[<span class="hljs-number">0</span>] <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        nums[<span class="hljs-number">1</span>] <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">2</span> <span class="hljs-operator">...</span> n &#123;<br>            <span class="hljs-keyword">if</span> flag &#123;<br>                nums[i] <span class="hljs-operator">=</span> nums[i<span class="hljs-operator">/</span><span class="hljs-number">2</span>]<br>                flag <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                nums[i] <span class="hljs-operator">=</span> nums[odd] <span class="hljs-operator">+</span> nums[odd<span class="hljs-operator">+</span><span class="hljs-number">1</span>]<br>                odd <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                flag <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>        nums.sort(by: &#123;<span class="hljs-variable">$0</span> <span class="hljs-operator">&gt;</span> <span class="hljs-variable">$1</span>&#125;)<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>876. 链表的中间结点</title>
    <link href="/2021/08/22/leetcode/876/"/>
    <url>/2021/08/22/leetcode/876/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">https://leetcode-cn.com/problems/middle-of-the-linked-list/</a></p><p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00% 的用户<br>内存消耗：13.4 MB, 在所有 Swift 提交中击败了75.94% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">middleNode</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> s <span class="hljs-operator">=</span> head, f <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> f<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            f <span class="hljs-operator">=</span> f<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next<br>            s <span class="hljs-operator">=</span> s<span class="hljs-operator">?</span>.next<br>        &#125;<br>        <span class="hljs-keyword">return</span> s<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>链表</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>789. 逃脱阻碍者</title>
    <link href="/2021/08/22/leetcode/789/"/>
    <url>/2021/08/22/leetcode/789/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/escape-the-ghosts/">https://leetcode-cn.com/problems/escape-the-ghosts/</a></p><p>执行用时：20 ms, 在所有 Swift 提交中击败了100.00% 的用户<br>内存消耗：13.6 MB, 在所有 Swift 提交中击败了100.00% 的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>如果ghost的坐标和目标点之间的距离小于等于逃跑者和目标点的距离就表示能遇到。<br>很快啊，画了下坐标图几分钟就ac了，真朴素</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">escapeGhosts</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">ghosts</span>: [[<span class="hljs-type">Int</span>]], <span class="hljs-keyword">_</span> <span class="hljs-params">target</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> target[<span class="hljs-number">0</span>] <span class="hljs-operator">==</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> target[<span class="hljs-number">1</span>] <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> ghosts.count<br>        <span class="hljs-keyword">var</span> mydis <span class="hljs-operator">=</span> <span class="hljs-built_in">abs</span>(target[<span class="hljs-number">0</span>]) <span class="hljs-operator">+</span> <span class="hljs-built_in">abs</span>(target[<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">var</span> gdis <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            gdis <span class="hljs-operator">=</span> <span class="hljs-built_in">abs</span>(target[<span class="hljs-number">0</span>] <span class="hljs-operator">-</span> ghosts[i][<span class="hljs-number">0</span>]) <span class="hljs-operator">+</span> <span class="hljs-built_in">abs</span>(target[<span class="hljs-number">1</span>] <span class="hljs-operator">-</span> ghosts[i][<span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">if</span> gdis <span class="hljs-operator">&lt;=</span> mydis &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>443. 压缩字符串</title>
    <link href="/2021/08/21/leetcode/443/"/>
    <url>/2021/08/21/leetcode/443/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/string-compression/">https://leetcode-cn.com/problems/string-compression/</a></p><p>执行用时：28 ms, 在所有 Swift 提交中击败了94.44% 的用户<br>内存消耗：13.7 MB, 在所有 Swift 提交中击败了100.00% 的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>开辟一个字符串来保存字符和个数，最后再转换为字符数组。 28ms</p><ol><li>慢指针指向要压缩的字符</li><li>移动快指针，遇到相同字符即计数，若快指针已经走到末尾，将该字符和计数一起转为字符串存入str</li><li>若遇到不相同字符，判断当前字符个数</li></ol><ul><li>如果是一个，说明下一个是新字符，当前字符转为字符串存入str</li><li>否则将该字符和计数一起转为字符串后存入str</li><li>使慢指针指向快指针位置，此时慢指针所指字符为下一轮匹配字符</li><li>重置计数</li></ul><ol start="4"><li>快指针向后移动</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">compress</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">chars</span>: <span class="hljs-keyword">inout</span> [<span class="hljs-type">Character</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> ch: <span class="hljs-type">Character</span>, count <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, slow <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,fast <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> n <span class="hljs-operator">=</span> chars.count<br>        <span class="hljs-keyword">var</span> str: <span class="hljs-type">String</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> slow <span class="hljs-operator">!=</span> n &#123;<br>            ch <span class="hljs-operator">=</span> chars[slow]<br>            <span class="hljs-keyword">if</span> fast <span class="hljs-operator">&lt;</span> n <span class="hljs-operator">&amp;&amp;</span> ch <span class="hljs-operator">==</span> chars[fast]&#123;<br>                count <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> fast <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">==</span> n  &#123;<br>                    str <span class="hljs-operator">+=</span> <span class="hljs-type">String</span>(ch) <span class="hljs-operator">+</span> <span class="hljs-type">String</span>(count)<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> count <span class="hljs-operator">!=</span> <span class="hljs-number">1</span>&#123;<br>                    str <span class="hljs-operator">+=</span> <span class="hljs-type">String</span>(ch) <span class="hljs-operator">+</span> <span class="hljs-type">String</span>(count)<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    str <span class="hljs-operator">+=</span> <span class="hljs-type">String</span>(ch)<br>                &#125;<br>                slow <span class="hljs-operator">=</span> fast<br>                count <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>            &#125;<br>            fast <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>        chars <span class="hljs-operator">=</span> <span class="hljs-type">Array</span>(str)<br>        <span class="hljs-keyword">return</span> chars.count<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>原地赋值, 20ms</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">compress</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">chars</span>: <span class="hljs-keyword">inout</span> [<span class="hljs-type">Character</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, nextCh <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> chars.count<br>        <span class="hljs-keyword">for</span> read <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            <span class="hljs-comment">//判断是否走到末尾 或者 前后字符不相同时计算个数</span><br>            <span class="hljs-keyword">if</span> read <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">==</span> n <span class="hljs-operator">||</span> chars[read] <span class="hljs-operator">!=</span> chars[read<span class="hljs-operator">+</span><span class="hljs-number">1</span>] &#123;<br>                <span class="hljs-comment">//将比较中的字符赋给慢指针所处字符</span><br>                chars[slow] <span class="hljs-operator">=</span> chars[nextCh]<br>                <span class="hljs-comment">//慢指针向后移动，该位置开始存放计数值</span><br>                slow <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                <span class="hljs-comment">// 字符只有一个时无需计数, read 和 nextCh重合</span><br>                <span class="hljs-keyword">if</span> read <span class="hljs-operator">&gt;</span> nextCh &#123;<br>                    <span class="hljs-comment">//计算相同字符长度，并赋值</span><br>                    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> <span class="hljs-type">Array</span>(<span class="hljs-type">String</span>(read <span class="hljs-operator">-</span> nextCh <span class="hljs-operator">+</span> <span class="hljs-number">1</span>)) &#123;<br>                        chars[slow] <span class="hljs-operator">=</span> ch<br>                        slow <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">//指向下一个需要比较的字符</span><br>                nextCh <span class="hljs-operator">=</span> read <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>167. 两数之和 II - 输入有序数组</title>
    <link href="/2021/08/20/leetcode/167/"/>
    <url>/2021/08/20/leetcode/167/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/</a></p><p>太巧了，两种方法都是24ms</p><h1 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h1><p>1 一开始字典为空，存入数组中的元素作为key，下标作为value，<br>2 搜索target与数组[i]所指元素之间的差值，<br>3 差值对应的value即对应数组中的下标。<br>4 返回时应先将字典返回的value 放在前面，因为它在数组中先被访问到并存入字典，而搜索时的[i]元素排在value之后 </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">numbers</span>: [<span class="hljs-type">Int</span>], <span class="hljs-keyword">_</span> <span class="hljs-params">target</span>: <span class="hljs-type">Int</span>)</span> -&gt; [<span class="hljs-type">Int</span>] &#123;<br>        <span class="hljs-keyword">var</span> dict <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>: <span class="hljs-type">Int</span>]()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> numbers.count &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> j <span class="hljs-operator">=</span> dict[target <span class="hljs-operator">-</span> numbers[i]]&#123;<br>                <span class="hljs-keyword">return</span> [j<span class="hljs-operator">+</span><span class="hljs-number">1</span>, i<span class="hljs-operator">+</span><span class="hljs-number">1</span>]<br>            &#125;<br>            dict[numbers[i]] <span class="hljs-operator">=</span> i<br>        &#125;<br>        <span class="hljs-keyword">return</span> []<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h1><p>当sum &gt; target 时说明应该使较大值变小，才会更靠近target，所以high - 1，反之增加左值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">twoSum</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">numbers</span>: [<span class="hljs-type">Int</span>], <span class="hljs-keyword">_</span> <span class="hljs-params">target</span>: <span class="hljs-type">Int</span>)</span> -&gt; [<span class="hljs-type">Int</span>] &#123;<br>        <span class="hljs-keyword">var</span> low <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, high <span class="hljs-operator">=</span> numbers.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span> , sum <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> low <span class="hljs-operator">&lt;</span> high &#123;<br>            sum <span class="hljs-operator">=</span> numbers[low] <span class="hljs-operator">+</span> numbers[high]<br>            <span class="hljs-keyword">if</span> sum <span class="hljs-operator">==</span> target &#123;<br>                <span class="hljs-keyword">return</span> [low<span class="hljs-operator">+</span><span class="hljs-number">1</span>, high<span class="hljs-operator">+</span><span class="hljs-number">1</span>]<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> sum <span class="hljs-operator">&gt;</span> target &#123;<br>                high <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                low <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> []<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>541. 反转字符串 II</title>
    <link href="/2021/08/20/leetcode/541/"/>
    <url>/2021/08/20/leetcode/541/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-string-ii/">https://leetcode-cn.com/problems/reverse-string-ii/</a><br>执行用时：52 ms, 在所有 Swift 提交中击败了70.00% 的用户<br>内存消耗：14.3 MB, 在所有 Swift 提交中击败了35.00% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseStr</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">k</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">var</span> len <span class="hljs-operator">=</span> s.count<br>        <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> [<span class="hljs-type">Character</span>](s)<br>        <span class="hljs-keyword">var</span> flag <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">var</span> left <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">stride</span>(from: <span class="hljs-number">0</span>, to: len, by:k) &#123;<br>            <span class="hljs-comment">//第奇数个k则需要反转</span><br>            <span class="hljs-keyword">if</span> (i<span class="hljs-operator">/</span>k) <span class="hljs-operator">%</span> <span class="hljs-number">2</span> <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>                right <span class="hljs-operator">=</span> i <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>                flag <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>                arr[left<span class="hljs-operator">...</span>right].reverse()<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                left <span class="hljs-operator">=</span> i<br>                flag <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//第偶数个k之后剩余的字符少于k时全部反转</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>flag &#123;<br>            arr[left <span class="hljs-operator">..&lt;</span> len].reverse()<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">String</span>(arr)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>345. 反转字符串中的元音字母</title>
    <link href="/2021/08/19/leetcode/345/"/>
    <url>/2021/08/19/leetcode/345/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string/">https://leetcode-cn.com/problems/reverse-vowels-of-a-string/</a><br>执行用时：68 ms, 在所有 Swift 提交中击败了92.31% 的用户<br>内存消耗：15.9 MB, 在所有 Swift 提交中击败了38.46% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseVowels</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">var</span> chars <span class="hljs-operator">=</span> <span class="hljs-type">Array</span>(s)<br>        <span class="hljs-keyword">var</span> left <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right <span class="hljs-operator">=</span> chars.count<span class="hljs-operator">-</span><span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> flag <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">let</span> vowels: <span class="hljs-type">Set</span>&lt;<span class="hljs-type">Character</span>&gt; <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;U&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>]<br>        <span class="hljs-keyword">while</span> left <span class="hljs-operator">&lt;</span> right &#123;<br>            <span class="hljs-comment">//左边遇到元音字符</span><br>            flag <span class="hljs-operator">=</span> vowels.contains(chars[left])<br>            <span class="hljs-keyword">if</span> flag <span class="hljs-operator">&amp;&amp;</span> vowels.contains(chars[right]) &#123;<br>                chars.swapAt(left, right)<br>                left <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                right <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> flag &#123;<br>                right <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                left <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">let</span> str <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(chars)<br>        <span class="hljs-keyword">return</span> str<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用switch case 匹配的写法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseVowels</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">var</span> chars <span class="hljs-operator">=</span> <span class="hljs-type">Array</span>(s)<br>        <span class="hljs-keyword">var</span> left <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right <span class="hljs-operator">=</span> chars.count<span class="hljs-operator">-</span><span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> tmp:<span class="hljs-type">Character</span><br>        <span class="hljs-keyword">var</span> flag1 <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, flag2 <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">while</span> left <span class="hljs-operator">&lt;</span> right &#123;<br>            <span class="hljs-keyword">switch</span> chars[left] &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-string">&quot;O&quot;</span>,<span class="hljs-string">&quot;U&quot;</span>:<br>                flag1 <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">default</span>:<br>                left <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                flag1 <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>                <span class="hljs-keyword">break</span><br>            &#125;<br>            <span class="hljs-keyword">switch</span> chars[right] &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-string">&quot;O&quot;</span>,<span class="hljs-string">&quot;U&quot;</span>:<br>                flag2 <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">default</span>:<br>                right <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>                flag2 <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>                <span class="hljs-keyword">break</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> flag1 <span class="hljs-operator">&amp;&amp;</span> flag2 &#123;<br>                chars.swapAt(left, right)<br>                left <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                right <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">let</span> str <span class="hljs-operator">=</span> <span class="hljs-type">String</span>(chars)<br>        <span class="hljs-keyword">return</span> str<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2. 两数相加</title>
    <link href="/2021/08/19/leetcode/2/"/>
    <url>/2021/08/19/leetcode/2/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/add-two-numbers/">https://leetcode-cn.com/problems/add-two-numbers/</a></p><p>执行用时：36 ms, 在所有 Swift 提交中击败了98.20%的用户<br>内存消耗：13.5 MB, 在所有 Swift 提交中击败了75.16%的用户</p><p>因为是按照逆序存储，从头开始访问正好是从个位开始往前相加。<br>当链表一样长时，指针同时走到末尾，产生的十进位即最后一位，例如平时64+64 = 128放在最前面<br>在这里就是[4,6] + [4,6] = [8, 2, 1]<br>当链表长度不一致时，进位产生的值就加在更长的链表上，例如64 + 886 = 950<br>[4,6] + [6,8,8] = [0,5,9]<br>个位上 4 + 6 产生的进位 1 加在了十位数 6 + 8 + 1上，<br>十位数的进位 1 加在了第二个链表的百位数上。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addTwoNumbers</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">l1</span>: <span class="hljs-type">ListNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">l2</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> p1 <span class="hljs-operator">=</span> l1, p2 <span class="hljs-operator">=</span> l2, sum <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>), head <span class="hljs-operator">=</span> cur<br>        <span class="hljs-keyword">while</span> p1 <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> p2 <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> sum <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">if</span> p1 <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>                sum <span class="hljs-operator">+=</span> p1<span class="hljs-operator">!</span>.val<br>                p1 <span class="hljs-operator">=</span> p1<span class="hljs-operator">?</span>.next<br>            &#125;<br>            <span class="hljs-keyword">if</span> p2 <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>                sum <span class="hljs-operator">+=</span> p2<span class="hljs-operator">!</span>.val<br>                p2 <span class="hljs-operator">=</span> p2<span class="hljs-operator">?</span>.next<br>            &#125;<br>            cur.next <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(sum<span class="hljs-operator">%</span><span class="hljs-number">10</span>)<br>            cur <span class="hljs-operator">=</span> cur.next<span class="hljs-operator">!</span><br>            <span class="hljs-comment">//sum除以10后为进位后的十位数 </span><br>            sum <span class="hljs-operator">/=</span> <span class="hljs-number">10</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> head.next<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>35. 搜索插入位置</title>
    <link href="/2021/08/18/leetcode/35/"/>
    <url>/2021/08/18/leetcode/35/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/search-insert-position/">https://leetcode-cn.com/problems/search-insert-position/</a></p><p>执行用时：28 ms, 在所有 Swift 提交中击败了84.96%的用户<br>内存消耗：13.4 MB, 在所有 Swift 提交中击败了98.89%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">searchInsert</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>], <span class="hljs-keyword">_</span> <span class="hljs-params">target</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> left <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right <span class="hljs-operator">=</span> nums.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left <span class="hljs-operator">&lt;=</span> right &#123;<br>            <span class="hljs-keyword">var</span> mid <span class="hljs-operator">=</span> left <span class="hljs-operator">+</span> (right <span class="hljs-operator">-</span> left)<span class="hljs-operator">/</span><span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] <span class="hljs-operator">&lt;</span> target &#123;<br>                left <span class="hljs-operator">=</span> mid <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                right <span class="hljs-operator">=</span> mid <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>704. 二分查找</title>
    <link href="/2021/08/18/leetcode/704/"/>
    <url>/2021/08/18/leetcode/704/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/binary-search/">https://leetcode-cn.com/problems/binary-search/</a></p><p>执行用时：280 ms, 在所有 Swift 提交中击败了92.26% 的用户<br>内存消耗：13.9 MB, 在所有 Swift 提交中击败了26.13% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">search</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>], <span class="hljs-keyword">_</span> <span class="hljs-params">target</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> left <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right <span class="hljs-operator">=</span> nums.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> index <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left <span class="hljs-operator">&lt;=</span> right &#123;<br>            index <span class="hljs-operator">=</span> left <span class="hljs-operator">+</span> (right<span class="hljs-operator">-</span>left)<span class="hljs-operator">/</span><span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[index] <span class="hljs-operator">==</span> target &#123;<br>                <span class="hljs-keyword">return</span> index<br>            &#125;<br>            <span class="hljs-keyword">if</span> nums[index] <span class="hljs-operator">&lt;</span> target &#123;<br>                left <span class="hljs-operator">=</span> index <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                right <span class="hljs-operator">=</span> index <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21. 合并两个有序链表</title>
    <link href="/2021/08/18/leetcode/mergeTwoLiknk/"/>
    <url>/2021/08/18/leetcode/mergeTwoLiknk/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">https://leetcode-cn.com/problems/merge-two-sorted-lists/</a></p><p>执行用时：12 ms, 在所有 Swift 提交中击败了88.31%的用户<br>内存消耗：13.7 MB, 在所有 Swift 提交中击败了9.96%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mergeTwoLists</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">l1</span>: <span class="hljs-type">ListNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">l2</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> head <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>), cur <span class="hljs-operator">=</span> head, target <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> p1 <span class="hljs-operator">=</span> l1, p2 <span class="hljs-operator">=</span> l2<br>        <span class="hljs-keyword">while</span> p1 <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">&amp;&amp;</span> p2 <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">if</span> p1<span class="hljs-operator">?</span>.val <span class="hljs-operator">??</span> <span class="hljs-operator">-</span><span class="hljs-number">101</span> <span class="hljs-operator">&lt;</span> p2<span class="hljs-operator">?</span>.val <span class="hljs-operator">??</span> <span class="hljs-number">101</span> &#123;<br>                target <span class="hljs-operator">=</span> p1<span class="hljs-operator">!</span><br>                p1 <span class="hljs-operator">=</span> p1<span class="hljs-operator">?</span>.next<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                target <span class="hljs-operator">=</span> p2<span class="hljs-operator">!</span><br>                p2 <span class="hljs-operator">=</span> p2<span class="hljs-operator">?</span>.next<br>            &#125;<br>            cur.next <span class="hljs-operator">=</span> target<br>            cur <span class="hljs-operator">=</span> cur.next<span class="hljs-operator">!</span><br>        &#125;<br>        cur.next <span class="hljs-operator">=</span> p1 <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">?</span> p2 : p1<br>        <span class="hljs-keyword">return</span> head.next<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>551. 学生出勤记录 I</title>
    <link href="/2021/08/18/leetcode/student/"/>
    <url>/2021/08/18/leetcode/student/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/student-attendance-record-i/">https://leetcode-cn.com/problems/student-attendance-record-i/</a></p><p>执行用时：4 ms, 在所有 Swift 提交中击败了100.00% 的用户<br>内存消耗：13.9 MB, 在所有 Swift 提交中击败了100.00% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkRecord</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-type">A</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, <span class="hljs-type">L</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s &#123;<br>            <span class="hljs-keyword">switch</span> i &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;A&quot;</span>:<br>                <span class="hljs-type">A</span> <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                <span class="hljs-type">L</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;L&quot;</span>:<br>                <span class="hljs-type">L</span> <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-type">L</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> <span class="hljs-type">A</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span> <span class="hljs-operator">||</span> <span class="hljs-type">L</span> <span class="hljs-operator">&gt;</span> <span class="hljs-number">2</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>234. 回文链表</title>
    <link href="/2021/08/13/leetcode/palindrome-linked-list/"/>
    <url>/2021/08/13/leetcode/palindrome-linked-list/</url>
    
    <content type="html"><![CDATA[<p>执行用时：884 ms, 在所有 Swift 提交中击败了86.73% 的用户<br>内存消耗：32.3 MB, 在所有 Swift 提交中击败了19.43% 的用户</p><p>遍历一边取出数值放入数组，对数组进行双指针判断</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isPalindrome</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>]()<br>        <span class="hljs-keyword">var</span> p <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> p <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            arr.append(p<span class="hljs-operator">?</span>.val <span class="hljs-operator">??</span> <span class="hljs-number">0</span>)<br>            p <span class="hljs-operator">=</span> p<span class="hljs-operator">?</span>.next<br>        &#125;<br>        p <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> arr.count).reversed() &#123;<br>            <span class="hljs-keyword">if</span> p<span class="hljs-operator">?</span>.val <span class="hljs-operator">!=</span> arr[i] &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>            p <span class="hljs-operator">=</span> p<span class="hljs-operator">?</span>.next<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：904 ms, 在所有 Swift 提交中击败了84.36% 的用户<br>内存消耗：26.7 MB, 在所有 Swift 提交中击败了58.77% 的用户</p><p>通过翻转链表的一半，再从头开始比对</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isPalindrome</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> head <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> head<span class="hljs-operator">?</span>.next <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> head, fast <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> pre <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> prepre:<span class="hljs-type">ListNode</span>? <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <span class="hljs-comment">//当快指针走两步时走完时，慢指针刚好走到中间位置</span><br>        <span class="hljs-keyword">while</span> fast <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">&amp;&amp;</span> fast<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            pre <span class="hljs-operator">=</span> slow<br>            slow <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next<br>            pre<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> prepre<br>            prepre <span class="hljs-operator">=</span> pre<br>        &#125;<br>        <span class="hljs-comment">//判断是否为奇数，奇数个则慢指针向后移动一步</span><br>        <span class="hljs-keyword">if</span> fast <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            slow <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>        &#125;<br>        <span class="hljs-keyword">while</span> pre <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span>  &#123;<br>            <span class="hljs-keyword">if</span> pre<span class="hljs-operator">?</span>.val <span class="hljs-operator">!=</span> slow<span class="hljs-operator">?</span>.val &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>            pre <span class="hljs-operator">=</span> pre<span class="hljs-operator">?</span>.next<br>            slow <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>链表</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>413. 等差数列划分</title>
    <link href="/2021/08/10/leetcode/413arithmetic-slice/"/>
    <url>/2021/08/10/leetcode/413arithmetic-slice/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/arithmetic-slices/">https://leetcode-cn.com/problems/arithmetic-slices/</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>用快指针递增，来判断下一对数值之间的差是否与前面一对数值的差，相等则为等差数列计数增加，<br>快指针向后移动，即滑动窗口扩大。<br>否则退出循环，慢指针递增，进行一下一组子数列的判断。</p><p>执行用时：8 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.8 MB, 在所有 Swift 提交中击败了40.00%的用户</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">numberOfArithmeticSlices</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> length <span class="hljs-operator">=</span> nums.count<br>        <span class="hljs-keyword">if</span> length <span class="hljs-operator">&lt;</span> <span class="hljs-number">3</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, fast <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> slow <span class="hljs-operator">!=</span> length <span class="hljs-operator">-</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">var</span> diff <span class="hljs-operator">=</span> nums[fast]<span class="hljs-operator">-</span>nums[slow]<br>            <span class="hljs-keyword">while</span> fast <span class="hljs-operator">!=</span> length <span class="hljs-operator">-</span> <span class="hljs-number">1</span> &#123;<br>                <span class="hljs-keyword">if</span>  diff <span class="hljs-operator">==</span> nums[fast<span class="hljs-operator">+</span><span class="hljs-number">1</span>] <span class="hljs-operator">-</span> nums[fast] &#123;<br>                    count <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                    fast <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">continue</span><br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125;<br>            slow <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            fast <span class="hljs-operator">=</span> slow <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> count<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1137. 第 N 个泰波那契数</title>
    <link href="/2021/08/08/leetcode/n-th-tribonacci/"/>
    <url>/2021/08/08/leetcode/n-th-tribonacci/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/n-th-tribonacci-number/">https://leetcode-cn.com/problems/n-th-tribonacci-number/</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>预处理n = 1，2，3的情况<br>再迭代模拟运算</p><p>执行用时：0 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.3 MB, 在所有 Swift 提交中击败了70.83%的用户</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">tribonacci</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">n</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> t0 <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, t1 <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, t2 <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, t3 <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> n<span class="hljs-operator">-</span><span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> count <span class="hljs-operator">==</span> <span class="hljs-number">0</span> <span class="hljs-operator">||</span> count <span class="hljs-operator">==</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> count <span class="hljs-operator">==</span> <span class="hljs-operator">-</span><span class="hljs-number">2</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-keyword">while</span> count <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>            t3 <span class="hljs-operator">=</span> t0 <span class="hljs-operator">+</span> t1 <span class="hljs-operator">+</span> t2<br>            t0 <span class="hljs-operator">=</span> t1<br>            t1 <span class="hljs-operator">=</span> t2<br>            t2 <span class="hljs-operator">=</span> t3<br>            count <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> t3<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>457. 环形数组是否存在循环</title>
    <link href="/2021/08/08/leetcode/circleArray/"/>
    <url>/2021/08/08/leetcode/circleArray/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/circular-array-loop/">https://leetcode-cn.com/problems/circular-array-loop/</a></p><p>执行用时：72 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.5 MB, 在所有 Swift 提交中击败了100.00%的用户</p><p>快慢指针终会相遇，参考了官方题解</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">circularArrayLoop</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">next</span>(<span class="hljs-params">cur</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span>&#123;<br>            <span class="hljs-keyword">return</span> ((cur<span class="hljs-operator">+</span>nums[cur])<span class="hljs-operator">%</span>n <span class="hljs-operator">+</span> n) <span class="hljs-operator">%</span> n  <span class="hljs-comment">//保证落在0-n上</span><br>        &#125;<br>        <span class="hljs-keyword">let</span> n <span class="hljs-operator">=</span> nums.count<br>        <br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,fast <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            slow <span class="hljs-operator">=</span> i<br>            <span class="hljs-comment">//表示nums[i]移动后的位置</span><br>            fast <span class="hljs-operator">=</span> next(cur: slow)<br>            <span class="hljs-comment">//确保所处位置上的元素和起点都是相同符号</span><br>            <span class="hljs-keyword">while</span> nums[fast]<span class="hljs-operator">*</span>nums[i] <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> nums[next(cur: fast)] <span class="hljs-operator">*</span> nums[i] <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>                <span class="hljs-keyword">if</span> fast <span class="hljs-operator">==</span> slow &#123;<br>                    <span class="hljs-keyword">if</span> slow <span class="hljs-operator">==</span> next(cur: slow) &#123;    <span class="hljs-comment">//判断是否回到自身</span><br>                        <span class="hljs-keyword">break</span><br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>                &#125;<br>                slow <span class="hljs-operator">=</span> next(cur: slow)  <br>                fast <span class="hljs-operator">=</span> next(cur: next(cur: fast))<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>611. 有效三角形的个数</title>
    <link href="/2021/08/04/leetcode/valid-triangle/"/>
    <url>/2021/08/04/leetcode/valid-triangle/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/valid-triangle-number/">https://leetcode-cn.com/problems/valid-triangle-number/</a><br>执行用时：128 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.7 MB, 在所有 Swift 提交中击败了40.00%的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>1，先将数组升序排列，外层循环i递增，每次向后扫描的数即还未进行比较的第三条边<br>2，第三条边之前一个数为第二条边，就是右指针所在位置，即右边界<br>3，左指针总是从最左边开始，作为比较的第一条边，即左边界<br>4，从左开始比较，需要满足三角形条件两边之和大于第三边，由于是升序，当符合条件时，<br>从左指针开始的位置到右指针前的数，它们加上第二条边都大于第三边<br>5，所以边界作差即为有效个数。<br>6，此时右指针向左移动，修改为要比较的第二条边，<br>如果和左指针重合说明左边的数都已比较，就会退出循环进入下一轮外循环扫描新的边。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">triangleNumber</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> nums.count <span class="hljs-operator">&lt;</span> <span class="hljs-number">3</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> &#125;<br>        <span class="hljs-keyword">var</span> sortnum <span class="hljs-operator">=</span> nums<br>        sortnum.sort()<br>        <span class="hljs-keyword">let</span> len <span class="hljs-operator">=</span> nums.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> left <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> right <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> count <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">2</span> <span class="hljs-operator">...</span> len &#123;<br>            right <span class="hljs-operator">=</span> i <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>            left <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> left <span class="hljs-operator">&lt;</span> right &#123;<br>                <span class="hljs-keyword">if</span> sortnum[left] <span class="hljs-operator">+</span> sortnum[right] <span class="hljs-operator">&gt;</span> sortnum[i]&#123;<br>                    count <span class="hljs-operator">+=</span> right <span class="hljs-operator">-</span> left<br>                    right <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    left <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>java时间给的时间多，略有区别，当一二条边重合时，固定第二条边，向后移动第三条边。<br>当第三条边走过末尾时，使得第二条边往后，此时后一位数位第三条边。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">triangleNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len = nums.length;<br>        <span class="hljs-keyword">if</span>(len &lt; <span class="hljs-number">3</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> a =<span class="hljs-number">0</span>,b=<span class="hljs-number">1</span>,c=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (b!=len-<span class="hljs-number">1</span>) &#123;      <span class="hljs-comment">//走到最后一个下标时即全部访问完</span><br>            <span class="hljs-keyword">while</span> (a != b) &#123;    <span class="hljs-comment">//第一条边和第二条边尚未重合</span><br>                <span class="hljs-keyword">if</span> (nums[a] + nums[b] &gt; nums[c]) &#123;<br>                    res = res + b - a;      <span class="hljs-comment">//边界之差</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                a += <span class="hljs-number">1</span>;     <span class="hljs-comment">//向后移动第一条边</span><br>            &#125;<br>            a = <span class="hljs-number">0</span>;          <span class="hljs-comment">//第一条边从起点开始</span><br>            c += <span class="hljs-number">1</span>;         <span class="hljs-comment">//向后移动第三条边</span><br>            <span class="hljs-keyword">if</span> (c == len) &#123; <span class="hljs-comment">//第三条边下标在加1后等于数组长度即越界</span><br>                b += <span class="hljs-number">1</span>;     <span class="hljs-comment">//向后移动第二条边</span><br>                c = b + <span class="hljs-number">1</span>;  <span class="hljs-comment">//向后移动第三条边</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>581. 最短无序连续子数组</title>
    <link href="/2021/08/03/leetcode/shortest-unsorted/"/>
    <url>/2021/08/03/leetcode/shortest-unsorted/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/">https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/</a></p><p>执行用时：264 ms, 在所有 Swift 提交中击败了70.59%的用户<br>内存消耗：14.1 MB, 在所有 Swift 提交中击败了29.41%的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>找到左边和右边从升序变为降序的边界，中间数组的最小值应该大于左边数组的最大值，中间数组的最大值要大于右边数组的最小值。<br>从左边界开始向前走，遇到大于中间数组最小值的数则需要被升序排序，左边界延长。<br>从右边界开始向后走，遇到小于中间数组最大值的数则需要被升序排序，右边界延长。<br>都符合条件时，一开始的左右边界长度就是连续子列的长度</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findUnsortedSubarray</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> nums.count <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-keyword">let</span> len <span class="hljs-operator">=</span> nums.count<br>        <span class="hljs-comment">//判断是否默认升序</span><br>        <span class="hljs-keyword">var</span> up <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> len <span class="hljs-operator">-</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">if</span> nums[i] <span class="hljs-operator">&lt;=</span> nums[i<span class="hljs-operator">+</span><span class="hljs-number">1</span>] &#123;<br>                up <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> up <span class="hljs-operator">==</span> len <span class="hljs-operator">-</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-comment">//寻找左右升序的边界</span><br>        <span class="hljs-keyword">var</span> left <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> right <span class="hljs-operator">=</span> len <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> len <span class="hljs-operator">-</span> <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">if</span> nums[i] <span class="hljs-operator">&gt;</span> nums[i<span class="hljs-operator">+</span><span class="hljs-number">1</span>] &#123;<br>                left <span class="hljs-operator">=</span> i<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> j <span class="hljs-operator">=</span> len <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> j<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">if</span> nums[j<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">&gt;</span> nums[j] &#123;<br>                right <span class="hljs-operator">=</span> j<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-comment">//相等时右边界移动</span><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[j<span class="hljs-operator">-</span><span class="hljs-number">1</span>] <span class="hljs-operator">==</span> nums[j]&#123;<br>                right <span class="hljs-operator">=</span> j<br>            &#125;<br>            j <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br><br>        <span class="hljs-comment">//寻找最值</span><br>        <span class="hljs-keyword">var</span> midArray <span class="hljs-operator">=</span> nums[left<span class="hljs-operator">...</span>right]<br>        <span class="hljs-keyword">let</span> mid <span class="hljs-operator">=</span> midArray.sorted()<br>        <span class="hljs-keyword">let</span> midEnd <span class="hljs-operator">=</span> midArray.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-type">L</span> <span class="hljs-operator">=</span> left <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-type">R</span> <span class="hljs-operator">=</span> right <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>        <span class="hljs-comment">//从右边界开始向后走，遇到小于中间数组最大值的数则需要被升序排序，右边界延长。</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-type">R</span> <span class="hljs-operator">!=</span> len  &#123;<br>            <span class="hljs-keyword">if</span> mid[midEnd] <span class="hljs-operator">&gt;</span> nums[<span class="hljs-type">R</span>] &#123;<br>                right <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>            <span class="hljs-type">R</span> <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-comment">//从左边界开始向前走，遇到大于中间数组最小值的数则需要被升序排序，左边界延长。</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-type">L</span> <span class="hljs-operator">!=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">if</span> mid[<span class="hljs-number">0</span>] <span class="hljs-operator">&lt;</span> nums[<span class="hljs-type">L</span>] &#123;<br>                left <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;<br>            <span class="hljs-type">L</span> <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> right <span class="hljs-operator">-</span> left <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种解法：<br>将数组拷贝一份升序排序后，遍历原数组，相同位置值相等时说明已经是升序，left 和 right 最后停在需要排序的区间上。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findUnsortedSubarray</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> sortNums <span class="hljs-operator">=</span> nums.sorted()<br>        <span class="hljs-keyword">var</span> left <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right <span class="hljs-operator">=</span> nums.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left <span class="hljs-operator">&lt;=</span> right <span class="hljs-operator">&amp;&amp;</span> nums[left] <span class="hljs-operator">==</span> sortNums[left] &#123;<br>            left <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">while</span> right <span class="hljs-operator">&gt;=</span> left <span class="hljs-operator">&amp;&amp;</span> nums[right] <span class="hljs-operator">==</span> sortNums[right] &#123;<br>            right <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> right <span class="hljs-operator">-</span> left <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>743. 网络延迟时间</title>
    <link href="/2021/08/02/leetcode/743network-delay/"/>
    <url>/2021/08/02/leetcode/743network-delay/</url>
    
    <content type="html"><![CDATA[<p>执行用时：412 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.9 MB, 在所有 Swift 提交中击败了100.00%的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>每次找最短路径，到其他各点的最短路径中的最大值也就是消息能发到的最少时间<br>如果还有一个正无穷也就是到不了的距离,说明无法全部送到</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">networkDelayTime</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">times</span>: [[<span class="hljs-type">Int</span>]], <span class="hljs-keyword">_</span> <span class="hljs-params">n</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">k</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">let</span> maxDist <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>.max<span class="hljs-operator">/</span><span class="hljs-number">2</span><br>        <br>        <span class="hljs-comment">//邻接矩阵存储边信息</span><br>        <span class="hljs-keyword">var</span> graph <span class="hljs-operator">=</span> [[<span class="hljs-type">Int</span>]](repeating: [<span class="hljs-type">Int</span>](repeating: maxDist, count: n), count: n)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> times.count &#123;<br>            <span class="hljs-comment">// 边序号从 0 开始</span><br>            <span class="hljs-keyword">let</span> x <span class="hljs-operator">=</span> times[i][<span class="hljs-number">0</span>] <span class="hljs-operator">-</span> <span class="hljs-number">1</span>, y <span class="hljs-operator">=</span> times[i][<span class="hljs-number">1</span>] <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>            graph[x][y] <span class="hljs-operator">=</span> times[i][<span class="hljs-number">2</span>]<br>        &#125;<br>        <span class="hljs-comment">// 从源点到某点的距离数组</span><br>        <span class="hljs-keyword">var</span> dist <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>](repeating: maxDist, count: n)<br>        <br>        <span class="hljs-comment">// 由于从 k 开始，所以该点距离设为 0，也即源点</span><br>        dist[k <span class="hljs-operator">-</span> <span class="hljs-number">1</span>] <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-comment">//表示节点是否被更新的数组</span><br>        <span class="hljs-keyword">var</span> used <span class="hljs-operator">=</span> [<span class="hljs-type">Bool</span>](repeating: <span class="hljs-literal">false</span>, count: n)<br>        <br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>            <span class="hljs-keyword">var</span> x <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>                <span class="hljs-comment">//x == -1说明是改变起点后(矩阵中换行了)</span><br>                <span class="hljs-comment">//寻找新dist中的最小值且未被访问过</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-operator">!</span>used[y] <span class="hljs-operator">&amp;&amp;</span> (x <span class="hljs-operator">==</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span> <span class="hljs-operator">||</span> dist[y] <span class="hljs-operator">&lt;</span> dist[x])) &#123;<br>                    x <span class="hljs-operator">=</span> y<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-comment">//更新该点到邻接点的距离</span><br>            used[x] <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> n &#123;<br>                dist[y] <span class="hljs-operator">=</span> <span class="hljs-built_in">min</span>(dist[y], dist[x] <span class="hljs-operator">+</span> graph[x][y])<br>            &#125;<br>            <br>        &#125;<br>        <span class="hljs-comment">//找到距离最远的点</span><br>        <span class="hljs-keyword">let</span> res <span class="hljs-operator">=</span> dist.max()<span class="hljs-operator">!</span><br>        <span class="hljs-keyword">return</span> res <span class="hljs-operator">==</span> maxDist <span class="hljs-operator">?</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span> : res<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>图论</tag>
      
      <tag>邻接矩阵</tag>
      
      <tag>Dijkstra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>328. 奇偶链表</title>
    <link href="/2021/08/02/leetcode/oddevenlinked/"/>
    <url>/2021/08/02/leetcode/oddevenlinked/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/odd-even-linked-list/">https://leetcode-cn.com/problems/odd-even-linked-list/</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>让奇数节点的指针指向偶数节点指针的下一个节点，移动奇数指针到这个新节点，<br>新节点的下一个指针也就是前面偶数节点的下一个，交替移动。<br>循环判断条件：偶数节点必然先达到链表尾部。<br>（增加判断even != nil 可以省略前面链表小于等于3的判断，因为1，2，3个节点时已经排好序了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">oddEvenList</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">if</span> head <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> head<span class="hljs-operator">?</span>.next <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> head<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span>&#123;<br>            <span class="hljs-keyword">return</span> head<br>        &#125;<br>        <span class="hljs-keyword">var</span> odd <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> even <span class="hljs-operator">=</span> head<span class="hljs-operator">?</span>.next<br>        <span class="hljs-keyword">var</span> evenHead <span class="hljs-operator">=</span> even<br>        <span class="hljs-keyword">while</span> even<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            odd<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> even<span class="hljs-operator">?</span>.next<br>            odd <span class="hljs-operator">=</span> odd<span class="hljs-operator">?</span>.next<br>            even<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> odd<span class="hljs-operator">?</span>.next<br>            even <span class="hljs-operator">=</span> even<span class="hljs-operator">?</span>.next<br>        &#125;<br>        odd<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> evenHead<br>        <span class="hljs-keyword">return</span> head<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">oddEvenList</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!head || !head-&gt;next) <span class="hljs-keyword">return</span> head;<br>        ListNode *odd = head;<br><br>        ListNode *even = head-&gt;next;<br>        ListNode *evenHead = even;<br>        <span class="hljs-keyword">while</span> (even &amp;&amp; even-&gt;next)&#123;<br>           odd-&gt;next = even-&gt;next;<br>           odd = odd-&gt;next;<br>           even-&gt;next = odd-&gt;next;<br>           even = even-&gt;next;<br>        &#125;<br>        odd-&gt;next = evenHead;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>链表</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>203. 移除链表元素</title>
    <link href="/2021/08/01/leetcode/203/"/>
    <url>/2021/08/01/leetcode/203/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">https://leetcode-cn.com/problems/remove-linked-list-elements/</a></p><p>执行用时：52 ms, 在所有 Swift 提交中击败了97.20%的用户<br>内存消耗：15.3 MB, 在所有 Swift 提交中击败了53.20%的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>两根指针效率和一根指针在这里差距不大，也挺好理解</p><p>一根指针的情况就是只有pre，判断pre.next的值，如果要删除，就使pre.next 指向删除节点的next也就是pre.next.next<br>两根指针的情况分析：<br>1，首先设置虚拟头节点<br>2，慢指针指向头节点，处于前一个位置<br>3，cur指针指向真实的头节点<br>4，当cur的节点值和传入的val相等时，向后移动cur<br>5，使前一个指针pre指向更新后的cur<br>6，如果不想等则pre 和 cur一起向后移动</p><h3 id="两根指针代码"><a href="#两根指针代码" class="headerlink" title="两根指针代码"></a>两根指针代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeElements</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> dummy <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>,head)<br>        <span class="hljs-keyword">var</span> pre <span class="hljs-operator">=</span> dummy<br>        <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> cur <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">if</span> cur<span class="hljs-operator">?</span>.val <span class="hljs-operator">==</span> val &#123;<br>                cur <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next<br>                pre.next <span class="hljs-operator">=</span> cur<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                cur <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next<br>                pre <span class="hljs-operator">=</span> pre.next<span class="hljs-operator">!</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：48 ms, 在所有 Swift 提交中击败了96.89%的用户<br>内存消耗：15.4 MB, 在所有 Swift 提交中击败了53.42%的用户</p><h3 id="一根指针代码"><a href="#一根指针代码" class="headerlink" title="一根指针代码"></a>一根指针代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeElements</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> dummy <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>, head)<br>        <span class="hljs-keyword">var</span> pre <span class="hljs-operator">=</span> dummy<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> cur <span class="hljs-operator">=</span> pre.next &#123;<br>            <span class="hljs-keyword">if</span> cur.val <span class="hljs-operator">==</span> val &#123;<br>                pre.next <span class="hljs-operator">=</span> cur.next<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                pre <span class="hljs-operator">=</span> cur<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1337. 矩阵中战斗力最弱的 K 行</title>
    <link href="/2021/08/01/leetcode/the-k/"/>
    <url>/2021/08/01/leetcode/the-k/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/">https://leetcode-cn.com/problems/the-k-weakest-rows-in-a-matrix/</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>执行用时：76 ms, 在所有 Swift 提交中击败了100.00%的用户<br>内存消耗：13.8 MB, 在所有 Swift 提交中击败了100.00%的用户</p><p>在按行统计每行士兵数量的数组中，下标即原矩阵的行数，用对应值在另一个排序后的数组匹配，<br>匹配成功时的下标就是顺序数组的下标。修改统计数组中的值，下次再匹配到相同的值也就是之后的行数。</p><p>1，先统计矩阵每一行1的数量，记录到第一个数组diff<br>2，拷贝到新数组copy<br>3，给diff数组排序<br>4，初始化res数组<br>5，在copy这个按行顺序排列的数组中，寻找与排序后diff中相同的元素<br>6，找到后即修改顺序数组copy中的元素值，避免重复匹配，记录下标，跳出循环，<br>7，i向后移动，用diff中下一个元素继续在顺序数组copy中匹配</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">kWeakestRows</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">mat</span>: [[<span class="hljs-type">Int</span>]], <span class="hljs-keyword">_</span> <span class="hljs-params">k</span>: <span class="hljs-type">Int</span>)</span> -&gt; [<span class="hljs-type">Int</span>] &#123;<br>        <span class="hljs-keyword">var</span> diff <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>](repeating: <span class="hljs-number">0</span>, count: mat.count)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> mat.count &#123;<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> mat[i].count &#123;<br>                <span class="hljs-keyword">if</span> mat[i][j] <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>                    diff[i] <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> copy <span class="hljs-operator">=</span> diff<br>        diff.sort()<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>](repeating: <span class="hljs-number">0</span>, count: k)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> k &#123;<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> diff.count &#123;<br>                <span class="hljs-keyword">if</span> copy[j] <span class="hljs-operator">==</span> diff [i] &#123;<br>                    copy[j] <span class="hljs-operator">=</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>                    res[i] <span class="hljs-operator">=</span> j<br>                    <span class="hljs-keyword">break</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19. 删除链表的倒数第 N 个结点</title>
    <link href="/2021/07/31/leetcode/remove-nth-node/"/>
    <url>/2021/07/31/leetcode/remove-nth-node/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/</a><br>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户<br>内存消耗：10.3 MB, 在所有 C++ 提交中击败了75.79%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        ListNode *fast = head;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (fast-&gt;next)&#123;<br>            fast = fast-&gt;next;<br>            count++;    <span class="hljs-comment">//最后一个节点前的节点数</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(count + <span class="hljs-number">1</span> == n)&#123;<br>            head = head-&gt;next;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            count = count  - n;<br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span> &amp;&amp; n == <span class="hljs-number">1</span>)&#123;<br>                head-&gt;next = <span class="hljs-literal">NULL</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                fast = head;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count; ++i) &#123;<br>                    fast = fast-&gt;next;<br>                &#125;<br>                fast-&gt;next = fast-&gt;next-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>设置慢指针指向头节点之前的新节点，当快指针先走n步后，和慢指针中间就隔了n个节点。<br>同时开始移动，当快指针移动到最后一个节点之后的空节点时，慢指针后面有n个节点，<br>于是倒数第n个节点就是慢指针后面的那个节点。</p><p>当链表中只有一个节点时，因为头节点前还一个节点，末尾又有一个节点，<br>删除唯一的节点时，就产生了和普通情况下删除中间节点一样的条件。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>执行用时：4 ms, 在所有 Swift 提交中击败了98.73%的用户<br>内存消耗：13.6 MB, 在所有 Swift 提交中击败了37.06%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeNthFromEnd</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">n</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> beforeHead <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>, head)<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> beforeHead, fast <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>n &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<br>        &#125;<br>        <span class="hljs-keyword">while</span> fast <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<br>            slow <span class="hljs-operator">=</span> slow.next <span class="hljs-operator">??</span> beforeHead<br>        &#125;<br>        slow.next <span class="hljs-operator">=</span> slow.next<span class="hljs-operator">?</span>.next<br>        <span class="hljs-keyword">return</span> beforeHead.next<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>242. 有效的字母异位词</title>
    <link href="/2021/07/31/leetcode/validanagram/"/>
    <url>/2021/07/31/leetcode/validanagram/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/valid-anagram/">https://leetcode-cn.com/problems/valid-anagram/</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>执行用时：16 ms, 在所有 Swift 提交中击败了99.02%的用户<br>内存消耗：14 MB, 在所有 Swift 提交中击败了78.43%的用户</p><p>排序字符串 或者 计数器<br>因为C++中 只要-‘a’就转换成整数了，结果swift就卡在了讲a转为可运算的整数这里，参考了楼上的计数器题解</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isAnagram</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-type">String</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">t</span>: <span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> s.count <span class="hljs-operator">!=</span> t.count &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-comment">// 都是小写字母，设定26个0</span><br>        <span class="hljs-keyword">var</span> arr <span class="hljs-operator">=</span> [<span class="hljs-type">Int</span>](repeating: <span class="hljs-number">0</span>, count: <span class="hljs-number">26</span>)<br>        <span class="hljs-keyword">let</span> aChar <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(<span class="hljs-string">&quot;a&quot;</span>.unicodeScalars.first<span class="hljs-operator">!</span>.value)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s.unicodeScalars &#123;<br>            arr[<span class="hljs-type">Int</span>(i.value) <span class="hljs-operator">-</span> aChar] <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> t.unicodeScalars &#123;<br>            arr[<span class="hljs-type">Int</span>(j.value) <span class="hljs-operator">-</span> aChar] <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-comment">//遇到第一个小于0的说明该字符在另一串中没有出现过</span><br>        <span class="hljs-keyword">if</span> arr.first(where: &#123;<span class="hljs-variable">$0</span> <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span> &#125;) <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行用时：4 ms, 在所有 Swift 提交中击败了97.63%的用户<br>内存消耗：7.1 MB, 在所有 Swift 提交中击败了70.26%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isAnagram</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">length</span>() != t.<span class="hljs-built_in">length</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> arr[<span class="hljs-number">26</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>            arr[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>            arr[t[i]-<span class="hljs-string">&#x27;a&#x27;</span>]--;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>字符串</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>160. 相交链表</title>
    <link href="/2021/07/30/leetcode/intersectionTwo/"/>
    <url>/2021/07/30/leetcode/intersectionTwo/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p><p>执行用时：268 ms, 在所有 Swift 提交中击败了95.76%的用户<br>内存消耗：16.7 MB, 在所有 Swift 提交中击败了40.39%的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>重点在于理清某一指针走到尾部时要放到另一条链表的头部，搭配官方题解更容易理解</p><p>1，先对链表进行判空，链表任意一个为空节点就不会相交<br>2，设定两个指针指向各自头节点<br>3，关键在于相遇节点时，p1经过了x长度，p2经过了y长度，余下要走的长度都是z<br>4，当x&lt;y时, 那么先走完z的指针一定是p1，使它回到较长的那条链表的头节点<br>5，此时仍在较长链表的p2 距离走到尾部剩余的长度就是 y-x<br>6，p1和p2继续移动，当p2走到末尾，使其回到较短链表的头节点，那它距离相遇点的长度就是x<br>7，此时p1也经过了y-x的距离，最后两指针都经过x长度，p1就是 y-x+x = y 到达相遇点<br>8，如果没有相交点，指针将会同时走到y长度的终点，也就是链表尾部，返回的就是空指针</p><p>使用双层for循环会超时，C++可以. 还可以使用哈希表存储访问过的节点地址。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>Swift</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getIntersectionNode</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">headA</span>: <span class="hljs-type">ListNode</span>?, <span class="hljs-keyword">_</span> <span class="hljs-params">headB</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">if</span> headA <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> headB <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> p1 <span class="hljs-operator">=</span> headA<br>        <span class="hljs-keyword">var</span> p2 <span class="hljs-operator">=</span> headB<br>        <span class="hljs-keyword">while</span> p1 <span class="hljs-operator">!==</span> p2 &#123;<br>            p1 <span class="hljs-operator">=</span> p1 <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">?</span> headB : p1<span class="hljs-operator">?</span>.next<br>            p2 <span class="hljs-operator">=</span> p2 <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">?</span> headA : p2<span class="hljs-operator">?</span>.next<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> p1<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ 快慢指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (headA == <span class="hljs-literal">nullptr</span> || headB == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>        ListNode *p = headA, *q = headB;<br>        <span class="hljs-keyword">while</span>(p != q)&#123;<br>           q = q == <span class="hljs-literal">nullptr</span> ? headA : q-&gt;next;<br>           p = p == <span class="hljs-literal">nullptr</span> ? headB : p-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>C++ 暴力循环</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span>&#123;<br>        ListNode *up = headA;<br>        ListNode *down = headB;<br>        <span class="hljs-keyword">while</span> (up != <span class="hljs-literal">nullptr</span>)&#123;<br>            down = headB;<br>            <span class="hljs-keyword">while</span> (down != <span class="hljs-literal">nullptr</span>)&#123;<br>                <span class="hljs-keyword">if</span>(down == up)&#123;<br>                    <span class="hljs-keyword">return</span> up;<br>                &#125;<br>                down = down-&gt;next;<br>            &#125;<br>            up = up-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>142. 环形链表 II</title>
    <link href="/2021/07/29/leetcode/circleLinked2/"/>
    <url>/2021/07/29/leetcode/circleLinked2/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">https://leetcode-cn.com/problems/linked-list-cycle-ii/</a></p><p>解释来自于魏梦舒的《算法漫画》，简单概括成文字<br>（头节点）————D——（入环点）———S1———（首次相遇点）————S2————（回到入环点）<br>距离分别为 D S1 S2<br>1，慢指针每次走一步，到达相遇点时经过了 D+S1的距离<br>2，快指针每次走两步，当它到第一次到相遇点时经过了D+S1的距离，但是此时慢指针还未达到相遇点<br>3，所以它会一直在环里打圈，大概是n圈后才等到慢指针到达相遇点，环的长度一圈为S1+S2，那么快指针走过的总长度就是D+S1+n（S1+S2）<br>4，因为快指针速度是慢指针的两倍，同时出发经过相同时间，快指针走过的距离即慢指针的两倍<br>5，可以推出 2(D+S1) = D+S1+n(S1+S2)<br>6，整理后即为 D = (n-1)(S1+S2)+S2<br>7，D的距离就是从头节点到入环点的距离，等于经过（n-1）圈再加上S2的距离<br>8，假设经过1圈相遇，D = S2，此时慢指针从相遇点开始移动，快指针回到头节点向后移动，相等时即为入环点</p><p>无论是多少圈，等式右边表示慢指针之后将要移动的距离，都等于等式左边的D，遍历完D的长度就到了入环点。<br>注意判断传入的空链表和长度为1的链表。</p><p>执行用时：52 ms, 在所有 Swift 提交中击败了95.43%的用户<br>内存消耗：14.9 MB, 在所有 Swift 提交中击败了77.14%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">detectCycle</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> fast <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> fast <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">&amp;&amp;</span> fast<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next<br>            slow <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>            <span class="hljs-keyword">if</span> fast <span class="hljs-operator">===</span> slow &#123;<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> fast <span class="hljs-operator">===</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> fast<span class="hljs-operator">?</span>.next <span class="hljs-operator">===</span> <span class="hljs-literal">nil</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>&#125;<br>        fast <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> fast <span class="hljs-operator">!==</span> slow &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<br>            slow <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>        &#125;<br>        <span class="hljs-keyword">return</span> fast<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：8 ms, 在所有 C++ 提交中击败了88.53%的用户<br>内存消耗：7.5 MB, 在所有 C++ 提交中击败了63.93%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        ListNode *fast = head;<br>        ListNode *slow = head;<br>        <span class="hljs-keyword">while</span> (fast &amp;&amp; fast-&gt;next)&#123;<br>            fast = fast-&gt;next-&gt;next;<br>            slow = slow-&gt;next;<br>            <span class="hljs-keyword">if</span> (slow == fast)&#123;<span class="hljs-keyword">break</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (fast == <span class="hljs-literal">NULL</span> || fast-&gt;next == <span class="hljs-literal">NULL</span> )&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;<br>        fast = head;<br>        <span class="hljs-keyword">while</span> (fast != slow)&#123;<br>            fast = fast-&gt;next;<br>            slow = slow-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fast;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>141. 环形链表</title>
    <link href="/2021/07/29/leetcode/circleLinke/"/>
    <url>/2021/07/29/leetcode/circleLinke/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/linked-list-cycle/">https://leetcode-cn.com/problems/linked-list-cycle/</a><br>类比于操场跑步。快指针每次走两步，慢指针每次走一步，如果存在环，快指针一定会与慢指针相遇。</p><p>执行用时：64 ms, 在所有 Swift 提交中击败了96.77%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasCycle</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> head <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> fast <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> fast <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">&amp;&amp;</span> fast<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next<br>            slow <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>            <span class="hljs-keyword">if</span> fast <span class="hljs-operator">===</span> slow &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>除了用map来存指针地址之外，题目val的值是有范围的，所以将访问过的值修改为区间以外的即可当作标志。<br>下次访问时若值为这个标志说明指针已经指回到了前面访问过的节点。</p><p>执行用时：68 ms, 在所有 Swift 提交中击败了88.17%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hasCycle</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> head <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>&#125;<br>        <span class="hljs-keyword">var</span> fast <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> fast <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">&amp;&amp;</span> fast<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            fast <span class="hljs-operator">=</span> fast<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next<br>            slow <span class="hljs-operator">=</span> slow<span class="hljs-operator">?</span>.next<br>            <span class="hljs-keyword">if</span> fast <span class="hljs-operator">===</span> slow &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：4 ms, 在所有 C++ 提交中击败了99.77%的用户<br>内存消耗：8 MB, 在所有 C++ 提交中击败了30.61%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        ListNode *point = head;<br>        <span class="hljs-keyword">while</span> (point-&gt;next != <span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-keyword">if</span> (point-&gt;val == <span class="hljs-number">100001</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            point-&gt;val = <span class="hljs-number">100001</span>;<br>            point = point-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7. 整数反转</title>
    <link href="/2021/07/27/leetcode/reverseInt/"/>
    <url>/2021/07/27/leetcode/reverseInt/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-integer/">https://leetcode-cn.com/problems/reverse-integer/</a><br>执行用时：0 ms, 在所有 C++ 提交中击败了100.00%的用户<br>内存消耗：5.8 MB, 在所有 C++ 提交中击败了51.54%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (x!=<span class="hljs-number">0</span>)&#123;<br>            res = res*<span class="hljs-number">10</span> + x%<span class="hljs-number">10</span>;<br>            x /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (res&gt;<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>)<span class="hljs-number">-1</span> || res&lt;(<span class="hljs-built_in">pow</span>(<span class="hljs-number">-2</span>,<span class="hljs-number">31</span>)))&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时： 4 ms , 在所有 Swift 提交中击败了 95.41% 的用户<br>内存消耗:13.7 MB , 在所有 Swift 提交中击败了 25.63% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverse</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">x</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> value <span class="hljs-operator">=</span> x<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> value <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<br>            res <span class="hljs-operator">=</span> res<span class="hljs-operator">*</span><span class="hljs-number">10</span> <span class="hljs-operator">+</span> value<span class="hljs-operator">%</span><span class="hljs-number">10</span><br>            <span class="hljs-keyword">if</span> res <span class="hljs-operator">&gt;</span> <span class="hljs-type">Int32</span>.max <span class="hljs-operator">||</span> res <span class="hljs-operator">&lt;</span> <span class="hljs-type">Int32</span>.min &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            &#125;<br>            value <span class="hljs-operator">/=</span> <span class="hljs-number">10</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9. 回文数</title>
    <link href="/2021/07/27/leetcode/huinum/"/>
    <url>/2021/07/27/leetcode/huinum/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/palindrome-number/">https://leetcode-cn.com/problems/palindrome-number/</a><br>执行用时：32 ms, 在所有 Swift 提交中击败了97.60%的用户<br>内存消耗: 13.6MB, 在所有 Swift 提交中击败了81.97%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isPalindrome</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">x</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-keyword">if</span> x <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> value <span class="hljs-operator">=</span> x<br>        <span class="hljs-keyword">var</span> res <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> value <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>            res <span class="hljs-operator">=</span> res<span class="hljs-operator">*</span><span class="hljs-number">10</span> <span class="hljs-operator">+</span> (value <span class="hljs-operator">%</span> <span class="hljs-number">10</span>)<br>            value <span class="hljs-operator">/=</span> <span class="hljs-number">10</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> res <span class="hljs-operator">==</span> x<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>回文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>707. 设计链表</title>
    <link href="/2021/07/24/leetcode/designLinkedList/"/>
    <url>/2021/07/24/leetcode/designLinkedList/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/design-linked-list/">https://leetcode-cn.com/problems/design-linked-list/</a><br>执行用时：340 ms, 在所有 Swift 提交中击败了55.54%的用户<br>内存消耗：14.1 MB, 在所有 Swift 提交中击败了80.33%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedList</span> </span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span> </span>&#123;<br>        <span class="hljs-keyword">var</span> element: <span class="hljs-type">Int</span>        <span class="hljs-comment">//元素值</span><br>        <span class="hljs-keyword">var</span> next: <span class="hljs-type">ListNode</span>?     <span class="hljs-comment">//下个节点</span><br>        <span class="hljs-function"><span class="hljs-keyword">init</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">element</span>: <span class="hljs-type">Int</span>)</span> &#123;  <span class="hljs-comment">//初始化传值</span><br>            <span class="hljs-keyword">self</span>.element <span class="hljs-operator">=</span> element<br>            <span class="hljs-keyword">self</span>.next <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> head: <span class="hljs-type">ListNode</span>?<br>    <span class="hljs-keyword">var</span> size: <span class="hljs-type">Int</span><br>    <span class="hljs-comment">/** Initialize your data structure here. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">init</span>()</span> &#123;<br>        head <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>)  <span class="hljs-comment">//初始化头节点</span><br>        size <span class="hljs-operator">=</span> <span class="hljs-number">0</span>            <span class="hljs-comment">//长度</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">get</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">index</span>: <span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">if</span> index <span class="hljs-operator">&gt;</span> (size<span class="hljs-operator">-</span><span class="hljs-number">1</span>) <span class="hljs-operator">||</span> index <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span>  &#123; <br>            <span class="hljs-keyword">return</span> <span class="hljs-operator">-</span><span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> head<span class="hljs-operator">?</span>.next    <span class="hljs-comment">//指向头节点后的第一个节点</span><br>        <span class="hljs-keyword">var</span> step <span class="hljs-operator">=</span> index<br>        <span class="hljs-keyword">while</span> step <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>            cur <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next     <span class="hljs-comment">//指针向后移动</span><br>            step <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> cur<span class="hljs-operator">!</span>.element     <span class="hljs-comment">//返回当前节点元素</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addAtHead</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> &#123;    <span class="hljs-comment">//头插法</span><br>        <span class="hljs-keyword">let</span> cur <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(val)     <span class="hljs-comment">//初始化给新节点赋值</span><br>        cur.next <span class="hljs-operator">=</span> head<span class="hljs-operator">?</span>.next       <span class="hljs-comment">//当前插入节点指向第一个节点</span><br>        head<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> cur            <span class="hljs-comment">//移动头节点指向插入节点</span><br>        size <span class="hljs-operator">+=</span> <span class="hljs-number">1</span>                   <span class="hljs-comment">//长度+1</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/** Append a node of value val to the last element of the linked list. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addAtTail</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        <span class="hljs-keyword">let</span> cur <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(val)<br>        <span class="hljs-keyword">var</span> tail <span class="hljs-operator">=</span> head                 <span class="hljs-comment">//尾指针指向头节点</span><br>        <span class="hljs-keyword">while</span> ((tail<span class="hljs-operator">!</span>.next) <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span>) &#123;   <span class="hljs-comment">//判断是否在尾部</span><br>            tail <span class="hljs-operator">=</span> tail<span class="hljs-operator">?</span>.next<br>        &#125;<br>        cur.next <span class="hljs-operator">=</span> tail<span class="hljs-operator">!</span>.next           <span class="hljs-comment">//插入节点指向空</span><br>        tail<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> cur                <span class="hljs-comment">//当前最后一个尾节点指向插入节点</span><br>        size <span class="hljs-operator">+=</span> <span class="hljs-number">1</span>                       <span class="hljs-comment">//长度+1</span><br>    &#125;<br>    <br>    <span class="hljs-comment">/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addAtIndex</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">index</span>: <span class="hljs-type">Int</span>, <span class="hljs-keyword">_</span> <span class="hljs-params">val</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> index <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> index <span class="hljs-operator">&lt;=</span> size &#123;        <span class="hljs-comment">//判断插入索引是否在有效区间</span><br>            <span class="hljs-keyword">let</span> newNode <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(val)         <span class="hljs-comment">//创建新节点并赋值</span><br>            <span class="hljs-keyword">var</span> pre <span class="hljs-operator">=</span> head                      <span class="hljs-comment">//定义一个指针来移动找到插入位置</span><br>            <span class="hljs-keyword">var</span> step <span class="hljs-operator">=</span> index<br>            <span class="hljs-keyword">while</span> step <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;<br>                pre <span class="hljs-operator">=</span> pre<span class="hljs-operator">?</span>.next                 <br>                step <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>            &#125;                                   <span class="hljs-comment">//插入前index所指位置为pre所指下一个节点</span><br>            newNode.next <span class="hljs-operator">=</span> pre<span class="hljs-operator">?</span>.next            <span class="hljs-comment">//插入节点指向pre后一个节点</span><br>            pre<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> newNode                 <span class="hljs-comment">//pre指向新插入节点</span><br>            size <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/** Delete the index-th node in the linked list, if the index is valid. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteAtIndex</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">index</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span>) <span class="hljs-operator">||</span> (index <span class="hljs-operator">&gt;=</span> size) &#123;     <span class="hljs-comment">//判断索引是否在有效区间</span><br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> pre <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> step <span class="hljs-operator">=</span> index<br>        <span class="hljs-keyword">while</span> step <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> &#123;                       <span class="hljs-comment">//移动指针到指定删除位置前一个节点处</span><br>            pre <span class="hljs-operator">=</span> pre<span class="hljs-operator">?</span>.next<br>            step <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>        pre<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> pre<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next            <span class="hljs-comment">//将要删除节点处的下一处节点位置赋给前一个节点的指针</span><br>        size <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行用时：32 ms, 在所有 C++ 提交中击败了99.11% 的用户<br>内存消耗：19.1 MB, 在所有 C++ 提交中击败了45.07% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedList</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/** Initialize your data structure here. */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SinglyListNode</span> &#123;</span><br>        <span class="hljs-keyword">int</span> val;<br>        SinglyListNode *next;<br>        <span class="hljs-built_in">SinglyListNode</span>(<span class="hljs-keyword">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>    &#125;;<br>    SinglyListNode *head;<br>    <span class="hljs-keyword">int</span> size;<br>    <span class="hljs-built_in">MyLinkedList</span>() &#123;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SinglyListNode</span>(<span class="hljs-number">0</span>);<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index &gt; (size<span class="hljs-number">-1</span>) || index &lt;<span class="hljs-number">0</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<br>        SinglyListNode *cur = head-&gt;next;<br>        <span class="hljs-keyword">while</span> (index--) cur = cur-&gt;next;<br>        <span class="hljs-keyword">return</span> cur-&gt;val;<br>    &#125;<br><br>    <span class="hljs-comment">/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addAtHead</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        SinglyListNode *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SinglyListNode</span>(val);<br>        node-&gt;next = head-&gt;next;<br>        head-&gt;next = node;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">/** Append a node of value val to the last element of the linked list. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addAtTail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        SinglyListNode *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SinglyListNode</span>(val);<br>        SinglyListNode *tail = head;<br>        <span class="hljs-keyword">while</span> (tail-&gt;next) tail = tail-&gt;next;<br>        node-&gt;next = tail-&gt;next;<br>        tail-&gt;next = node;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-comment">/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addAtIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index &gt;=<span class="hljs-number">0</span> &amp;&amp; index &lt;= size) &#123;<br>            SinglyListNode *node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SinglyListNode</span>(val);<br>            SinglyListNode *cur = head;<br>            <span class="hljs-keyword">while</span> (index--) cur = cur-&gt;next;<br>            node-&gt;next = cur-&gt;next;<br>            cur-&gt;next = node;<br>            size++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/** Delete the index-th node in the linked list, if the index is valid. */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span> || index &gt;= size) <span class="hljs-keyword">return</span> ;<br>        SinglyListNode *cur = head;<br>        <span class="hljs-keyword">while</span> (index--) cur = cur-&gt;next;<br>        cur-&gt;next = cur-&gt;next-&gt;next;<br>        size--;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>链表</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>283. 移动零</title>
    <link href="/2021/07/23/leetcode/283moveZero/"/>
    <url>/2021/07/23/leetcode/283moveZero/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/move-zeroes/">https://leetcode-cn.com/problems/move-zeroes/</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>slow 所指总是为0 ，fast 所指为非0元素，交换元素后，向后移动slow</p><p>执行用时：32 ms, 在所有 Swift 提交中击败了97.37%的用户<br>内存消耗：14.3 MB, 在所有 Swift 提交中击败了35.41%的用户</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">moveZeroes</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: <span class="hljs-keyword">inout</span> [<span class="hljs-type">Int</span>])</span> &#123;<br>        <span class="hljs-keyword">var</span> slow <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, fast <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> fast <span class="hljs-operator">&lt;</span> nums.count &#123;<br>            <span class="hljs-keyword">if</span> nums[fast] <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<br>                nums.swapAt(slow, fast)<br>                slow <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            &#125;<br>            fast <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：32 ms, 在所有 Swift 提交中击败了99.72%的用户<br>内存消耗：14 MB, 在所有 Swift 提交中击败了90.08%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">moveZeroes</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: <span class="hljs-keyword">inout</span> [<span class="hljs-type">Int</span>])</span> &#123;<br>        <span class="hljs-keyword">var</span>  fast <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>nums.count &#123;<br>            <span class="hljs-keyword">if</span> nums[i] <span class="hljs-operator">==</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> nums[fast] <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> &#123;<br>                fast <span class="hljs-operator">=</span> i<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> nums[i] <span class="hljs-operator">!=</span> <span class="hljs-number">0</span> <span class="hljs-operator">&amp;&amp;</span> nums[fast] <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                nums[fast] <span class="hljs-operator">=</span> nums[i]<br>                fast <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                nums[i] <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>26. 删除有序数组中的重复项</title>
    <link href="/2021/07/22/leetcode/removeDuplicate/"/>
    <url>/2021/07/22/leetcode/removeDuplicate/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/</a><br>执行用时：68 ms, 在所有 Swift 提交中击败了94.44%的用户<br>内存消耗：14.4 MB, 在所有 Swift 提交中击败了61.90%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeDuplicates</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: <span class="hljs-keyword">inout</span> [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> low <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> nums.isEmpty &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> <span class="hljs-operator">..&lt;</span> nums.count &#123;<br>            <span class="hljs-keyword">if</span> nums[low] <span class="hljs-operator">!=</span> nums[i] &#123;<br>                low <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>                nums[low] <span class="hljs-operator">=</span> nums[i]<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> low<span class="hljs-operator">+</span><span class="hljs-number">1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：4 ms, 在所有 C++ 提交中击败了99.00%的用户<br>内存消耗：17.8 MB, 在所有 C++ 提交中击败了16.35%的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">empty</span>()) &#123; <span class="hljs-keyword">return</span> low; &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (nums[low] != nums[i]) &#123;<br>                nums[++low] = nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> low + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>链表</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>153. 寻找旋转排序数组中的最小值</title>
    <link href="/2021/07/22/leetcode/findMin/"/>
    <url>/2021/07/22/leetcode/findMin/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/</a><br>二分法, 刚刚开始学习Swift<br>执行用时：16 ms, 在所有 Swift 提交中击败了88.24%的用户<br>内存消耗：13.7 MB, 在所有 Swift 提交中击败了50.98%的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findMin</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">nums</span>: [<span class="hljs-type">Int</span>])</span> -&gt; <span class="hljs-type">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> low <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> high <span class="hljs-operator">=</span> nums.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> low <span class="hljs-operator">&lt;</span> high &#123;<br>            <span class="hljs-keyword">var</span> pivot <span class="hljs-operator">=</span> low <span class="hljs-operator">+</span> (high <span class="hljs-operator">-</span> low)<span class="hljs-operator">/</span><span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[high] <span class="hljs-operator">&gt;</span> nums[pivot] &#123;<br>                high <span class="hljs-operator">=</span> pivot<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                low <span class="hljs-operator">=</span> pivot <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[low]<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>普通O(n)<br>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：37.9 MB, 在所有 Java 提交中击败了42.64% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findMin</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> min = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length-<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i]&gt;nums[i+<span class="hljs-number">1</span>])&#123;<br>                min = nums[i+<span class="hljs-number">1</span>];<br>                flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> min;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Swift</tag>
      
      <tag>二分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>557. 反转字符串中的单词 III</title>
    <link href="/2021/07/04/leetcode/reverseStr3/"/>
    <url>/2021/07/04/leetcode/reverseStr3/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/">https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/</a></p><p>执行用时：9 ms, 在所有 Java 提交中击败了48.91% 的用户<br>内存消耗：39.2 MB, 在所有 Java 提交中击败了31.61% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reverseWords</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        StringBuffer res = <span class="hljs-keyword">new</span> StringBuffer();<br>        s+=<span class="hljs-string">&quot; &quot;</span>;<br>        StringBuffer str = <span class="hljs-keyword">new</span> StringBuffer(s);<br>        str.reverse();<br>        <span class="hljs-keyword">int</span> last = str.length();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = str.length()-<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">0</span> ; i--) &#123;<br>            <span class="hljs-keyword">if</span> (str.charAt(i)!=<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                res.append(str.substring(i+<span class="hljs-number">1</span>,last));<br>                <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>) &#123;<br>                    res.append(<span class="hljs-string">&#x27; &#x27;</span>);<br>                &#125;<br>                last=i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>119. 杨辉三角 II</title>
    <link href="/2021/07/02/leetcode/yhtriangle2/"/>
    <url>/2021/07/02/leetcode/yhtriangle2/</url>
    
    <content type="html"><![CDATA[<p>执行用时：0 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：35.9 MB, 在所有 Java 提交中击败了90.20% 的用户<br>//把118的题里面的修改一下就通过了<br>//其实有线性递推的公式，看了官方题解才注意到。<br>题目链接：<a href="https://leetcode-cn.com/problems/pascals-triangle-ii/">https://leetcode-cn.com/problems/pascals-triangle-ii/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getRow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rowIndex)</span> </span>&#123;<br>        List&lt;Integer&gt; row = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        row.add(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= rowIndex; ++i) &#123;<br>            row.add((<span class="hljs-keyword">int</span>) ((<span class="hljs-keyword">long</span>) row.get(i - <span class="hljs-number">1</span>) * (rowIndex - i + <span class="hljs-number">1</span>) / i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> row;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getRow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rowIndex)</span> </span>&#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= rowIndex; i++) &#123;<br>            List&lt;Integer&gt; L = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || i == j) &#123;<br>                    L.add(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    L.add(res.get(i - <span class="hljs-number">1</span>).get(j - <span class="hljs-number">1</span>) + res.get(i - <span class="hljs-number">1</span>).get(j));<br>                &#125;<br>            &#125;<br>            res.add(L);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.get(rowIndex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>118. 杨辉三角</title>
    <link href="/2021/07/01/leetcode/yhtriangle1/"/>
    <url>/2021/07/01/leetcode/yhtriangle1/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/pascals-triangle/">https://leetcode-cn.com/problems/pascals-triangle/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="hljs-keyword">int</span> numRows) &#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numRows; i++) &#123;<br>            List&lt;Integer&gt; L = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> || i == j) &#123;<br>                    L.add(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    L.add(res.get(i - <span class="hljs-number">1</span>).get(j - <span class="hljs-number">1</span>) + res.get(i - <span class="hljs-number">1</span>).get(j));<br>                &#125;<br>            &#125;<br>            res.add(L);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>209. 长度最小的子数组</title>
    <link href="/2021/06/21/leetcode/MaxmiumSize/"/>
    <url>/2021/06/21/leetcode/MaxmiumSize/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">https://leetcode-cn.com/problems/minimum-size-subarray-sum/</a><br>执行用时：152 ms, 在所有 Java 提交中击败了10.69% 的用户<br>内存消耗：38.5 MB, 在所有 Java 提交中击败了33.53% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-keyword">int</span> target, <span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len=<span class="hljs-number">100001</span>;<br>        <span class="hljs-keyword">int</span> sum;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (target &lt;= nums[i]) &#123;<br>                len = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            sum=nums[i];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>; j&lt;nums.length;j++) &#123;<br>                sum +=nums[j];<br>                <span class="hljs-keyword">if</span> ( sum&gt;= target) &#123;<br>                    len = Math.min(len,j-i+<span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (len&lt;<span class="hljs-number">100001</span>)&#123;<br>            <span class="hljs-keyword">return</span> len;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>27. 移除元素</title>
    <link href="/2021/06/20/leetcode/removeElement/"/>
    <url>/2021/06/20/leetcode/removeElement/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/remove-element/">https://leetcode-cn.com/problems/remove-element/</a></p><p>执行用时：1 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：36.7 MB, 在所有 Java 提交中击败了96.64% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">int</span> right = nums.length-<span class="hljs-number">1</span>;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; nums.length; ++i)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i] !=val)&#123;<br>                count++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&lt;right)&#123;<br>                temp = nums[i];<br>                <span class="hljs-keyword">if</span> (nums[right]!=temp)&#123;<br>                    nums[i] = nums[right];<br>                    nums[right] = temp;<br>                    count++;<br>                &#125;<br>                right--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zoj4106 Lucky 7 in the Pocket</title>
    <link href="/2021/06/19/zoj/zoj4106/"/>
    <url>/2021/06/19/zoj/zoj4106/</url>
    
    <content type="html"><![CDATA[<p>模拟过程<br>Name    Result      Time(ms)    Memory(KB)<br>0        Accepted    5            440</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>  N;<br>    <span class="hljs-keyword">int</span> m,n;<br>    cin&gt;&gt;N;<br>    <span class="hljs-keyword">while</span> (N--)&#123;<br>        cin&gt;&gt;n;<br>        <span class="hljs-keyword">if</span> (n&lt;=<span class="hljs-number">7</span>)&#123;<br>            m=<span class="hljs-number">7</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n%<span class="hljs-number">7</span>==<span class="hljs-number">0</span>&amp;&amp;n%<span class="hljs-number">4</span>!=<span class="hljs-number">0</span>)&#123;<br>            m = n;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            m = (n/<span class="hljs-number">7</span>)*<span class="hljs-number">7</span>+<span class="hljs-number">7</span>;<br>            <span class="hljs-keyword">if</span> (m%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>)&#123;<br>                m = m+<span class="hljs-number">7</span>;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;m&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现规律<br>Name    Result        Time(ms)    Memory(KB)<br>0        Accepted    5            312</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>  N;<br>    <span class="hljs-keyword">int</span> m,n;<br>    cin&gt;&gt;N;<br>    <span class="hljs-keyword">while</span> (N--)&#123;<br>        cin&gt;&gt;n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &lt;= <span class="hljs-number">105</span>; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (i%<span class="hljs-number">7</span>==<span class="hljs-number">0</span> &amp;&amp; i%<span class="hljs-number">4</span>!=<span class="hljs-number">0</span>)&#123;<br>                cout&lt;&lt;i&lt;&lt;endl;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>zoj算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zoj4105 Abbreviation</title>
    <link href="/2021/06/19/zoj/zoj4105/"/>
    <url>/2021/06/19/zoj/zoj4105/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://zoj.pintia.cn/problem-sets/91827364500/problems/91827370500">https://zoj.pintia.cn/problem-sets/91827364500/problems/91827370500</a></p><p>Name    Result        Time(ms)    Memory(KB)<br>0        Accepted    5            448</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> T;<br>    string arr = <span class="hljs-string">&quot;0aeiyou&quot;</span>;<br>    cin&gt;&gt;T;<br>    string str;<br>    <span class="hljs-keyword">while</span> (T--)&#123;<br>        cin&gt;&gt;str;<br>        string res=<span class="hljs-string">&quot;&quot;</span>;<br>        res+=str[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; str.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span>(arr.<span class="hljs-built_in">find</span>(str[i]) == string::npos)&#123;<br>                res+=str[i];<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;res&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>zoj算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>167. 两数之和 II - 输入有序数组</title>
    <link href="/2021/06/18/leetcode/twoSumsort/"/>
    <url>/2021/06/18/leetcode/twoSumsort/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/</a><br>和第一题的两数之和有些不同，因为是升序排列的，双指针，map，双循环都可以通过。</p><p>执行用时：1 ms, 在所有 Java 提交中击败了93.85% 的用户<br>内存消耗：38.7 MB, 在所有 Java 提交中击败了47.70% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] numbers, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = numbers.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left&lt;right)&#123;<br>            <span class="hljs-keyword">int</span> mid = left+(right-left)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">int</span> sum = numbers[left]+numbers[right];<br>            <span class="hljs-keyword">if</span> (target == sum)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;left+<span class="hljs-number">1</span>,right+<span class="hljs-number">1</span>&#125;;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target&gt;sum)&#123;<br>                left ++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                right --;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行用时：294 ms, 在所有 Java 提交中击败了5.03% 的用户<br>内存消耗：38.8 MB, 在所有 Java 提交中击败了32.46% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] numbers, <span class="hljs-keyword">int</span> target) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;numbers.length; i++)&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j =i+<span class="hljs-number">1</span>; j&lt;numbers.length; j++)&#123;<br>                    <span class="hljs-keyword">if</span> (target - numbers[i] == numbers[j])&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;i+<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>&#125;;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>map<br>执行用时：2 ms, 在所有 Java 提交中击败了33.04% 的用户<br>内存消耗：38.7 MB, 在所有 Java 提交中击败了38.82% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] numbers, <span class="hljs-keyword">int</span> target) &#123;<br>        Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;(numbers.length);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numbers.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (map.get(target - numbers[i])!=<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;map.get(target-numbers[i])+<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>&#125;;<br>            &#125;<br>            map.put(numbers[i],i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>561. 数组拆分 I</title>
    <link href="/2021/06/16/leetcode/ArrayPartition/"/>
    <url>/2021/06/16/leetcode/ArrayPartition/</url>
    
    <content type="html"><![CDATA[<p>双指针的写法<br>执行用时：60 ms, 在所有 C++ 提交中击败了60.86% 的用户<br>内存消耗：27.5 MB, 在所有 C++ 提交中击败了86.11% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">arrayPairSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> slow=<span class="hljs-number">0</span>,fast = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span> (fast&lt;n)&#123;<br>            <span class="hljs-keyword">if</span> (nums[fast] &gt;= nums[slow]) &#123;<br>                sum+= <span class="hljs-built_in">min</span>(nums[slow],nums[fast]);<br>                slow = fast+<span class="hljs-number">1</span>;<br>                fast +=<span class="hljs-number">2</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                fast++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>排序后奇数下标的值都为较小值，求和即刻<br>执行用时：52 ms, 在所有 C++ 提交中击败了92.09% 的用户<br>内存消耗：27.6 MB, 在所有 C++ 提交中击败了20.27% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">arrayPairSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> slow=<span class="hljs-number">0</span>,fast = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;sum+=nums[i];&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>344. 反转字符串</title>
    <link href="/2021/06/15/leetcode/344reverseStr/"/>
    <url>/2021/06/15/leetcode/344reverseStr/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-string/">https://leetcode-cn.com/problems/reverse-string/</a><br>执行用时：12 ms, 在所有 C++ 提交中击败了99.55% 的用户<br>内存消耗：22.7 MB, 在所有 C++ 提交中击败了5.09% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reverseString</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">char</span>&gt;&amp; s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left =<span class="hljs-number">0</span>, right = s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">char</span> t;<br>        <span class="hljs-keyword">while</span> (left&lt;right)&#123;<br>            t=s[left];<br>            s[left] = s[right];<br>            s[right]=t;<br>            left++;<br>            right--;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时：1 ms, 在所有 Java 提交中击败了100.00% 的用户<br>内存消耗：45.1 MB, 在所有 Java 提交中击败了58.14% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>       <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverseString</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] s)</span> </span>&#123;<br>           <span class="hljs-keyword">int</span> left =<span class="hljs-number">0</span>, right = s.length-<span class="hljs-number">1</span>;<br>           <span class="hljs-keyword">char</span> t;<br>           <span class="hljs-keyword">while</span> (left &lt; right)&#123;<br>               t = s[left];<br>               s[left] = s[right];<br>               s[right] = t;<br>               left++;<br>               right--;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>执行用时：156 ms, 在所有 Swift 提交中击败了98.87% 的用户<br>内存消耗：18.1 MB, 在所有 Swift 提交中击败了27.44% 的用户</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseString</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">s</span>: <span class="hljs-keyword">inout</span> [<span class="hljs-type">Character</span>])</span> &#123;<br>        <span class="hljs-keyword">var</span> left <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right <span class="hljs-operator">=</span> s.count <span class="hljs-operator">-</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> t : <span class="hljs-type">Character</span><br>        <span class="hljs-keyword">while</span> left <span class="hljs-operator">&lt;</span> right &#123;<br>            t <span class="hljs-operator">=</span> s[left]<br>            s[left] <span class="hljs-operator">=</span> s[right]<br>            s[right] <span class="hljs-operator">=</span> t<br>            left <span class="hljs-operator">+=</span> <span class="hljs-number">1</span><br>            right <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>219. 存在重复元素 II</title>
    <link href="/2021/06/14/leetcode/containDuplicate/"/>
    <url>/2021/06/14/leetcode/containDuplicate/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/contains-duplicate-ii/">https://leetcode-cn.com/problems/contains-duplicate-ii/</a><br>执行用时：28 ms, 在所有 C++ 提交中击败了86.81% 的用户<br>内存消耗：15.9 MB, 在所有 C++ 提交中击败了72.51% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">containsNearbyDuplicate</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        unordered_set&lt;<span class="hljs-keyword">int</span>&gt; s;<br>        <span class="hljs-keyword">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> cur = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            cur = nums[i];<br>            <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">find</span>(cur) == s.<span class="hljs-built_in">end</span>()) &#123;<br>                s.<span class="hljs-built_in">insert</span>(cur);<br>                <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() &gt; k) &#123; <span class="hljs-comment">//一旦超过k的长度就去掉前面k距离前的值</span><br>                    s.<span class="hljs-built_in">erase</span>(nums[i - k]);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//再次找到nums[i]说明小于距离k</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>执行用时：10 ms, 在所有 Java 提交中击败了58.33% 的用户<br>内存消耗：41.7 MB, 在所有 Java 提交中击败了68.78% 的用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsNearbyDuplicate</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (set.contains(nums[i])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            set.add(nums[i]);<br>            <span class="hljs-keyword">if</span> (set.size() &gt; k) &#123;<br>                set.remove(nums[i - k]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
      <tag>Set</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>28. 实现 strStr()</title>
    <link href="/2021/06/12/leetcode/kmp/"/>
    <url>/2021/06/12/leetcode/kmp/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">strStr</span><span class="hljs-params">(string haystack, string needle)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = haystack.<span class="hljs-built_in">size</span>(), i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> n = needle.<span class="hljs-built_in">size</span>(), j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (needle.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(haystack.<span class="hljs-built_in">empty</span>()|| m&lt;n)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">size_t</span> length = needle.<span class="hljs-built_in">size</span>(), fast = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> *next = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br>        <span class="hljs-keyword">int</span> slow = next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span> (fast &lt; length<span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-number">0</span> &gt; slow || needle[fast] == needle[slow])) &#123;<br>                fast++;<br>                slow++;<br>                next[fast] = slow;<br>                <span class="hljs-comment">//next[fast] = (needle[fast] != needle[slow] ? slow : next[slow]);</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                slow = next[slow];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; i &lt; m) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; j || haystack[i] == needle[j]) &#123;<br>                i++;<br>                j++;<br>                <span class="hljs-keyword">if</span>(needle[j]==<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>                    flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<span class="hljs-comment">//已经找到末尾</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                j = next[j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">delete</span>[] next;<br>        <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span> i-j;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//KMP 主算法参考代码：</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">match</span> <span class="hljs-params">(<span class="hljs-keyword">char</span>* P, <span class="hljs-keyword">char</span>* S)</span></span>&#123; <span class="hljs-comment">// KMP 算法</span><br>    <span class="hljs-keyword">int</span>* next = <span class="hljs-built_in">buildNext</span>(P); <span class="hljs-comment">// 构造 next 表</span><br>    <span class="hljs-keyword">int</span> m = (<span class="hljs-keyword">int</span>) <span class="hljs-built_in">strlen</span> (S), i = <span class="hljs-number">0</span>; <span class="hljs-comment">// 文本串指针</span><br>    <span class="hljs-keyword">int</span> n = (<span class="hljs-keyword">int</span>) <span class="hljs-built_in">strlen</span>(P), j = <span class="hljs-number">0</span>; <span class="hljs-comment">//模式串指针</span><br>    <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; i &lt; m) <span class="hljs-comment">// 自左向右逐个比对字符</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt; j || S[i] == P[j]) <span class="hljs-comment">// 若匹配，或 P 已移除最左侧</span><br>            &#123;i++; j++;&#125; <span class="hljs-comment">// 则转到下一字符</span><br>        <span class="hljs-keyword">else</span><br>            j = next[j]; <span class="hljs-comment">// 模式串右移（注意：文本串不用回退）</span><br>    <span class="hljs-keyword">delete</span> [] next; <span class="hljs-comment">// 释放 next 表</span><br>    <span class="hljs-keyword">return</span> i - j;<br>&#125;<br><span class="hljs-comment">//构造 next 表参考代码：</span><br><span class="hljs-function"><span class="hljs-keyword">int</span>* <span class="hljs-title">buildNext</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* P)</span> </span>&#123; <span class="hljs-comment">// 构造模式串 P 的 next 表</span><br>    <span class="hljs-keyword">size_t</span> m = <span class="hljs-built_in">strlen</span>(P), j = <span class="hljs-number">0</span>; <span class="hljs-comment">// “主”串指针</span><br>    <span class="hljs-keyword">int</span>* N = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m]; <span class="hljs-comment">// next 表</span><br>    <span class="hljs-keyword">int</span>  t = N[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 模式串指针</span><br>    <span class="hljs-keyword">while</span> (j &lt; m - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-number">0</span> &gt; t || P[j] == P[t])&#123; <span class="hljs-comment">// 匹配</span><br>            j++; t++;<br>            N[j] = t; <span class="hljs-comment">// 此句可改进为 N[j] = (P[j] != P[t] ? t : N[t]);</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-comment">// 失配</span><br>        t = N[t];<br>    <span class="hljs-keyword">return</span> N;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>KMP</tag>
      
      <tag>字符串匹配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 58 - I. 翻转单词顺序</title>
    <link href="/2021/06/10/leetcode/revers1/"/>
    <url>/2021/06/10/leetcode/revers1/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/">https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/</a></p><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户<br>内存消耗：7.1 MB, 在所有 C++ 提交中击败了47.16% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">reverseWords</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,start;<br>        <span class="hljs-keyword">while</span> (s[i]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            start++;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">int</span> n =s.<span class="hljs-built_in">size</span>();<br>        string res=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">int</span> right = n<span class="hljs-number">-1</span>,left = right;<br>        <span class="hljs-keyword">while</span> (left&gt;=start)&#123;<br>            <span class="hljs-keyword">if</span> (s[right]==<span class="hljs-number">32</span>&amp;&amp;right&gt;<span class="hljs-number">0</span>)&#123;<br>                right--;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            left = right;<br>            <span class="hljs-keyword">while</span> (s[left]!=<span class="hljs-number">32</span>&amp;&amp;left&gt;<span class="hljs-number">0</span>)&#123;<br>                left--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (left==start)&#123;left--;&#125;;<br>            <span class="hljs-keyword">for</span> (i = left+<span class="hljs-number">1</span>; i &lt;= right; ++i) &#123;<br>                res+=s[i];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (left&gt;start)&#123;res+=<span class="hljs-string">&#x27; &#x27;</span>;&#125;<br>            right = left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5. 最长回文子串</title>
    <link href="/2021/06/09/leetcode/longest/"/>
    <url>/2021/06/09/leetcode/longest/</url>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">https://leetcode-cn.com/problems/longest-palindromic-substring/</a><br>执行用时：304 ms, 在所有 C++ 提交中击败了51.32% 的用户<br>内存消耗：7 MB, 在所有 C++ 提交中击败了83.19% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length = s.<span class="hljs-built_in">length</span>();<br>        string maxs = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">empty</span>()||s.<span class="hljs-built_in">size</span>()&lt;<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> end,left,right,i;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>                end = length - <span class="hljs-number">1</span>;<br>                right = end;<br>                left = i;<br>                <span class="hljs-keyword">while</span> (right &gt; left)&#123;<br>                    <span class="hljs-keyword">if</span> (s[right] == s[left])&#123;<br>                        --right;<br>                        ++left;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        end--;<br>                        right = end;<br>                        left = i;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> ((end-i+<span class="hljs-number">1</span>) &gt; maxs.<span class="hljs-built_in">size</span>())&#123;<br>                    maxs = s.<span class="hljs-built_in">substr</span>(i,end-i+<span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxs;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
      <tag>C++</tag>
      
      <tag>回文字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>498. Diagonal Traverse</title>
    <link href="/2021/06/06/leetcode/Diagonal%20Traverse/"/>
    <url>/2021/06/06/leetcode/Diagonal%20Traverse/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/diagonal-traverse/">https://leetcode-cn.com/problems/diagonal-traverse/</a><br>执行用时：28 ms, 在所有 C++ 提交中击败了79.11% 的用户<br>内存消耗：18 MB, 在所有 C++ 提交中击败了17.22% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">findDiagonalOrder</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> row = mat.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> col = mat[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; mid;<br>        <span class="hljs-keyword">if</span>(mat.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;row+col<span class="hljs-number">-1</span>; ++i) &#123;<br>            mid.<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-keyword">int</span> r = i&lt;col?<span class="hljs-number">0</span>:i-col+<span class="hljs-number">1</span>; <span class="hljs-comment">// 行遍历完到下一列</span><br>            <span class="hljs-keyword">int</span> c = i&lt;col?i:col<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span> (r&lt; row &amp;&amp; c&gt;<span class="hljs-number">-1</span>) &#123;<br>                mid.<span class="hljs-built_in">push_back</span>(mat[r][c]);<br>                ++r; <span class="hljs-comment">// 下一行</span><br>                --c; <span class="hljs-comment">// 左边的列</span><br>            &#125;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//需要翻转的对角线</span><br>                <span class="hljs-built_in">reverse</span>(mid.<span class="hljs-built_in">begin</span>(), mid.<span class="hljs-built_in">end</span>());<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mid.<span class="hljs-built_in">size</span>(); i++) &#123;<br>                res.<span class="hljs-built_in">push_back</span>(mid[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>矩阵</tag>
      
      <tag>C++</tag>
      
      <tag>vector</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试题 01.08. 零矩阵</title>
    <link href="/2021/06/05/leetcode/setZeroes/"/>
    <url>/2021/06/05/leetcode/setZeroes/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://leetcode-cn.com/problems/zero-matrix-lcci/">https://leetcode-cn.com/problems/zero-matrix-lcci/</a><br>暴力循环法<br>执行用时：12 ms, 在所有 C++ 提交中击败了88.06% 的用户<br>内存消耗：11.9 MB, 在所有 C++ 提交中击败了45.29% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setZeroes</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> row = matrix.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> col = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> index[row][col];<br>        <span class="hljs-built_in">memset</span>(&amp;index[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],<span class="hljs-number">0</span>,<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(index)); <br>        <span class="hljs-keyword">int</span> i,j;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;row; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;col; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(matrix[i][j] == <span class="hljs-number">0</span>)&#123;<br>                    index[i][j] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;row; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;col; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(index[i][j])&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>; k&lt;col; ++k)&#123;<br>                        matrix[i][k] = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;row; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;col; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(index[i][j])&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>; k&lt;row; ++k)&#123;<br>                        matrix[k][j] = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//另一种简化版</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setZeroes</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rowLength = matrix.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> colLength = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; row;<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; col;<br>        <span class="hljs-keyword">int</span> i,j;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;rowLength; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;colLength; ++j)&#123;<br>                <span class="hljs-keyword">if</span>(matrix[i][j] == <span class="hljs-number">0</span>)&#123;<br>                    row.<span class="hljs-built_in">push_back</span>(i);<br>                    col.<span class="hljs-built_in">push_back</span>(j);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;rowLength; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;colLength; ++j)&#123;<br>                matrix[row[i]][j] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;colLength; ++i)&#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;colLength; ++j)&#123;<br>               matrix[j][col[i]] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>矩阵</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 22. 链表中倒数第k个节点</title>
    <link href="/2021/05/21/leetcode/k/"/>
    <url>/2021/05/21/leetcode/k/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">getKthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">//初始化指向表头</span><br>        ListNode *pre=head, *last=head;<br>        <span class="hljs-comment">//先往后走</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>; i&lt;=k; i++)&#123;<br>            last = last-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">//同时移动指针</span><br>        <span class="hljs-keyword">while</span>(last != <span class="hljs-literal">NULL</span>)&#123;<br>            pre = pre-&gt;next;<br>            last = last-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">//返回前一个指针</span><br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户<br>内存消耗：10.3 MB, 在所有 C++ 提交中击败了57.96% 的用户</p>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>206. 反转链表 C++</title>
    <link href="/2021/05/18/leetcode/206reverseList/"/>
    <url>/2021/05/18/leetcode/206reverseList/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-linked-list/">https://leetcode-cn.com/problems/reverse-linked-list/</a><br>执行用时：4 ms, 在所有 C++ 提交中击败了96.52% 的用户<br>内存消耗：8 MB, 在所有 C++ 提交中击败了91.52% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++">**<br> * Definition <span class="hljs-keyword">for</span> singly-linked list.<br> * <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> &#123;</span><br> *     <span class="hljs-keyword">int</span> val;<br> *     ListNode *next;<br> *     <span class="hljs-built_in">ListNode</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br> *     <span class="hljs-built_in">ListNode</span>(<span class="hljs-keyword">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br> *     <span class="hljs-built_in">ListNode</span>(<span class="hljs-keyword">int</span> x, ListNode *next) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(next) &#123;&#125;<br> * &#125;;<br> */<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode *pre = <span class="hljs-literal">NULL</span>;<br>        ListNode *cur = head;<br>        ListNode *next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">NULL</span>)&#123;<br>            next = cur-&gt;next;<br>            cur-&gt;next = pre;<br>            pre = cur;<br>            cur= next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>执行用时：12 ms, 在所有 Swift 提交中击败了96.71%的用户<br>内存消耗：14.6 MB, 在所有 Swift 提交中击败了29.72%的用户</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>1，添加一个空的头节点A，相当于头插法的入口<br>2，设置一个实际的lasthead指针，表示上一次链表的头节点<br>3，头节点A每次指向当前cur访问节点的下一个节点<br>4，然后cur就可以跳过这个被A选中的节点，指向下一个，直到最后cur指向空<br>5，修改被选中的节点的next指针，使它指向旧的头节点<br>6，将lasthead向前移动，指向被A选中的节点，也就是新插入的节点<br>7，最后返回链表的实际起点lasthead</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     public var val: Int</span><br><span class="hljs-comment"> *     public var next: ListNode?</span><br><span class="hljs-comment"> *     public init() &#123; self.val = 0; self.next = nil; &#125;</span><br><span class="hljs-comment"> *     public init(_ val: Int) &#123; self.val = val; self.next = nil; &#125;</span><br><span class="hljs-comment"> *     public init(_ val: Int, _ next: ListNode?) &#123; self.val = val; self.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseList</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-type">A</span> <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>,head)<br>        <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">var</span> lastHead <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> cur<span class="hljs-operator">?</span>.next <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-type">A</span>.next <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next<br>            cur<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next<span class="hljs-operator">?</span>.next<br>            <span class="hljs-type">A</span>.next<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> lastHead<br>            lastHead <span class="hljs-operator">=</span> <span class="hljs-type">A</span>.next<br>        &#125;<br>        <span class="hljs-keyword">return</span> lastHead<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseList</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">head</span>: <span class="hljs-type">ListNode</span>?)</span> -&gt; <span class="hljs-type">ListNode</span>? &#123;<br>        <span class="hljs-keyword">if</span> head <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> <span class="hljs-operator">||</span> head<span class="hljs-operator">?</span>.next <span class="hljs-operator">==</span> <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-keyword">return</span> head<br>        &#125;<br>        <span class="hljs-keyword">var</span> cur <span class="hljs-operator">=</span> head, pre <span class="hljs-operator">=</span> <span class="hljs-type">ListNode</span>(<span class="hljs-number">0</span>).next , nextP <span class="hljs-operator">=</span> head<br>        <span class="hljs-keyword">while</span> cur <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            nextP <span class="hljs-operator">=</span> cur<span class="hljs-operator">?</span>.next<br>            cur<span class="hljs-operator">?</span>.next <span class="hljs-operator">=</span> pre<br>            pre <span class="hljs-operator">=</span> cur<br>            cur <span class="hljs-operator">=</span> nextP<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Swift</tag>
      
      <tag>C++</tag>
      
      <tag>三指针</tag>
      
      <tag>反转链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1012 数字分类</title>
    <link href="/2021/05/15/patB/basic-1012/"/>
    <url>/2021/05/15/patB/basic-1012/</url>
    
    <content type="html"><![CDATA[<p>题目链接： <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840">https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a1 = <span class="hljs-number">0</span>, a2 = <span class="hljs-number">0</span>, a3 = <span class="hljs-number">0</span>, a4 = <span class="hljs-number">0</span>, a5 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">float</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> N;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>,x=<span class="hljs-number">1</span>;<br>    cin &gt;&gt; N;<br>    <span class="hljs-keyword">int</span> arr[N];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>        cin &gt;&gt; arr[i];<br>        <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) &#123;<br>            a1 += arr[i];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">5</span> == <span class="hljs-number">1</span>) &#123;<br>            flag = <span class="hljs-number">1</span>;<br>            a2 += x * arr[i];<br>            x = -x;;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">5</span> == <span class="hljs-number">2</span>) &#123;<br>            a3++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">5</span> == <span class="hljs-number">3</span>) &#123;<br>            a4++;<br>            sum += arr[i];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] % <span class="hljs-number">5</span> == <span class="hljs-number">4</span>) &#123; <span class="hljs-keyword">if</span> (arr[i] &gt;= a5) a5 = arr[i]; &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a1 == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a1);<br>    <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a2);<br>    <span class="hljs-keyword">if</span>(a3 == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a3);<br>    <span class="hljs-keyword">if</span>(a4 == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.1f &quot;</span>, sum/a4*<span class="hljs-number">1.0</span>);<br>    <span class="hljs-keyword">if</span>(a5 == <span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N&quot;</span>);  <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a5);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>35. 搜索插入位置</title>
    <link href="/2021/05/13/leetcode/search-insert/"/>
    <url>/2021/05/13/leetcode/search-insert/</url>
    
    <content type="html"><![CDATA[<p>题目链接 <a href="https://leetcode-cn.com/problems/search-insert-position/">https://leetcode-cn.com/problems/search-insert-position/</a><br>除了二分法外，还可以遍历全部，找不到即输出数组长度的值，也就是插入未知的下标。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> right = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; <span class="hljs-comment">//注意边界</span><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> mid;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            mid = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (target &gt; nums[mid] ) &#123; <br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>二分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>724. 寻找数组的中心下标 C++</title>
    <link href="/2021/05/12/leetcode/findArrayIndexC/"/>
    <url>/2021/05/12/leetcode/findArrayIndexC/</url>
    
    <content type="html"><![CDATA[<p>hhh，执行结果不稳定，有时候挺好的。<br>执行用时：20 ms, 在所有 C++ 提交中击败了93.14% 的用户<br>内存消耗：30.2 MB, 在所有 C++ 提交中击败了77.02% 的用户</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pivotIndex</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> leftSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> val:nums) sum += val;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            <span class="hljs-keyword">if</span> (leftSum == sum - nums[i] - leftSum) &#123; <span class="hljs-comment">//左边之和等于右边之和，当下i为中间下标</span><br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>            leftSum += nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1008 数组元素循环右移问题</title>
    <link href="/2021/05/10/patB/basic-1008/"/>
    <url>/2021/05/10/patB/basic-1008/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> N = in.nextInt();<br>        <span class="hljs-keyword">int</span> M = in.nextInt();<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100</span>];<br>        M = M % N;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            arr[i] = in.nextInt();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N - M; i &lt;= N - <span class="hljs-number">1</span>; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N - M - <span class="hljs-number">1</span>; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.print(arr[N - M - <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1074 Reversing Linked List</title>
    <link href="/2021/05/08/patA/1074/"/>
    <url>/2021/05/08/patA/1074/</url>
    
    <content type="html"><![CDATA[<p>题目链接 <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805394512134144">https://pintia.cn/problem-sets/994805342720868352/problems/994805394512134144</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> first, k, n, sum = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; first &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">int</span> temp, data[<span class="hljs-number">100005</span>], next[<span class="hljs-number">100005</span>], list[<span class="hljs-number">100005</span>], result[<span class="hljs-number">100005</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; temp;<br>        cin &gt;&gt; data[temp] &gt;&gt; next[temp];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (first != <span class="hljs-number">-1</span>) &#123;<br>        list[sum++] = first;<br>        first = next[first];<br>    &#125;<br>    <span class="hljs-comment">//result[100] r[12309] r[33218] r[00000] r[99999] r[68237]</span><br>    <span class="hljs-comment">//1-2-3-4-5-6-7-8</span><br>    <span class="hljs-comment">//3-2-1-6-5-4-7-8</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sum; i++) result[i] = list[i];<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, i, index = k;<br>    <span class="hljs-keyword">int</span> cnt = sum / k;<br>    <span class="hljs-keyword">while</span> (cnt--) &#123; <span class="hljs-comment">// 循环实现更好理解</span><br>        <span class="hljs-keyword">for</span> (i = left; i &lt; k + left; ++i) &#123;<br>            result[i] = list[--index];<br>        &#125;<br>        left = i;<br>        index = k + left;<br>    &#125;<br><br><span class="hljs-comment">/*liuchuo.net</span><br><span class="hljs-comment">*    for (int i = 0; i &lt; (sum - sum % k); i++)</span><br><span class="hljs-comment">*       result[i] = list[i / k * k + k - 1 - i % k];</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sum - <span class="hljs-number">1</span>; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d %05d\n&quot;</span>, result[i], data[result[i]], result[i + <span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d -1&quot;</span>, result[sum - <span class="hljs-number">1</span>], data[result[sum - <span class="hljs-number">1</span>]]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat甲级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>反转链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1051 Pop Sequence</title>
    <link href="/2021/05/08/patA/1051/"/>
    <url>/2021/05/08/patA/1051/</url>
    
    <content type="html"><![CDATA[<p>===<br>题目链接：<a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805427332562944">https://pintia.cn/problem-sets/994805342720868352/problems/994805427332562944</a><br>===</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m,n,k;<br>    cin&gt;&gt;m&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; ++i) &#123;<br>        stack&lt;<span class="hljs-keyword">int</span> &gt;(s);<br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">int</span> current = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>            s.<span class="hljs-built_in">push</span>(i);<br>            <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">size</span>() &gt; m) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">while</span> (!s.<span class="hljs-built_in">empty</span>() &amp;&amp; s.<span class="hljs-built_in">top</span>() == v[current]) &#123;<br>                s.<span class="hljs-built_in">pop</span>();<br>                current++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (current == n + <span class="hljs-number">1</span>) flag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (flag) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat甲级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>堆栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1007 Maximum Subsequence Sum</title>
    <link href="/2021/05/08/patA/1007/"/>
    <url>/2021/05/08/patA/1007/</url>
    
    <content type="html"><![CDATA[<p>===<br>题目链接：<a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805514284679168">https://pintia.cn/problem-sets/994805342720868352/problems/994805514284679168</a><br>===</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Max 100001</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> N;<br>    <span class="hljs-keyword">int</span> A[Max],tempIndex=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;N);<br>    <span class="hljs-keyword">int</span> ThisSum, MaxSum,i;<br>    ThisSum = <span class="hljs-number">0</span>;<br>    MaxSum = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">int</span> left=<span class="hljs-number">0</span>,right=N<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; N; i++ ) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i]);<br>        ThisSum += A[i];<br>        <span class="hljs-keyword">if</span>(ThisSum &lt; <span class="hljs-number">0</span>) &#123;<br>            ThisSum = <span class="hljs-number">0</span>;    <span class="hljs-comment">//变小则清0</span><br>            tempIndex = i+<span class="hljs-number">1</span>; <span class="hljs-comment">//移动边界</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ThisSum &gt; MaxSum) &#123;<br>            MaxSum = ThisSum;<br>            left = tempIndex; <br>            right = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (MaxSum&lt;<span class="hljs-number">0</span>) &#123;<br>        MaxSum = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,MaxSum, A[left], A[right]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat甲级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>在线处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1016 部分A+B</title>
    <link href="/2021/05/08/patB/basic-1016/"/>
    <url>/2021/05/08/patB/basic-1016/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a,da,b,db;<br>    <span class="hljs-keyword">int</span> pa=<span class="hljs-number">0</span>,pb=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>,&amp;a,&amp;da,&amp;b,&amp;db);<br>    <span class="hljs-keyword">while</span>(a)&#123;<br>        <span class="hljs-keyword">if</span>(a%<span class="hljs-number">10</span> == da)&#123;<br>            pa= pa*<span class="hljs-number">10</span>;<br>            pa+=da;<br>        &#125;<br>        a= a/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(b)&#123;<br>        <span class="hljs-keyword">if</span>(b%<span class="hljs-number">10</span> == db)&#123;<br>            pb= pb*<span class="hljs-number">10</span>;<br>            pb+=db;<br>        &#125;<br>        b= b/<span class="hljs-number">10</span>;<br>    &#125;<br>    cout&lt;&lt;(pa+pb)&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1026 程序运行时间 (java)</title>
    <link href="/2021/05/08/patB/basic-1026(java)/"/>
    <url>/2021/05/08/patB/basic-1026(java)/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> C1, C2;<br>        C1 = in.nextInt();<br>        C2 = in.nextInt();<br>        <span class="hljs-keyword">int</span> tck = (C2 - C1 +<span class="hljs-number">50</span>)/<span class="hljs-number">100</span> ;<br>        <span class="hljs-keyword">int</span> hour, minute, second;<br>        hour = tck / <span class="hljs-number">3600</span>;<br>        minute = tck % <span class="hljs-number">3600</span> / <span class="hljs-number">60</span>;<br>        second = tck % <span class="hljs-number">60</span>;<br>        System.out.println(String.format(<span class="hljs-string">&quot;%02d:%02d:%02d&quot;</span>,hour,minute,second));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1026 程序运行时间</title>
    <link href="/2021/05/08/patB/basic-1026/"/>
    <url>/2021/05/08/patB/basic-1026/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CLK_TCK 100</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> c1,c2;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;c1,&amp;c2);<br>    <span class="hljs-keyword">int</span> second = (c2-c1+<span class="hljs-number">50</span>)*<span class="hljs-number">1.0</span>/CLK_TCK;<br>    <span class="hljs-keyword">int</span> hour = second/<span class="hljs-number">3600</span>;<br>    <span class="hljs-keyword">int</span> minute = (second%<span class="hljs-number">3600</span>)/<span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">int</span> s = second-hour*<span class="hljs-number">3600</span>-minute*<span class="hljs-number">60</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02d:%02d:%02d&quot;</span>,hour,minute,s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1046 划拳 (java)</title>
    <link href="/2021/05/08/patB/basic-1046(java)/"/>
    <url>/2021/05/08/patB/basic-1046(java)/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> N;<br>        <span class="hljs-keyword">int</span> say1,do1,say2,do2;<br>        <span class="hljs-keyword">int</span> A = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> B = <span class="hljs-number">0</span>;<br>        N = in.nextInt();<br>        <span class="hljs-keyword">while</span>(N != <span class="hljs-number">0</span>) &#123;<br>            say1 = in.nextInt();<br>            do1 = in.nextInt();<br>            say2 = in.nextInt();<br>            do2 = in.nextInt();<br>            <span class="hljs-keyword">int</span> sum = say1 + say2;<br>            <span class="hljs-keyword">if</span>(sum == do1 &amp;&amp; sum != do2)&#123;<br>                B++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum == do2 &amp;&amp; sum != do1)&#123;<br>                A++;<br>            &#125;<br>            N--;<br>        &#125;<br>        System.out.println(A+<span class="hljs-string">&quot; &quot;</span>+B);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1046 划拳</title>
    <link href="/2021/05/08/patB/basic-1046/"/>
    <url>/2021/05/08/patB/basic-1046/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> A, a, B, b;<br>    <span class="hljs-keyword">int</span> sum1, sum2;<br>    <span class="hljs-keyword">int</span> N;<br>    cin &gt;&gt; N;<br>    <span class="hljs-keyword">while</span> (N--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, &amp;A, &amp;a, &amp;B, &amp;b);<br>        <span class="hljs-keyword">if</span> ((A + B) == a &amp;&amp; (A + B) != b) &#123;<br>            sum1++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((A + B) == b &amp;&amp; (A + B) != a) &#123;<br>            sum2++;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; sum2 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; sum1 &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1002 写出这个数</title>
    <link href="/2021/05/08/patB/basic-1002/"/>
    <url>/2021/05/08/patB/basic-1002/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    string pinyin[<span class="hljs-number">10</span>]=&#123;<span class="hljs-string">&quot;ling&quot;</span>,<span class="hljs-string">&quot;yi&quot;</span>,<span class="hljs-string">&quot;er&quot;</span>,<span class="hljs-string">&quot;san&quot;</span>,<span class="hljs-string">&quot;si&quot;</span>,<span class="hljs-string">&quot;wu&quot;</span>,<span class="hljs-string">&quot;liu&quot;</span>,<span class="hljs-string">&quot;qi&quot;</span>,<span class="hljs-string">&quot;ba&quot;</span>,<span class="hljs-string">&quot;jiu&quot;</span>&#125;;<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>        sum+=(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    string num = <span class="hljs-built_in">to_string</span>(sum);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>) cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        cout&lt;&lt;pinyin[num[i]-<span class="hljs-string">&#x27;0&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1001 害死人不偿命的(3n+1)猜想</title>
    <link href="/2021/05/08/patB/basic-1001(3n+1)/"/>
    <url>/2021/05/08/patB/basic-1001(3n+1)/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">while</span>(n!=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            n /=<span class="hljs-number">2</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            n = (<span class="hljs-number">3</span>*n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>        &#125;<br>        count++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,count);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pat乙级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>678. 有效的括号字符串</title>
    <link href="/2021/05/08/leetcode/checkValidString/"/>
    <url>/2021/05/08/leetcode/checkValidString/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/***</span><br><span class="hljs-comment">看了题解下面的思路，非常便捷，原代码是三目表达式改写成if else了。</span><br><span class="hljs-comment">“有效的字符串，即从左向右看是有效的，从右向左看也是有效的</span><br><span class="hljs-comment">如果在遍历过程中，left或者right小于0，则是无效”</span><br><span class="hljs-comment">***/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">checkValidString</span><span class="hljs-params">(string s)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>            left--; <br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            left++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(s[s.<span class="hljs-built_in">length</span>()-i<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;(&#x27;</span>)&#123; <span class="hljs-comment">//i从0开始，但是长度是从1开始数，所以-1</span><br>            right--;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            right++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (left&lt;<span class="hljs-number">0</span> || right &lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>724. 寻找数组的中心下标</title>
    <link href="/2021/05/08/leetcode/findArrayIndex/"/>
    <url>/2021/05/08/leetcode/findArrayIndex/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pivotIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> leftSum =<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i:nums) &#123;<br>            sum+=i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(leftSum == sum - leftSum-nums[i])&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>            leftSum+=nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11. 盛最多水的容器</title>
    <link href="/2021/05/08/leetcode/ContainerWithMostWater/"/>
    <url>/2021/05/08/leetcode/ContainerWithMostWater/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//双指针法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> area = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = height.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            area = Math.min(height[left], height[right])*(right-left);<br>            ans = Math.max(area, ans);<br>            <span class="hljs-keyword">if</span>(height[left] &gt;= height[right]) &#123;<br>                right--;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                left++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//暴力法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Violence</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> max = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> area = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> wide = height.length;<br>        <span class="hljs-keyword">int</span> blow = wide -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(left=<span class="hljs-number">0</span>; left &lt; wide; left++) &#123;<br>            blow = wide- <span class="hljs-number">1</span> - left;<br>            <span class="hljs-keyword">for</span>(right = wide -<span class="hljs-number">1</span>; right&gt; left ; right --) &#123;<br>                <span class="hljs-keyword">if</span>(height[left] &lt;= height[right]) &#123;<br>                    area = height[left]*blow;<br>                    blow --;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    area = height[right]*blow;<br>                    blow --;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(area &gt;= max) &#123;<br>                    max = area;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 两数之和(violence)</title>
    <link href="/2021/05/08/leetcode/twoSum/"/>
    <url>/2021/05/08/leetcode/twoSum/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Violence</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[j] == target - nums[i]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; i, j &#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;No two sum solution&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  复杂度分析：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">时间复杂度：O(n^2)O(n2)</span><br><span class="hljs-comment">对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，</span><br><span class="hljs-comment">这将耗费 O(n)O(n) 的时间。因此时间复杂度为 O(n^2)O(n2)。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">空间复杂度：O(1)O(1)。</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 两数之和 (HashMap)</title>
    <link href="/2021/05/08/leetcode/twoSum2/"/>
    <url>/2021/05/08/leetcode/twoSum2/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution2</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Integer&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; nums.length; i++)&#123;<br>            map.put(nums[i], i);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">int</span> aim = target-nums[i];<br>            <span class="hljs-keyword">if</span>(map.containsKey(aim) &amp;&amp; map.get(aim) != i)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123;i, map.get(aim)&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>HashMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zoj1037</title>
    <link href="/2021/05/08/zoj/zoj1037/"/>
    <url>/2021/05/08/zoj/zoj1037/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zoj1037</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> total,m,n;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">double</span> sum = <span class="hljs-number">0</span>;<br>        total = in.nextInt();<br>        <span class="hljs-keyword">while</span>(total &gt; <span class="hljs-number">0</span>)&#123;<br>            m = in.nextInt();<br>            n = in.nextInt();<br>            count++;<br>            System.out.println(<span class="hljs-string">&quot;Scenario #&quot;</span>+count+<span class="hljs-string">&quot;:&quot;</span>);<br>            <span class="hljs-keyword">if</span>( m%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> || n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                sum = m*n;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                sum = m*n +<span class="hljs-number">0.41</span>;<br>            &#125;<br>            System.out.printf(<span class="hljs-string">&quot;%#.2f\n&quot;</span>,sum);<br>            System.out.println();<br>            total --;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>zoj算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zoj1001</title>
    <link href="/2021/05/07/zoj/zoj1001/"/>
    <url>/2021/05/07/zoj/zoj1001/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zoj1001</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">while</span> (in.hasNextInt()) &#123;<br>            <span class="hljs-keyword">int</span> a = in.nextInt();<br>            <span class="hljs-keyword">int</span> b = in.nextInt();<br>            System.out.println(a + b);<br>        &#125;<br>        in.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>zoj算法题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
